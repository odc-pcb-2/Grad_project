
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  000010c2  00001156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800136  00800136  0000122c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002153  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4f  00000000  00000000  0000359f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fa1  00000000  00000000  000041ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  00005190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000810  00000000  00000000  000054f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012ae  00000000  00000000  00005d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006fae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 35       	cpi	r26, 0x53	; 83
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8b 03 	call	0x716	; 0x716 <main>
      8a:	0c 94 5f 08 	jmp	0x10be	; 0x10be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vidSetPinMode>:
      92:	81 30       	cpi	r24, 0x01	; 1
      94:	01 f1       	breq	.+64     	; 0xd6 <DIO_vidSetPinMode+0x44>
      96:	30 f0       	brcs	.+12     	; 0xa4 <DIO_vidSetPinMode+0x12>
      98:	82 30       	cpi	r24, 0x02	; 2
      9a:	b1 f1       	breq	.+108    	; 0x108 <DIO_vidSetPinMode+0x76>
      9c:	83 30       	cpi	r24, 0x03	; 3
      9e:	09 f4       	brne	.+2      	; 0xa2 <DIO_vidSetPinMode+0x10>
      a0:	4c c0       	rjmp	.+152    	; 0x13a <DIO_vidSetPinMode+0xa8>
      a2:	08 95       	ret
      a4:	41 30       	cpi	r20, 0x01	; 1
      a6:	59 f4       	brne	.+22     	; 0xbe <DIO_vidSetPinMode+0x2c>
      a8:	2a b3       	in	r18, 0x1a	; 26
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <DIO_vidSetPinMode+0x22>
      b0:	88 0f       	add	r24, r24
      b2:	99 1f       	adc	r25, r25
      b4:	6a 95       	dec	r22
      b6:	e2 f7       	brpl	.-8      	; 0xb0 <DIO_vidSetPinMode+0x1e>
      b8:	82 2b       	or	r24, r18
      ba:	8a bb       	out	0x1a, r24	; 26
      bc:	08 95       	ret
      be:	2a b3       	in	r18, 0x1a	; 26
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_vidSetPinMode+0x38>
      c6:	88 0f       	add	r24, r24
      c8:	99 1f       	adc	r25, r25
      ca:	6a 95       	dec	r22
      cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_vidSetPinMode+0x34>
      ce:	80 95       	com	r24
      d0:	82 23       	and	r24, r18
      d2:	8a bb       	out	0x1a, r24	; 26
      d4:	08 95       	ret
      d6:	41 30       	cpi	r20, 0x01	; 1
      d8:	59 f4       	brne	.+22     	; 0xf0 <DIO_vidSetPinMode+0x5e>
      da:	27 b3       	in	r18, 0x17	; 23
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_vidSetPinMode+0x54>
      e2:	88 0f       	add	r24, r24
      e4:	99 1f       	adc	r25, r25
      e6:	6a 95       	dec	r22
      e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_vidSetPinMode+0x50>
      ea:	82 2b       	or	r24, r18
      ec:	87 bb       	out	0x17, r24	; 23
      ee:	08 95       	ret
      f0:	27 b3       	in	r18, 0x17	; 23
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vidSetPinMode+0x6a>
      f8:	88 0f       	add	r24, r24
      fa:	99 1f       	adc	r25, r25
      fc:	6a 95       	dec	r22
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vidSetPinMode+0x66>
     100:	80 95       	com	r24
     102:	82 23       	and	r24, r18
     104:	87 bb       	out	0x17, r24	; 23
     106:	08 95       	ret
     108:	41 30       	cpi	r20, 0x01	; 1
     10a:	59 f4       	brne	.+22     	; 0x122 <DIO_vidSetPinMode+0x90>
     10c:	24 b3       	in	r18, 0x14	; 20
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vidSetPinMode+0x86>
     114:	88 0f       	add	r24, r24
     116:	99 1f       	adc	r25, r25
     118:	6a 95       	dec	r22
     11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vidSetPinMode+0x82>
     11c:	82 2b       	or	r24, r18
     11e:	84 bb       	out	0x14, r24	; 20
     120:	08 95       	ret
     122:	24 b3       	in	r18, 0x14	; 20
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_vidSetPinMode+0x9c>
     12a:	88 0f       	add	r24, r24
     12c:	99 1f       	adc	r25, r25
     12e:	6a 95       	dec	r22
     130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_vidSetPinMode+0x98>
     132:	80 95       	com	r24
     134:	82 23       	and	r24, r18
     136:	84 bb       	out	0x14, r24	; 20
     138:	08 95       	ret
     13a:	41 30       	cpi	r20, 0x01	; 1
     13c:	59 f4       	brne	.+22     	; 0x154 <DIO_vidSetPinMode+0xc2>
     13e:	21 b3       	in	r18, 0x11	; 17
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_vidSetPinMode+0xb8>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	6a 95       	dec	r22
     14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_vidSetPinMode+0xb4>
     14e:	82 2b       	or	r24, r18
     150:	81 bb       	out	0x11, r24	; 17
     152:	08 95       	ret
     154:	21 b3       	in	r18, 0x11	; 17
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_vidSetPinMode+0xce>
     15c:	88 0f       	add	r24, r24
     15e:	99 1f       	adc	r25, r25
     160:	6a 95       	dec	r22
     162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_vidSetPinMode+0xca>
     164:	80 95       	com	r24
     166:	82 23       	and	r24, r18
     168:	81 bb       	out	0x11, r24	; 17
     16a:	08 95       	ret

0000016c <DIO_vidWritePin>:
     16c:	81 30       	cpi	r24, 0x01	; 1
     16e:	01 f1       	breq	.+64     	; 0x1b0 <DIO_vidWritePin+0x44>
     170:	30 f0       	brcs	.+12     	; 0x17e <DIO_vidWritePin+0x12>
     172:	82 30       	cpi	r24, 0x02	; 2
     174:	b1 f1       	breq	.+108    	; 0x1e2 <DIO_vidWritePin+0x76>
     176:	83 30       	cpi	r24, 0x03	; 3
     178:	09 f4       	brne	.+2      	; 0x17c <DIO_vidWritePin+0x10>
     17a:	4c c0       	rjmp	.+152    	; 0x214 <DIO_vidWritePin+0xa8>
     17c:	08 95       	ret
     17e:	41 30       	cpi	r20, 0x01	; 1
     180:	59 f4       	brne	.+22     	; 0x198 <DIO_vidWritePin+0x2c>
     182:	2b b3       	in	r18, 0x1b	; 27
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_vidWritePin+0x22>
     18a:	88 0f       	add	r24, r24
     18c:	99 1f       	adc	r25, r25
     18e:	6a 95       	dec	r22
     190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_vidWritePin+0x1e>
     192:	82 2b       	or	r24, r18
     194:	8b bb       	out	0x1b, r24	; 27
     196:	08 95       	ret
     198:	2b b3       	in	r18, 0x1b	; 27
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_vidWritePin+0x38>
     1a0:	88 0f       	add	r24, r24
     1a2:	99 1f       	adc	r25, r25
     1a4:	6a 95       	dec	r22
     1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_vidWritePin+0x34>
     1a8:	80 95       	com	r24
     1aa:	82 23       	and	r24, r18
     1ac:	8b bb       	out	0x1b, r24	; 27
     1ae:	08 95       	ret
     1b0:	41 30       	cpi	r20, 0x01	; 1
     1b2:	59 f4       	brne	.+22     	; 0x1ca <DIO_vidWritePin+0x5e>
     1b4:	28 b3       	in	r18, 0x18	; 24
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_vidWritePin+0x54>
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	6a 95       	dec	r22
     1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_vidWritePin+0x50>
     1c4:	82 2b       	or	r24, r18
     1c6:	88 bb       	out	0x18, r24	; 24
     1c8:	08 95       	ret
     1ca:	28 b3       	in	r18, 0x18	; 24
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_vidWritePin+0x6a>
     1d2:	88 0f       	add	r24, r24
     1d4:	99 1f       	adc	r25, r25
     1d6:	6a 95       	dec	r22
     1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_vidWritePin+0x66>
     1da:	80 95       	com	r24
     1dc:	82 23       	and	r24, r18
     1de:	88 bb       	out	0x18, r24	; 24
     1e0:	08 95       	ret
     1e2:	41 30       	cpi	r20, 0x01	; 1
     1e4:	59 f4       	brne	.+22     	; 0x1fc <DIO_vidWritePin+0x90>
     1e6:	25 b3       	in	r18, 0x15	; 21
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_vidWritePin+0x86>
     1ee:	88 0f       	add	r24, r24
     1f0:	99 1f       	adc	r25, r25
     1f2:	6a 95       	dec	r22
     1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_vidWritePin+0x82>
     1f6:	82 2b       	or	r24, r18
     1f8:	85 bb       	out	0x15, r24	; 21
     1fa:	08 95       	ret
     1fc:	25 b3       	in	r18, 0x15	; 21
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_vidWritePin+0x9c>
     204:	88 0f       	add	r24, r24
     206:	99 1f       	adc	r25, r25
     208:	6a 95       	dec	r22
     20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_vidWritePin+0x98>
     20c:	80 95       	com	r24
     20e:	82 23       	and	r24, r18
     210:	85 bb       	out	0x15, r24	; 21
     212:	08 95       	ret
     214:	41 30       	cpi	r20, 0x01	; 1
     216:	59 f4       	brne	.+22     	; 0x22e <DIO_vidWritePin+0xc2>
     218:	22 b3       	in	r18, 0x12	; 18
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_vidWritePin+0xb8>
     220:	88 0f       	add	r24, r24
     222:	99 1f       	adc	r25, r25
     224:	6a 95       	dec	r22
     226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_vidWritePin+0xb4>
     228:	82 2b       	or	r24, r18
     22a:	82 bb       	out	0x12, r24	; 18
     22c:	08 95       	ret
     22e:	22 b3       	in	r18, 0x12	; 18
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vidWritePin+0xce>
     236:	88 0f       	add	r24, r24
     238:	99 1f       	adc	r25, r25
     23a:	6a 95       	dec	r22
     23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vidWritePin+0xca>
     23e:	80 95       	com	r24
     240:	82 23       	and	r24, r18
     242:	82 bb       	out	0x12, r24	; 18
     244:	08 95       	ret

00000246 <DIO_enuReadPin>:
     246:	81 30       	cpi	r24, 0x01	; 1
     248:	e1 f0       	breq	.+56     	; 0x282 <DIO_enuReadPin+0x3c>
     24a:	30 f0       	brcs	.+12     	; 0x258 <DIO_enuReadPin+0x12>
     24c:	82 30       	cpi	r24, 0x02	; 2
     24e:	71 f1       	breq	.+92     	; 0x2ac <DIO_enuReadPin+0x66>
     250:	83 30       	cpi	r24, 0x03	; 3
     252:	09 f4       	brne	.+2      	; 0x256 <DIO_enuReadPin+0x10>
     254:	40 c0       	rjmp	.+128    	; 0x2d6 <DIO_enuReadPin+0x90>
     256:	53 c0       	rjmp	.+166    	; 0x2fe <DIO_enuReadPin+0xb8>
     258:	49 b3       	in	r20, 0x19	; 25
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	9c 01       	movw	r18, r24
     260:	06 2e       	mov	r0, r22
     262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_enuReadPin+0x22>
     264:	22 0f       	add	r18, r18
     266:	33 1f       	adc	r19, r19
     268:	0a 94       	dec	r0
     26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_enuReadPin+0x1e>
     26c:	84 2f       	mov	r24, r20
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	82 23       	and	r24, r18
     272:	93 23       	and	r25, r19
     274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_enuReadPin+0x34>
     276:	95 95       	asr	r25
     278:	87 95       	ror	r24
     27a:	6a 95       	dec	r22
     27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_enuReadPin+0x30>
     27e:	98 2f       	mov	r25, r24
     280:	3e c0       	rjmp	.+124    	; 0x2fe <DIO_enuReadPin+0xb8>
     282:	46 b3       	in	r20, 0x16	; 22
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	9c 01       	movw	r18, r24
     28a:	06 2e       	mov	r0, r22
     28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_enuReadPin+0x4c>
     28e:	22 0f       	add	r18, r18
     290:	33 1f       	adc	r19, r19
     292:	0a 94       	dec	r0
     294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_enuReadPin+0x48>
     296:	84 2f       	mov	r24, r20
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	82 23       	and	r24, r18
     29c:	93 23       	and	r25, r19
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_enuReadPin+0x5e>
     2a0:	95 95       	asr	r25
     2a2:	87 95       	ror	r24
     2a4:	6a 95       	dec	r22
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_enuReadPin+0x5a>
     2a8:	98 2f       	mov	r25, r24
     2aa:	29 c0       	rjmp	.+82     	; 0x2fe <DIO_enuReadPin+0xb8>
     2ac:	43 b3       	in	r20, 0x13	; 19
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	9c 01       	movw	r18, r24
     2b4:	06 2e       	mov	r0, r22
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_enuReadPin+0x76>
     2b8:	22 0f       	add	r18, r18
     2ba:	33 1f       	adc	r19, r19
     2bc:	0a 94       	dec	r0
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_enuReadPin+0x72>
     2c0:	84 2f       	mov	r24, r20
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	82 23       	and	r24, r18
     2c6:	93 23       	and	r25, r19
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_enuReadPin+0x88>
     2ca:	95 95       	asr	r25
     2cc:	87 95       	ror	r24
     2ce:	6a 95       	dec	r22
     2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_enuReadPin+0x84>
     2d2:	98 2f       	mov	r25, r24
     2d4:	14 c0       	rjmp	.+40     	; 0x2fe <DIO_enuReadPin+0xb8>
     2d6:	40 b3       	in	r20, 0x10	; 16
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	9c 01       	movw	r18, r24
     2de:	06 2e       	mov	r0, r22
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_enuReadPin+0xa0>
     2e2:	22 0f       	add	r18, r18
     2e4:	33 1f       	adc	r19, r19
     2e6:	0a 94       	dec	r0
     2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_enuReadPin+0x9c>
     2ea:	84 2f       	mov	r24, r20
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	82 23       	and	r24, r18
     2f0:	93 23       	and	r25, r19
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_enuReadPin+0xb2>
     2f4:	95 95       	asr	r25
     2f6:	87 95       	ror	r24
     2f8:	6a 95       	dec	r22
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_enuReadPin+0xae>
     2fc:	98 2f       	mov	r25, r24
     2fe:	89 2f       	mov	r24, r25
     300:	08 95       	ret

00000302 <DIO_vidSetLowNibbleMode>:
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	18 2f       	mov	r17, r24
     30a:	d6 2f       	mov	r29, r22
     30c:	c0 e0       	ldi	r28, 0x00	; 0
     30e:	06 c0       	rjmp	.+12     	; 0x31c <DIO_vidSetLowNibbleMode+0x1a>
     310:	4d 2f       	mov	r20, r29
     312:	6c 2f       	mov	r22, r28
     314:	81 2f       	mov	r24, r17
     316:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
     31a:	cf 5f       	subi	r28, 0xFF	; 255
     31c:	c4 30       	cpi	r28, 0x04	; 4
     31e:	c0 f3       	brcs	.-16     	; 0x310 <DIO_vidSetLowNibbleMode+0xe>
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	1f 91       	pop	r17
     326:	08 95       	ret

00000328 <DIO_vidWriteLowNibble>:
     328:	6f 70       	andi	r22, 0x0F	; 15
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	69 f0       	breq	.+26     	; 0x348 <DIO_vidWriteLowNibble+0x20>
     32e:	28 f0       	brcs	.+10     	; 0x33a <DIO_vidWriteLowNibble+0x12>
     330:	82 30       	cpi	r24, 0x02	; 2
     332:	89 f0       	breq	.+34     	; 0x356 <DIO_vidWriteLowNibble+0x2e>
     334:	83 30       	cpi	r24, 0x03	; 3
     336:	b1 f0       	breq	.+44     	; 0x364 <DIO_vidWriteLowNibble+0x3c>
     338:	08 95       	ret
     33a:	8b b3       	in	r24, 0x1b	; 27
     33c:	80 7f       	andi	r24, 0xF0	; 240
     33e:	8b bb       	out	0x1b, r24	; 27
     340:	8b b3       	in	r24, 0x1b	; 27
     342:	68 2b       	or	r22, r24
     344:	6b bb       	out	0x1b, r22	; 27
     346:	08 95       	ret
     348:	88 b3       	in	r24, 0x18	; 24
     34a:	80 7f       	andi	r24, 0xF0	; 240
     34c:	88 bb       	out	0x18, r24	; 24
     34e:	88 b3       	in	r24, 0x18	; 24
     350:	68 2b       	or	r22, r24
     352:	68 bb       	out	0x18, r22	; 24
     354:	08 95       	ret
     356:	85 b3       	in	r24, 0x15	; 21
     358:	80 7f       	andi	r24, 0xF0	; 240
     35a:	85 bb       	out	0x15, r24	; 21
     35c:	85 b3       	in	r24, 0x15	; 21
     35e:	68 2b       	or	r22, r24
     360:	65 bb       	out	0x15, r22	; 21
     362:	08 95       	ret
     364:	82 b3       	in	r24, 0x12	; 18
     366:	80 7f       	andi	r24, 0xF0	; 240
     368:	82 bb       	out	0x12, r24	; 18
     36a:	82 b3       	in	r24, 0x12	; 18
     36c:	68 2b       	or	r22, r24
     36e:	62 bb       	out	0x12, r22	; 18
     370:	08 95       	ret

00000372 <DIO_vidSetHighNibbleMode>:
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	18 2f       	mov	r17, r24
     37a:	d6 2f       	mov	r29, r22
     37c:	c4 e0       	ldi	r28, 0x04	; 4
     37e:	06 c0       	rjmp	.+12     	; 0x38c <DIO_vidSetHighNibbleMode+0x1a>
     380:	4d 2f       	mov	r20, r29
     382:	6c 2f       	mov	r22, r28
     384:	81 2f       	mov	r24, r17
     386:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
     38a:	cf 5f       	subi	r28, 0xFF	; 255
     38c:	c8 30       	cpi	r28, 0x08	; 8
     38e:	c0 f3       	brcs	.-16     	; 0x380 <DIO_vidSetHighNibbleMode+0xe>
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	08 95       	ret

00000398 <DIO_vidWriteHighNibble>:
     398:	60 7f       	andi	r22, 0xF0	; 240
     39a:	81 30       	cpi	r24, 0x01	; 1
     39c:	69 f0       	breq	.+26     	; 0x3b8 <DIO_vidWriteHighNibble+0x20>
     39e:	28 f0       	brcs	.+10     	; 0x3aa <DIO_vidWriteHighNibble+0x12>
     3a0:	82 30       	cpi	r24, 0x02	; 2
     3a2:	89 f0       	breq	.+34     	; 0x3c6 <DIO_vidWriteHighNibble+0x2e>
     3a4:	83 30       	cpi	r24, 0x03	; 3
     3a6:	b1 f0       	breq	.+44     	; 0x3d4 <DIO_vidWriteHighNibble+0x3c>
     3a8:	08 95       	ret
     3aa:	8b b3       	in	r24, 0x1b	; 27
     3ac:	8f 70       	andi	r24, 0x0F	; 15
     3ae:	8b bb       	out	0x1b, r24	; 27
     3b0:	8b b3       	in	r24, 0x1b	; 27
     3b2:	68 2b       	or	r22, r24
     3b4:	6b bb       	out	0x1b, r22	; 27
     3b6:	08 95       	ret
     3b8:	88 b3       	in	r24, 0x18	; 24
     3ba:	8f 70       	andi	r24, 0x0F	; 15
     3bc:	88 bb       	out	0x18, r24	; 24
     3be:	88 b3       	in	r24, 0x18	; 24
     3c0:	68 2b       	or	r22, r24
     3c2:	68 bb       	out	0x18, r22	; 24
     3c4:	08 95       	ret
     3c6:	85 b3       	in	r24, 0x15	; 21
     3c8:	8f 70       	andi	r24, 0x0F	; 15
     3ca:	85 bb       	out	0x15, r24	; 21
     3cc:	85 b3       	in	r24, 0x15	; 21
     3ce:	68 2b       	or	r22, r24
     3d0:	65 bb       	out	0x15, r22	; 21
     3d2:	08 95       	ret
     3d4:	82 b3       	in	r24, 0x12	; 18
     3d6:	8f 70       	andi	r24, 0x0F	; 15
     3d8:	82 bb       	out	0x12, r24	; 18
     3da:	82 b3       	in	r24, 0x12	; 18
     3dc:	68 2b       	or	r22, r24
     3de:	62 bb       	out	0x12, r22	; 18
     3e0:	08 95       	ret

000003e2 <EEPROM_vidWrite>:
     3e2:	8e bb       	out	0x1e, r24	; 30
     3e4:	9f bb       	out	0x1f, r25	; 31
     3e6:	6d bb       	out	0x1d, r22	; 29
     3e8:	84 e0       	ldi	r24, 0x04	; 4
     3ea:	8c bb       	out	0x1c, r24	; 28
     3ec:	8c b3       	in	r24, 0x1c	; 28
     3ee:	82 60       	ori	r24, 0x02	; 2
     3f0:	8c bb       	out	0x1c, r24	; 28
     3f2:	e1 99       	sbic	0x1c, 1	; 28
     3f4:	fe cf       	rjmp	.-4      	; 0x3f2 <EEPROM_vidWrite+0x10>
     3f6:	08 95       	ret

000003f8 <EEPROM_u8Read>:
     3f8:	8e bb       	out	0x1e, r24	; 30
     3fa:	9f bb       	out	0x1f, r25	; 31
     3fc:	8c b3       	in	r24, 0x1c	; 28
     3fe:	81 60       	ori	r24, 0x01	; 1
     400:	8c bb       	out	0x1c, r24	; 28
     402:	8d b3       	in	r24, 0x1d	; 29
     404:	08 95       	ret

00000406 <KPD_vidInit>:
#include "KPD_private.h"
#include "KPD_config.h"


void KPD_vidInit(_enuGPIOx enuPortNum, _enuNIBBLEx enuInputNibble)
{
     406:	cf 93       	push	r28
     408:	c8 2f       	mov	r28, r24
    if(enuInputNibble == LOW_NIBBLE)
     40a:	61 11       	cpse	r22, r1
     40c:	0b c0       	rjmp	.+22     	; 0x424 <KPD_vidInit+0x1e>
    {
        DIO_vidSetLowNibbleMode(enuPortNum, INPUT); // Set Column Input
     40e:	0e 94 81 01 	call	0x302	; 0x302 <DIO_vidSetLowNibbleMode>
        DIO_vidSetHighNibbleMode(enuPortNum, OUTPUT); // Set ROW as Output
     412:	61 e0       	ldi	r22, 0x01	; 1
     414:	8c 2f       	mov	r24, r28
     416:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_vidSetHighNibbleMode>
        DIO_vidWriteLowNibble(enuPortNum, 0x0F); // Enable Internal Pull Up
     41a:	6f e0       	ldi	r22, 0x0F	; 15
     41c:	8c 2f       	mov	r24, r28
     41e:	0e 94 94 01 	call	0x328	; 0x328 <DIO_vidWriteLowNibble>
     422:	0b c0       	rjmp	.+22     	; 0x43a <KPD_vidInit+0x34>
    }
    else
    {
        DIO_vidSetHighNibbleMode(enuPortNum, INPUT); // Set Column Input
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_vidSetHighNibbleMode>
        DIO_vidSetLowNibbleMode(enuPortNum, OUTPUT); // Set ROW as Output
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	8c 2f       	mov	r24, r28
     42e:	0e 94 81 01 	call	0x302	; 0x302 <DIO_vidSetLowNibbleMode>
        DIO_vidWriteHighNibble(enuPortNum, 0xF0); // Enable Internal Pull Up
     432:	60 ef       	ldi	r22, 0xF0	; 240
     434:	8c 2f       	mov	r24, r28
     436:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_vidWriteHighNibble>
    }
}
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(_enuGPIOx enuPortNum, _enuNIBBLEx enuInputNibble)
{
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	60 97       	sbiw	r28, 0x10	; 16
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
     45a:	f8 2e       	mov	r15, r24
    u8 KeysArr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     45c:	80 e1       	ldi	r24, 0x10	; 16
     45e:	e0 e6       	ldi	r30, 0x60	; 96
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	de 01       	movw	r26, r28
     464:	11 96       	adiw	r26, 0x01	; 1
     466:	01 90       	ld	r0, Z+
     468:	0d 92       	st	X+, r0
     46a:	8a 95       	dec	r24
     46c:	e1 f7       	brne	.-8      	; 0x466 <KPD_u8GetPressedKey+0x28>
    u8 u8Rows;
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
    if(enuInputNibble == LOW_NIBBLE)
     46e:	66 23       	and	r22, r22
     470:	61 f1       	breq	.+88     	; 0x4ca <KPD_u8GetPressedKey+0x8c>
     472:	e1 2c       	mov	r14, r1
     474:	59 c0       	rjmp	.+178    	; 0x528 <KPD_u8GetPressedKey+0xea>
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteHighNibble(enuPortNum, 0xF0);
     476:	60 ef       	ldi	r22, 0xF0	; 240
     478:	8f 2d       	mov	r24, r15
     47a:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_vidWriteHighNibble>
            DIO_vidWritePin(enuPortNum, (u8Rows+4), LOW);
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	64 e0       	ldi	r22, 0x04	; 4
     482:	6e 0d       	add	r22, r14
     484:	8f 2d       	mov	r24, r15
     486:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidWritePin>
            for(u8Column = 0; u8Column <= 3; u8Column++)
     48a:	00 e0       	ldi	r16, 0x00	; 0
     48c:	08 c0       	rjmp	.+16     	; 0x49e <KPD_u8GetPressedKey+0x60>
            {
                enuReadValue = DIO_enuReadPin(enuPortNum, u8Column);
     48e:	60 2f       	mov	r22, r16
     490:	8f 2d       	mov	r24, r15
     492:	0e 94 23 01 	call	0x246	; 0x246 <DIO_enuReadPin>
     496:	18 2f       	mov	r17, r24
                if(LOW == enuReadValue)
     498:	88 23       	and	r24, r24
     49a:	19 f0       	breq	.+6      	; 0x4a2 <KPD_u8GetPressedKey+0x64>
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteHighNibble(enuPortNum, 0xF0);
            DIO_vidWritePin(enuPortNum, (u8Rows+4), LOW);
            for(u8Column = 0; u8Column <= 3; u8Column++)
     49c:	0f 5f       	subi	r16, 0xFF	; 255
     49e:	04 30       	cpi	r16, 0x04	; 4
     4a0:	b0 f3       	brcs	.-20     	; 0x48e <KPD_u8GetPressedKey+0x50>
                }
                else
                {
                }
            }
            if (LOW == enuReadValue)
     4a2:	11 11       	cpse	r17, r1
     4a4:	10 c0       	rjmp	.+32     	; 0x4c6 <KPD_u8GetPressedKey+0x88>
            {
                u8ReturnedValue = KeysArr[u8Rows][u8Column];
     4a6:	ee 2d       	mov	r30, r14
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	ee 0f       	add	r30, r30
     4ac:	ff 1f       	adc	r31, r31
     4ae:	ee 0f       	add	r30, r30
     4b0:	ff 1f       	adc	r31, r31
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	8c 0f       	add	r24, r28
     4b8:	9d 1f       	adc	r25, r29
     4ba:	e8 0f       	add	r30, r24
     4bc:	f9 1f       	adc	r31, r25
     4be:	e0 0f       	add	r30, r16
     4c0:	f1 1d       	adc	r31, r1
     4c2:	80 81       	ld	r24, Z
                break;
     4c4:	35 c0       	rjmp	.+106    	; 0x530 <KPD_u8GetPressedKey+0xf2>
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
    if(enuInputNibble == LOW_NIBBLE)
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
     4c6:	e3 94       	inc	r14
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <KPD_u8GetPressedKey+0x8e>
     4ca:	e1 2c       	mov	r14, r1
     4cc:	93 e0       	ldi	r25, 0x03	; 3
     4ce:	9e 15       	cp	r25, r14
     4d0:	90 f6       	brcc	.-92     	; 0x476 <KPD_u8GetPressedKey+0x38>
{
    u8 KeysArr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
    u8 u8Rows;
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
     4d2:	8f ef       	ldi	r24, 0xFF	; 255
     4d4:	2d c0       	rjmp	.+90     	; 0x530 <KPD_u8GetPressedKey+0xf2>
    }
    else
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteLowNibble(enuPortNum, 0x0F);
     4d6:	6f e0       	ldi	r22, 0x0F	; 15
     4d8:	8f 2d       	mov	r24, r15
     4da:	0e 94 94 01 	call	0x328	; 0x328 <DIO_vidWriteLowNibble>
            DIO_vidWritePin(enuPortNum, (u8Rows), LOW);
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	6e 2d       	mov	r22, r14
     4e2:	8f 2d       	mov	r24, r15
     4e4:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidWritePin>
            for(u8Column = 0; u8Column <= 3; u8Column++)
     4e8:	00 e0       	ldi	r16, 0x00	; 0
     4ea:	09 c0       	rjmp	.+18     	; 0x4fe <KPD_u8GetPressedKey+0xc0>
            {
                enuReadValue = DIO_enuReadPin(enuPortNum, (u8Column+4));
     4ec:	64 e0       	ldi	r22, 0x04	; 4
     4ee:	60 0f       	add	r22, r16
     4f0:	8f 2d       	mov	r24, r15
     4f2:	0e 94 23 01 	call	0x246	; 0x246 <DIO_enuReadPin>
     4f6:	18 2f       	mov	r17, r24
                if(LOW == enuReadValue)
     4f8:	88 23       	and	r24, r24
     4fa:	19 f0       	breq	.+6      	; 0x502 <KPD_u8GetPressedKey+0xc4>
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteLowNibble(enuPortNum, 0x0F);
            DIO_vidWritePin(enuPortNum, (u8Rows), LOW);
            for(u8Column = 0; u8Column <= 3; u8Column++)
     4fc:	0f 5f       	subi	r16, 0xFF	; 255
     4fe:	04 30       	cpi	r16, 0x04	; 4
     500:	a8 f3       	brcs	.-22     	; 0x4ec <KPD_u8GetPressedKey+0xae>
                }
                else
                {
                }
            }
            if (LOW == enuReadValue)
     502:	11 11       	cpse	r17, r1
     504:	10 c0       	rjmp	.+32     	; 0x526 <KPD_u8GetPressedKey+0xe8>
            {
                u8ReturnedValue = KeysArr[u8Rows][u8Column];
     506:	ee 2d       	mov	r30, r14
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	ee 0f       	add	r30, r30
     50c:	ff 1f       	adc	r31, r31
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	8c 0f       	add	r24, r28
     518:	9d 1f       	adc	r25, r29
     51a:	e8 0f       	add	r30, r24
     51c:	f9 1f       	adc	r31, r25
     51e:	e0 0f       	add	r30, r16
     520:	f1 1d       	adc	r31, r1
     522:	80 81       	ld	r24, Z
                break;
     524:	05 c0       	rjmp	.+10     	; 0x530 <KPD_u8GetPressedKey+0xf2>
            }
        }
    }
    else
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
     526:	e3 94       	inc	r14
     528:	93 e0       	ldi	r25, 0x03	; 3
     52a:	9e 15       	cp	r25, r14
     52c:	a0 f6       	brcc	.-88     	; 0x4d6 <KPD_u8GetPressedKey+0x98>
{
    u8 KeysArr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
    u8 u8Rows;
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
     52e:	8f ef       	ldi	r24, 0xFF	; 255
            {
            }
        }
    }
    return u8ReturnedValue;
     530:	60 96       	adiw	r28, 0x10	; 16
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	08 95       	ret

0000054a <LCD_vidSendEnablePulse>:
    #endif
}

static void LCD_vidSendEnablePulse(void)
{
    DIO_vidWritePin(LCD_EN_PORT, LCD_EN_PIN, HIGH);
     54a:	41 e0       	ldi	r20, 0x01	; 1
     54c:	63 e0       	ldi	r22, 0x03	; 3
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidWritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     554:	8f e9       	ldi	r24, 0x9F	; 159
     556:	9f e0       	ldi	r25, 0x0F	; 15
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <LCD_vidSendEnablePulse+0xe>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <LCD_vidSendEnablePulse+0x14>
     55e:	00 00       	nop
    _delay_ms(2);
    DIO_vidWritePin(LCD_EN_PORT, LCD_EN_PIN, LOW);
     560:	40 e0       	ldi	r20, 0x00	; 0
     562:	63 e0       	ldi	r22, 0x03	; 3
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidWritePin>
     56a:	08 95       	ret

0000056c <LCD_vidSendCmd>:
    _delay_ms(10);
    LCD_vidSendCmd(LCD_ENTRY_MODE);
}

static void LCD_vidSendCmd(u8 u8Cmd)
{
     56c:	cf 93       	push	r28
     56e:	c8 2f       	mov	r28, r24
    DIO_vidWritePin(LCD_RW_PORT, LCD_RW_PIN, LOW); // Set Write Operation
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	62 e0       	ldi	r22, 0x02	; 2
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidWritePin>
    DIO_vidWritePin(LCD_RS_PORT, LCD_RS_PIN, LOW); // Select Command Register
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidWritePin>
            LCD_vidSendEnablePulse();
			_delay_ms(2);
            DIO_vidWriteLowNibble(LCD_DATA_PORT, (u8Cmd));
            LCD_vidSendEnablePulse();
        #else
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Cmd));
     584:	6c 2f       	mov	r22, r28
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
     58c:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_vidSendEnablePulse>
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Cmd<<4));
     590:	6c 2f       	mov	r22, r28
     592:	62 95       	swap	r22
     594:	60 7f       	andi	r22, 0xF0	; 240
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
     59c:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_vidSendEnablePulse>
        #endif
    #endif
}
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <LCD_vidInit>:
     5a4:	2f ef       	ldi	r18, 0xFF	; 255
     5a6:	81 ee       	ldi	r24, 0xE1	; 225
     5a8:	94 e0       	ldi	r25, 0x04	; 4
     5aa:	21 50       	subi	r18, 0x01	; 1
     5ac:	80 40       	sbci	r24, 0x00	; 0
     5ae:	90 40       	sbci	r25, 0x00	; 0
     5b0:	e1 f7       	brne	.-8      	; 0x5aa <LCD_vidInit+0x6>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <LCD_vidInit+0x10>
     5b4:	00 00       	nop
#include "util/delay.h"

void LCD_vidInit(void)
{
    _delay_ms(200);
    DIO_vidSetPinMode(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
     5b6:	41 e0       	ldi	r20, 0x01	; 1
     5b8:	61 e0       	ldi	r22, 0x01	; 1
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
    DIO_vidSetPinMode(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
     5c0:	41 e0       	ldi	r20, 0x01	; 1
     5c2:	62 e0       	ldi	r22, 0x02	; 2
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
    DIO_vidSetPinMode(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
     5ca:	41 e0       	ldi	r20, 0x01	; 1
     5cc:	63 e0       	ldi	r22, 0x03	; 3
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidSetPinMode>
        _delay_ms(1);
    #else
        #if  NIBBLE_MODE  == LOW_NIBBLE
            DIO_vidSetLowNibbleMode(LCD_DATA_PORT, OUTPUT);
        #else
            DIO_vidSetHighNibbleMode(LCD_DATA_PORT, OUTPUT);
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_vidSetHighNibbleMode>
        #endif 
       LCD_vidSendCmd(LCD_RETURN_HOME);
     5dc:	82 e0       	ldi	r24, 0x02	; 2
     5de:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_vidSendCmd>
     5e2:	8f e2       	ldi	r24, 0x2F	; 47
     5e4:	95 e7       	ldi	r25, 0x75	; 117
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <LCD_vidInit+0x42>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCD_vidInit+0x48>
     5ec:	00 00       	nop
        _delay_ms(15);
		LCD_vidSendCmd(LCD_FUNCTION_4BIT_2LINES);
     5ee:	88 e2       	ldi	r24, 0x28	; 40
     5f0:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_vidSendCmd>
     5f4:	8f ec       	ldi	r24, 0xCF	; 207
     5f6:	97 e0       	ldi	r25, 0x07	; 7
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_vidInit+0x54>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <LCD_vidInit+0x5a>
     5fe:	00 00       	nop
        _delay_ms(1);
        
    #endif
    LCD_vidSendCmd(LCD_DISP_ON_CURSOR_ON);
     600:	8e e0       	ldi	r24, 0x0E	; 14
     602:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_vidSendCmd>
     606:	8f ec       	ldi	r24, 0xCF	; 207
     608:	97 e0       	ldi	r25, 0x07	; 7
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <LCD_vidInit+0x66>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <LCD_vidInit+0x6c>
     610:	00 00       	nop
    _delay_ms(1);
    LCD_vidSendCmd(LCD_CLEAR_SCREEN);
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_vidSendCmd>
     618:	8f e1       	ldi	r24, 0x1F	; 31
     61a:	9e e4       	ldi	r25, 0x4E	; 78
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <LCD_vidInit+0x78>
     620:	00 c0       	rjmp	.+0      	; 0x622 <LCD_vidInit+0x7e>
     622:	00 00       	nop
    _delay_ms(10);
    LCD_vidSendCmd(LCD_ENTRY_MODE);
     624:	86 e0       	ldi	r24, 0x06	; 6
     626:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_vidSendCmd>
     62a:	08 95       	ret

0000062c <LCD_vidDisplayCharacter>:
    _delay_ms(2);
    DIO_vidWritePin(LCD_EN_PORT, LCD_EN_PIN, LOW);
}

void LCD_vidDisplayCharacter(u8 u8Char)
{
     62c:	cf 93       	push	r28
     62e:	c8 2f       	mov	r28, r24
    DIO_vidWritePin(LCD_RW_PORT, LCD_RW_PIN, LOW); // Set Write Operation
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	62 e0       	ldi	r22, 0x02	; 2
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidWritePin>
    DIO_vidWritePin(LCD_RS_PORT, LCD_RS_PIN, HIGH); // Select Data Register
     63a:	41 e0       	ldi	r20, 0x01	; 1
     63c:	61 e0       	ldi	r22, 0x01	; 1
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_vidWritePin>
            DIO_vidWriteLowNibble(LCD_DATA_PORT, (u8Char>>4));
            LCD_vidSendEnablePulse();
            DIO_vidWriteLowNibble(LCD_DATA_PORT, (u8Char));
            LCD_vidSendEnablePulse();
        #else
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Char));
     644:	6c 2f       	mov	r22, r28
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
     64c:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_vidSendEnablePulse>
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Char<<4));
     650:	6c 2f       	mov	r22, r28
     652:	62 95       	swap	r22
     654:	60 7f       	andi	r22, 0xF0	; 240
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
     65c:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_vidSendEnablePulse>
        #endif
    #endif
}
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <LCD_vidDisplayString>:

void LCD_vidDisplayString(u8 *u8PtrString)
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	ec 01       	movw	r28, r24
    while(*u8PtrString != '\0')
     66a:	03 c0       	rjmp	.+6      	; 0x672 <LCD_vidDisplayString+0xe>
    {
        LCD_vidDisplayCharacter(*u8PtrString);
     66c:	0e 94 16 03 	call	0x62c	; 0x62c <LCD_vidDisplayCharacter>
        u8PtrString++;
     670:	21 96       	adiw	r28, 0x01	; 1
    #endif
}

void LCD_vidDisplayString(u8 *u8PtrString)
{
    while(*u8PtrString != '\0')
     672:	88 81       	ld	r24, Y
     674:	81 11       	cpse	r24, r1
     676:	fa cf       	rjmp	.-12     	; 0x66c <LCD_vidDisplayString+0x8>
    {
        LCD_vidDisplayCharacter(*u8PtrString);
        u8PtrString++;
    }
}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <LCD_vidDisplayNumber>:

void LCD_vidDisplayNumber(u32 u32Number)
{
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	27 97       	sbiw	r28, 0x07	; 7
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
	u8 u8arr[7];
	sprintf(u8arr, "%d", u32Number);
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	7f 93       	push	r23
     69c:	6f 93       	push	r22
     69e:	80 e7       	ldi	r24, 0x70	; 112
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	9f 93       	push	r25
     6a4:	8f 93       	push	r24
     6a6:	8e 01       	movw	r16, r28
     6a8:	0f 5f       	subi	r16, 0xFF	; 255
     6aa:	1f 4f       	sbci	r17, 0xFF	; 255
     6ac:	1f 93       	push	r17
     6ae:	0f 93       	push	r16
     6b0:	0e 94 75 05 	call	0xaea	; 0xaea <sprintf>
	LCD_vidDisplayString(u8arr);
     6b4:	c8 01       	movw	r24, r16
     6b6:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
}
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	27 96       	adiw	r28, 0x07	; 7
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	08 95       	ret

000006da <LCD_vidClearScreen>:

void LCD_vidClearScreen(void)
{
	LCD_vidSendCmd(LCD_CLEAR_SCREEN);
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_vidSendCmd>
     6e0:	8f e1       	ldi	r24, 0x1F	; 31
     6e2:	9e e4       	ldi	r25, 0x4E	; 78
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	f1 f7       	brne	.-4      	; 0x6e4 <LCD_vidClearScreen+0xa>
     6e8:	00 c0       	rjmp	.+0      	; 0x6ea <LCD_vidClearScreen+0x10>
     6ea:	00 00       	nop
     6ec:	08 95       	ret

000006ee <LCD_vidMoveCursor>:
	_delay_ms(10);
}
void LCD_vidMoveCursor(u8 u8Line, u8 u8Position)
{
	u8 u8PositionCmd;
	if(u8Line == 1)
     6ee:	81 30       	cpi	r24, 0x01	; 1
     6f0:	19 f4       	brne	.+6      	; 0x6f8 <LCD_vidMoveCursor+0xa>
	{
		u8PositionCmd = 0x80 + (u8Position-1);
     6f2:	8f e7       	ldi	r24, 0x7F	; 127
     6f4:	86 0f       	add	r24, r22
     6f6:	0c c0       	rjmp	.+24     	; 0x710 <LCD_vidMoveCursor+0x22>
	}
	else if(u8Line == 2)
     6f8:	82 30       	cpi	r24, 0x02	; 2
     6fa:	19 f4       	brne	.+6      	; 0x702 <LCD_vidMoveCursor+0x14>
	{
		u8PositionCmd = 0xC0 + (u8Position-1);	
     6fc:	8f eb       	ldi	r24, 0xBF	; 191
     6fe:	86 0f       	add	r24, r22
     700:	07 c0       	rjmp	.+14     	; 0x710 <LCD_vidMoveCursor+0x22>
	}
	else if(u8Line == 3)
     702:	83 30       	cpi	r24, 0x03	; 3
     704:	19 f4       	brne	.+6      	; 0x70c <LCD_vidMoveCursor+0x1e>
	{
		u8PositionCmd = 0x90 + (u8Position-1);	
     706:	8f e8       	ldi	r24, 0x8F	; 143
     708:	86 0f       	add	r24, r22
     70a:	02 c0       	rjmp	.+4      	; 0x710 <LCD_vidMoveCursor+0x22>
	}
	else 
	{
		u8PositionCmd = 0xD0 + (u8Position-1);
     70c:	8f ec       	ldi	r24, 0xCF	; 207
     70e:	86 0f       	add	r24, r22
	}
	LCD_vidSendCmd(u8PositionCmd);
     710:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_vidSendCmd>
     714:	08 95       	ret

00000716 <main>:

//#define F_CPU 8000000UL

int main(void)
{
	LCD_vidInit();											// initialize LCD
     716:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <LCD_vidInit>
	KPD_vidInit(GPIOC, HIGH_NIBBLE);						// initialize KPD 
     71a:	61 e0       	ldi	r22, 0x01	; 1
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	0e 94 03 02 	call	0x406	; 0x406 <KPD_vidInit>
	LCD_vidMoveCursor(1,5);
     722:	65 e0       	ldi	r22, 0x05	; 5
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_vidMoveCursor>
	LCD_vidDisplayString("Welcome");						// display message on screen
     72a:	8f e7       	ldi	r24, 0x7F	; 127
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,2);
     732:	62 e0       	ldi	r22, 0x02	; 2
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_vidMoveCursor>
	LCD_vidDisplayString("to my home");						// display message on screen
     73a:	87 e8       	ldi	r24, 0x87	; 135
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
     742:	2f e3       	ldi	r18, 0x3F	; 63
     744:	8d e0       	ldi	r24, 0x0D	; 13
     746:	93 e0       	ldi	r25, 0x03	; 3
     748:	21 50       	subi	r18, 0x01	; 1
     74a:	80 40       	sbci	r24, 0x00	; 0
     74c:	90 40       	sbci	r25, 0x00	; 0
     74e:	e1 f7       	brne	.-8      	; 0x748 <main+0x32>
     750:	00 c0       	rjmp	.+0      	; 0x752 <main+0x3c>
     752:	00 00       	nop
	_delay_ms(1000);											// delay 250m second
	LCD_vidClearScreen();									// clear LCD screen
     754:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_vidClearScreen>
	start();												// sett pass if not set or read pass if already set 
     758:	0e 94 79 04 	call	0x8f2	; 0x8f2 <start>
    while (1) 
    {
		u8 wrong_pass_count = smart_lock();					// if pass wrong and exceed tries safe go on lock mode
     75c:	0e 94 60 05 	call	0xac0	; 0xac0 <smart_lock>
		if (wrong_pass_count == 0 || wrong_pass_count == 3)	// if wrong_pass_count equal to (0 when pass correct) or (3 when user exceed number of tries)
     760:	88 23       	and	r24, r24
     762:	11 f0       	breq	.+4      	; 0x768 <main+0x52>
     764:	83 30       	cpi	r24, 0x03	; 3
     766:	d1 f7       	brne	.-12     	; 0x75c <main+0x46>
		{
			break;											// stop the loop
		}
	}
}
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	08 95       	ret

0000076e <Scan_pass>:
u8 wrong_pass_count = 0;	// used to check tries remain 

	/* scan pass from user */
	/* void function take void and return void */
void Scan_pass()
{
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
	for (u8 i=0;i<4;i++)		// loop to take pass from user 
     772:	c0 e0       	ldi	r28, 0x00	; 0
     774:	2f c0       	rjmp	.+94     	; 0x7d4 <Scan_pass+0x66>
	{
		do						// loop to take value of pressed key working until key pressed
		{
			u8ReturnedValue = KPD_u8GetPressedKey(GPIOC, HIGH_NIBBLE);	// store value of pressed key in u8ReturnedValue
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	0e 94 1f 02 	call	0x43e	; 0x43e <KPD_u8GetPressedKey>
     77e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u8ReturnedValue>
     782:	2f ef       	ldi	r18, 0xFF	; 255
     784:	81 ee       	ldi	r24, 0xE1	; 225
     786:	94 e0       	ldi	r25, 0x04	; 4
     788:	21 50       	subi	r18, 0x01	; 1
     78a:	80 40       	sbci	r24, 0x00	; 0
     78c:	90 40       	sbci	r25, 0x00	; 0
     78e:	e1 f7       	brne	.-8      	; 0x788 <Scan_pass+0x1a>
     790:	00 c0       	rjmp	.+0      	; 0x792 <Scan_pass+0x24>
     792:	00 00       	nop
			_delay_ms(200);								// delay 200m second to can detect change
		} while (u8ReturnedValue == NOT_PRESSED);		// condition to break the loop
     794:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8ReturnedValue>
     798:	8f 3f       	cpi	r24, 0xFF	; 255
     79a:	69 f3       	breq	.-38     	; 0x776 <Scan_pass+0x8>
			LCD_vidDisplayCharacter(u8ReturnedValue);	// display pressed value on LCD
     79c:	0e 94 16 03 	call	0x62c	; 0x62c <LCD_vidDisplayCharacter>
     7a0:	2f e7       	ldi	r18, 0x7F	; 127
     7a2:	8a e1       	ldi	r24, 0x1A	; 26
     7a4:	96 e0       	ldi	r25, 0x06	; 6
     7a6:	21 50       	subi	r18, 0x01	; 1
     7a8:	80 40       	sbci	r24, 0x00	; 0
     7aa:	90 40       	sbci	r25, 0x00	; 0
     7ac:	e1 f7       	brne	.-8      	; 0x7a6 <Scan_pass+0x38>
     7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <Scan_pass+0x42>
     7b0:	00 00       	nop
			_delay_ms(250);								// delay 250m second for user see what number enter 
			LCD_vidMoveCursor(4, i+1);					// move LCD cursor to position of value entered 
     7b2:	d1 e0       	ldi	r29, 0x01	; 1
     7b4:	dc 0f       	add	r29, r28
     7b6:	6d 2f       	mov	r22, r29
     7b8:	84 e0       	ldi	r24, 0x04	; 4
     7ba:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_vidMoveCursor>
			LCD_vidDisplayCharacter('*');				// display symbol * instead of entered number 
     7be:	8a e2       	ldi	r24, 0x2A	; 42
     7c0:	0e 94 16 03 	call	0x62c	; 0x62c <LCD_vidDisplayCharacter>
			pass[i] = u8ReturnedValue;					// store value in array called pass
     7c4:	ec 2f       	mov	r30, r28
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	e8 5c       	subi	r30, 0xC8	; 200
     7ca:	fe 4f       	sbci	r31, 0xFE	; 254
     7cc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8ReturnedValue>
     7d0:	80 83       	st	Z, r24

	/* scan pass from user */
	/* void function take void and return void */
void Scan_pass()
{
	for (u8 i=0;i<4;i++)		// loop to take pass from user 
     7d2:	cd 2f       	mov	r28, r29
     7d4:	c4 30       	cpi	r28, 0x04	; 4
     7d6:	78 f2       	brcs	.-98     	; 0x776 <Scan_pass+0x8>
			_delay_ms(250);								// delay 250m second for user see what number enter 
			LCD_vidMoveCursor(4, i+1);					// move LCD cursor to position of value entered 
			LCD_vidDisplayCharacter('*');				// display symbol * instead of entered number 
			pass[i] = u8ReturnedValue;					// store value in array called pass
	}
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <Scan_user>:
	/* scan user from user */
	/* void function take void and return void */
	void Scan_user()
	{
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
		for (u8 i=0;i<8;i++)		// loop to take pass from user
     7e2:	c0 e0       	ldi	r28, 0x00	; 0
     7e4:	2f c0       	rjmp	.+94     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
		{
			do						// loop to take value of pressed key working until key pressed
			{
				u8ReturnedValue = KPD_u8GetPressedKey(GPIOC, HIGH_NIBBLE);	// store value of pressed key in u8ReturnedValue
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	0e 94 1f 02 	call	0x43e	; 0x43e <KPD_u8GetPressedKey>
     7ee:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u8ReturnedValue>
     7f2:	2f ef       	ldi	r18, 0xFF	; 255
     7f4:	81 ee       	ldi	r24, 0xE1	; 225
     7f6:	94 e0       	ldi	r25, 0x04	; 4
     7f8:	21 50       	subi	r18, 0x01	; 1
     7fa:	80 40       	sbci	r24, 0x00	; 0
     7fc:	90 40       	sbci	r25, 0x00	; 0
     7fe:	e1 f7       	brne	.-8      	; 0x7f8 <Scan_user+0x1a>
     800:	00 c0       	rjmp	.+0      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     802:	00 00       	nop
				_delay_ms(200);								// delay 200m second to can detect change
			} while (u8ReturnedValue == NOT_PRESSED);		// condition to break the loop
     804:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8ReturnedValue>
     808:	8f 3f       	cpi	r24, 0xFF	; 255
     80a:	69 f3       	breq	.-38     	; 0x7e6 <Scan_user+0x8>
			LCD_vidDisplayCharacter(u8ReturnedValue);	// display pressed value on LCD
     80c:	0e 94 16 03 	call	0x62c	; 0x62c <LCD_vidDisplayCharacter>
     810:	2f e7       	ldi	r18, 0x7F	; 127
     812:	8a e1       	ldi	r24, 0x1A	; 26
     814:	96 e0       	ldi	r25, 0x06	; 6
     816:	21 50       	subi	r18, 0x01	; 1
     818:	80 40       	sbci	r24, 0x00	; 0
     81a:	90 40       	sbci	r25, 0x00	; 0
     81c:	e1 f7       	brne	.-8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     820:	00 00       	nop
			_delay_ms(250);								// delay 250m second for user see what number enter
			LCD_vidMoveCursor(2, i+1);					// move LCD cursor to position of value entered
     822:	d1 e0       	ldi	r29, 0x01	; 1
     824:	dc 0f       	add	r29, r28
     826:	6d 2f       	mov	r22, r29
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_vidMoveCursor>
			LCD_vidDisplayCharacter('*');				// display symbol * instead of entered number
     82e:	8a e2       	ldi	r24, 0x2A	; 42
     830:	0e 94 16 03 	call	0x62c	; 0x62c <LCD_vidDisplayCharacter>
			user[i] = u8ReturnedValue;					// store value in array called pass
     834:	ec 2f       	mov	r30, r28
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	ec 5b       	subi	r30, 0xBC	; 188
     83a:	fe 4f       	sbci	r31, 0xFE	; 254
     83c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8ReturnedValue>
     840:	80 83       	st	Z, r24
}
	/* scan user from user */
	/* void function take void and return void */
	void Scan_user()
	{
		for (u8 i=0;i<8;i++)		// loop to take pass from user
     842:	cd 2f       	mov	r28, r29
     844:	c8 30       	cpi	r28, 0x08	; 8
     846:	78 f2       	brcs	.-98     	; 0x7e6 <Scan_user+0x8>
			_delay_ms(250);								// delay 250m second for user see what number enter
			LCD_vidMoveCursor(2, i+1);					// move LCD cursor to position of value entered
			LCD_vidDisplayCharacter('*');				// display symbol * instead of entered number
			user[i] = u8ReturnedValue;					// store value in array called pass
		}
	}
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <write_EEPROM>:
	/* write pass in EEPROM */
	/* void function take void and return void */
	
void write_EEPROM()
{
     84e:	cf 93       	push	r28
	for (u8 i=0;i<8;i++)								// loop to take write pass in EEPROM
     850:	c0 e0       	ldi	r28, 0x00	; 0
     852:	10 c0       	rjmp	.+32     	; 0x874 <__stack+0x15>
	{
		user[i]^=KEY;									// encrypt user entered before store in EEPROM by(XOR pass with KEY)
     854:	2c 2f       	mov	r18, r28
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	f9 01       	movw	r30, r18
     85a:	ec 5b       	subi	r30, 0xBC	; 188
     85c:	fe 4f       	sbci	r31, 0xFE	; 254
     85e:	60 81       	ld	r22, Z
     860:	9b ea       	ldi	r25, 0xAB	; 171
     862:	69 27       	eor	r22, r25
     864:	60 83       	st	Z, r22
		EEPROM_vidWrite(USER_address + i, user[i]);		// save user in EEPROM
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	c9 01       	movw	r24, r18
     86a:	80 5a       	subi	r24, 0xA0	; 160
     86c:	9f 4f       	sbci	r25, 0xFF	; 255
     86e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <EEPROM_vidWrite>
	/* write pass in EEPROM */
	/* void function take void and return void */
	
void write_EEPROM()
{
	for (u8 i=0;i<8;i++)								// loop to take write pass in EEPROM
     872:	cf 5f       	subi	r28, 0xFF	; 255
     874:	c8 30       	cpi	r28, 0x08	; 8
     876:	70 f3       	brcs	.-36     	; 0x854 <write_EEPROM+0x6>
     878:	c0 e0       	ldi	r28, 0x00	; 0
     87a:	0f c0       	rjmp	.+30     	; 0x89a <__stack+0x3b>
		user[i]^=KEY;									// encrypt user entered before store in EEPROM by(XOR pass with KEY)
		EEPROM_vidWrite(USER_address + i, user[i]);		// save user in EEPROM
	}
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM 
	{
		pass[i]^=KEY;									// encrypt pass entered before store in EEPROM by(XOR pass with KEY) 
     87c:	2c 2f       	mov	r18, r28
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	f9 01       	movw	r30, r18
     882:	e8 5c       	subi	r30, 0xC8	; 200
     884:	fe 4f       	sbci	r31, 0xFE	; 254
     886:	60 81       	ld	r22, Z
     888:	9b ea       	ldi	r25, 0xAB	; 171
     88a:	69 27       	eor	r22, r25
     88c:	60 83       	st	Z, r22
		EEPROM_vidWrite(PASS_address + i, pass[i]);		// save pass in EEPROM
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	c9 01       	movw	r24, r18
     892:	80 96       	adiw	r24, 0x20	; 32
     894:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <EEPROM_vidWrite>
	for (u8 i=0;i<8;i++)								// loop to take write pass in EEPROM
	{
		user[i]^=KEY;									// encrypt user entered before store in EEPROM by(XOR pass with KEY)
		EEPROM_vidWrite(USER_address + i, user[i]);		// save user in EEPROM
	}
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM 
     898:	cf 5f       	subi	r28, 0xFF	; 255
     89a:	c4 30       	cpi	r28, 0x04	; 4
     89c:	78 f3       	brcs	.-34     	; 0x87c <__stack+0x1d>
	{
		pass[i]^=KEY;									// encrypt pass entered before store in EEPROM by(XOR pass with KEY) 
		EEPROM_vidWrite(PASS_address + i, pass[i]);		// save pass in EEPROM
	}
}
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <read_EEPROM>:
	/* read pass from EEPROM */
	/* void function take void and return void */
	
void read_EEPROM()
{
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
	for (u8 i=0;i<8;i++)										// loop to take write pass in EEPROM
     8a8:	10 e0       	ldi	r17, 0x00	; 0
     8aa:	0d c0       	rjmp	.+26     	; 0x8c6 <read_EEPROM+0x24>
	{
		EEPROM_user[i] = EEPROM_u8Read(USER_address + i)^KEY;	// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array
     8ac:	c1 2f       	mov	r28, r17
     8ae:	d0 e0       	ldi	r29, 0x00	; 0
     8b0:	ce 01       	movw	r24, r28
     8b2:	80 5a       	subi	r24, 0xA0	; 160
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <EEPROM_u8Read>
     8ba:	c4 5c       	subi	r28, 0xC4	; 196
     8bc:	de 4f       	sbci	r29, 0xFE	; 254
     8be:	9b ea       	ldi	r25, 0xAB	; 171
     8c0:	89 27       	eor	r24, r25
     8c2:	88 83       	st	Y, r24
	/* read pass from EEPROM */
	/* void function take void and return void */
	
void read_EEPROM()
{
	for (u8 i=0;i<8;i++)										// loop to take write pass in EEPROM
     8c4:	1f 5f       	subi	r17, 0xFF	; 255
     8c6:	18 30       	cpi	r17, 0x08	; 8
     8c8:	88 f3       	brcs	.-30     	; 0x8ac <read_EEPROM+0xa>
     8ca:	10 e0       	ldi	r17, 0x00	; 0
     8cc:	0c c0       	rjmp	.+24     	; 0x8e6 <read_EEPROM+0x44>
	{
		EEPROM_user[i] = EEPROM_u8Read(USER_address + i)^KEY;	// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array
	}
	for (u8 i=0;i<4;i++)										// loop to take write pass in EEPROM 
	{
		EEPROM_pass[i] = EEPROM_u8Read(PASS_address + i)^KEY;	// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array 
     8ce:	c1 2f       	mov	r28, r17
     8d0:	d0 e0       	ldi	r29, 0x00	; 0
     8d2:	ce 01       	movw	r24, r28
     8d4:	80 96       	adiw	r24, 0x20	; 32
     8d6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <EEPROM_u8Read>
     8da:	c3 5b       	subi	r28, 0xB3	; 179
     8dc:	de 4f       	sbci	r29, 0xFE	; 254
     8de:	9b ea       	ldi	r25, 0xAB	; 171
     8e0:	89 27       	eor	r24, r25
     8e2:	88 83       	st	Y, r24
{
	for (u8 i=0;i<8;i++)										// loop to take write pass in EEPROM
	{
		EEPROM_user[i] = EEPROM_u8Read(USER_address + i)^KEY;	// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array
	}
	for (u8 i=0;i<4;i++)										// loop to take write pass in EEPROM 
     8e4:	1f 5f       	subi	r17, 0xFF	; 255
     8e6:	14 30       	cpi	r17, 0x04	; 4
     8e8:	90 f3       	brcs	.-28     	; 0x8ce <read_EEPROM+0x2c>
	{
		EEPROM_pass[i] = EEPROM_u8Read(PASS_address + i)^KEY;	// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array 
	}
}
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	08 95       	ret

000008f2 <start>:
	/* sett pass if not set or read pass if already set */
	/* void function take void and return void */	
void start()
{
	pass_check = EEPROM_u8Read(PASS_address_check);		// check if pass set or not by reading value in PASS_address_check
     8f2:	80 e5       	ldi	r24, 0x50	; 80
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <EEPROM_u8Read>
     8fa:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <pass_check>
	if (pass_check != 0)								// check if value of pass_check equal to 0 or not 
     8fe:	88 23       	and	r24, r24
     900:	09 f4       	brne	.+2      	; 0x904 <start+0x12>
     902:	40 c0       	rjmp	.+128    	; 0x984 <start+0x92>
	{
		LCD_vidDisplayString("please,set user:");		// display message on LCD
     904:	82 e9       	ldi	r24, 0x92	; 146
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,1);
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	82 e0       	ldi	r24, 0x02	; 2
     910:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_vidMoveCursor>
		Scan_user();
     914:	0e 94 ef 03 	call	0x7de	; 0x7de <Scan_user>
		LCD_vidMoveCursor(3,1);
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_vidMoveCursor>
		LCD_vidDisplayString("please,set pass:");		// display message on LCD
     920:	83 ea       	ldi	r24, 0xA3	; 163
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
		LCD_vidMoveCursor(4,1);							// move LCD cursor to next line
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	84 e0       	ldi	r24, 0x04	; 4
     92c:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_vidMoveCursor>
		Scan_pass();									// take pass from user
     930:	0e 94 b7 03 	call	0x76e	; 0x76e <Scan_pass>
		write_EEPROM();
     934:	0e 94 27 04 	call	0x84e	; 0x84e <write_EEPROM>
		LCD_vidClearScreen();
     938:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_vidClearScreen>
		LCD_vidDisplayString("user added ");		// display message on LCD
     93c:	84 eb       	ldi	r24, 0xB4	; 180
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,1);
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	82 e0       	ldi	r24, 0x02	; 2
     948:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_vidMoveCursor>
		LCD_vidDisplayString("Successfully");
     94c:	80 ec       	ldi	r24, 0xC0	; 192
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
     954:	2f e7       	ldi	r18, 0x7F	; 127
     956:	8a e1       	ldi	r24, 0x1A	; 26
     958:	96 e0       	ldi	r25, 0x06	; 6
     95a:	21 50       	subi	r18, 0x01	; 1
     95c:	80 40       	sbci	r24, 0x00	; 0
     95e:	90 40       	sbci	r25, 0x00	; 0
     960:	e1 f7       	brne	.-8      	; 0x95a <start+0x68>
     962:	00 c0       	rjmp	.+0      	; 0x964 <start+0x72>
     964:	00 00       	nop
		_delay_ms(250);
		EEPROM_vidWrite(PASS_address_check, 0);			// change value in PASS_address_check to zero (as pass is set)
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	80 e5       	ldi	r24, 0x50	; 80
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <EEPROM_vidWrite>
		pass_check = EEPROM_u8Read(PASS_address_check);	// check if pass is set or not by reading value in PASS_address_check 
     972:	80 e5       	ldi	r24, 0x50	; 80
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <EEPROM_u8Read>
     97a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <pass_check>
		read_EEPROM();									// read value from EEPROM
     97e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <read_EEPROM>
     982:	08 95       	ret
	}
	else
	{
		read_EEPROM();									// read value from EEPROM
     984:	0e 94 51 04 	call	0x8a2	; 0x8a2 <read_EEPROM>
     988:	08 95       	ret

0000098a <check_pass>:
}
	/* check pass is true or not */
	/* void function take void and return void */
void check_pass()
{
			LCD_vidMoveCursor(1, 1);					// move LCD cursor to first line
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_vidMoveCursor>
			LCD_vidDisplayString("Enter User:");	// display message on LCD
     992:	8d ec       	ldi	r24, 0xCD	; 205
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
			LCD_vidMoveCursor(2, 1);					// move LCD cursor to next line
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_vidMoveCursor>
			Scan_user();								// take pass from user
     9a2:	0e 94 ef 03 	call	0x7de	; 0x7de <Scan_user>
			check_user=0;									// initialize check variable to 0
     9a6:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <check_user>
			for (u8 i=0;i<8;i++)						// loop to check if pass entered is correct or not (same saved in EEPROM)
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	12 c0       	rjmp	.+36     	; 0x9d2 <check_pass+0x48>
			{
				if (user[i] == EEPROM_user[i])			// check if two value are equal or not
     9ae:	82 2f       	mov	r24, r18
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	fc 01       	movw	r30, r24
     9b4:	ec 5b       	subi	r30, 0xBC	; 188
     9b6:	fe 4f       	sbci	r31, 0xFE	; 254
     9b8:	30 81       	ld	r19, Z
     9ba:	fc 01       	movw	r30, r24
     9bc:	e4 5c       	subi	r30, 0xC4	; 196
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	80 81       	ld	r24, Z
     9c2:	38 13       	cpse	r19, r24
     9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <check_pass+0x46>
				{
					check_user++;							// if that increase the check variable by one
     9c6:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <check_user>
     9ca:	8f 5f       	subi	r24, 0xFF	; 255
     9cc:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <check_user>
			LCD_vidMoveCursor(1, 1);					// move LCD cursor to first line
			LCD_vidDisplayString("Enter User:");	// display message on LCD
			LCD_vidMoveCursor(2, 1);					// move LCD cursor to next line
			Scan_user();								// take pass from user
			check_user=0;									// initialize check variable to 0
			for (u8 i=0;i<8;i++)						// loop to check if pass entered is correct or not (same saved in EEPROM)
     9d0:	2f 5f       	subi	r18, 0xFF	; 255
     9d2:	28 30       	cpi	r18, 0x08	; 8
     9d4:	60 f3       	brcs	.-40     	; 0x9ae <check_pass+0x24>
				}
				else
				{
				}
			}
		LCD_vidMoveCursor(3, 1);					// move LCD cursor to first line
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_vidMoveCursor>
		LCD_vidDisplayString("Enter Password:");	// display message on LCD
     9de:	89 ed       	ldi	r24, 0xD9	; 217
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
		LCD_vidMoveCursor(4, 1);					// move LCD cursor to next line
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_vidMoveCursor>
		Scan_pass();								// take pass from user
     9ee:	0e 94 b7 03 	call	0x76e	; 0x76e <Scan_pass>
		check=0;									// initialize check variable to 0 
     9f2:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <check>
		for (u8 i=0;i<4;i++)						// loop to check if pass entered is correct or not (same saved in EEPROM)	
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	12 c0       	rjmp	.+36     	; 0xa1e <check_pass+0x94>
		{		
			if (pass[i] == EEPROM_pass[i])			// check if two value are equal or not 
     9fa:	82 2f       	mov	r24, r18
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	fc 01       	movw	r30, r24
     a00:	e8 5c       	subi	r30, 0xC8	; 200
     a02:	fe 4f       	sbci	r31, 0xFE	; 254
     a04:	30 81       	ld	r19, Z
     a06:	fc 01       	movw	r30, r24
     a08:	e3 5b       	subi	r30, 0xB3	; 179
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	80 81       	ld	r24, Z
     a0e:	38 13       	cpse	r19, r24
     a10:	05 c0       	rjmp	.+10     	; 0xa1c <check_pass+0x92>
			{
				check++;							// if that increase the check variable by one
     a12:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <check>
     a16:	8f 5f       	subi	r24, 0xFF	; 255
     a18:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <check>
		LCD_vidMoveCursor(3, 1);					// move LCD cursor to first line
		LCD_vidDisplayString("Enter Password:");	// display message on LCD
		LCD_vidMoveCursor(4, 1);					// move LCD cursor to next line
		Scan_pass();								// take pass from user
		check=0;									// initialize check variable to 0 
		for (u8 i=0;i<4;i++)						// loop to check if pass entered is correct or not (same saved in EEPROM)	
     a1c:	2f 5f       	subi	r18, 0xFF	; 255
     a1e:	24 30       	cpi	r18, 0x04	; 4
     a20:	60 f3       	brcs	.-40     	; 0x9fa <check_pass+0x70>
			}
			else
			{
			}
		}
		LCD_vidClearScreen();						// clear LCD screen
     a22:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_vidClearScreen>
		if(check == 4 && check_user == 8)								// check if check variable equal 4 or not (correct pass)
     a26:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <check>
     a2a:	84 30       	cpi	r24, 0x04	; 4
     a2c:	d1 f4       	brne	.+52     	; 0xa62 <check_pass+0xd8>
     a2e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <check_user>
     a32:	88 30       	cpi	r24, 0x08	; 8
     a34:	b1 f4       	brne	.+44     	; 0xa62 <check_pass+0xd8>
		{
			LCD_vidDisplayString("Correct Password");	// display message on LCD
     a36:	89 ee       	ldi	r24, 0xE9	; 233
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
     a3e:	2f e7       	ldi	r18, 0x7F	; 127
     a40:	8a e1       	ldi	r24, 0x1A	; 26
     a42:	96 e0       	ldi	r25, 0x06	; 6
     a44:	21 50       	subi	r18, 0x01	; 1
     a46:	80 40       	sbci	r24, 0x00	; 0
     a48:	90 40       	sbci	r25, 0x00	; 0
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <check_pass+0xba>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <check_pass+0xc4>
     a4e:	00 00       	nop
			_delay_ms(250);								// delay 250m second to see message
			wrong_pass_count = 0;						// reset wrong_pass_count variable by reinitialize by 0
     a50:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
			LCD_vidClearScreen();						// clear LCD screen	
     a54:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_vidClearScreen>
			LCD_vidDisplayString("Lock Opened");		// display message on screen
     a58:	8a ef       	ldi	r24, 0xFA	; 250
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
     a60:	25 c0       	rjmp	.+74     	; 0xaac <check_pass+0x122>
		}
		else
		{
			wrong_pass_count++;							// increase wrong_pass_count variable by one 
     a62:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
			LCD_vidDisplayString("Wrong password");		// display message on LCD
     a6c:	86 e0       	ldi	r24, 0x06	; 6
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
			LCD_vidMoveCursor(2, 1);					// move LCD cursor
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_vidMoveCursor>
			LCD_vidDisplayString("or user");		// display message on LCD
     a7c:	85 e1       	ldi	r24, 0x15	; 21
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
			LCD_vidMoveCursor(3, 1);					// move LCD cursor
     a84:	61 e0       	ldi	r22, 0x01	; 1
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_vidMoveCursor>
			LCD_vidDisplayString("Rem times:");			// display message on LCD 
     a8c:	8d e1       	ldi	r24, 0x1D	; 29
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
			LCD_vidDisplayNumber(3-wrong_pass_count);	// display number of reaming tries
     a94:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     a98:	63 e0       	ldi	r22, 0x03	; 3
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	68 1b       	sub	r22, r24
     a9e:	71 09       	sbc	r23, r1
     aa0:	07 2e       	mov	r0, r23
     aa2:	00 0c       	add	r0, r0
     aa4:	88 0b       	sbc	r24, r24
     aa6:	99 0b       	sbc	r25, r25
     aa8:	0e 94 3f 03 	call	0x67e	; 0x67e <LCD_vidDisplayNumber>
     aac:	2f ef       	ldi	r18, 0xFF	; 255
     aae:	89 e6       	ldi	r24, 0x69	; 105
     ab0:	98 e1       	ldi	r25, 0x18	; 24
     ab2:	21 50       	subi	r18, 0x01	; 1
     ab4:	80 40       	sbci	r24, 0x00	; 0
     ab6:	90 40       	sbci	r25, 0x00	; 0
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <check_pass+0x128>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <check_pass+0x132>
     abc:	00 00       	nop
     abe:	08 95       	ret

00000ac0 <smart_lock>:
}
	/* if pass wrong and exceed tries safe go on lock mode */
	/* u8 type function take void and return variable form u8 type */
u8 smart_lock()
{
	LCD_vidClearScreen();					// clear LCD screen
     ac0:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_vidClearScreen>
	if (pass_check == 0)					// check if pass is set or not
     ac4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <pass_check>
     ac8:	81 11       	cpse	r24, r1
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <smart_lock+0x10>
	{
		check_pass();						// check if pass is correct or not 
     acc:	0e 94 c5 04 	call	0x98a	; 0x98a <check_pass>
	}
	if (wrong_pass_count == 3)				// check if user exceed maximum number of tries or not
     ad0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     ad4:	83 30       	cpi	r24, 0x03	; 3
     ad6:	31 f4       	brne	.+12     	; 0xae4 <smart_lock+0x24>
	{
		LCD_vidClearScreen();				// clear LCD screen
     ad8:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_vidClearScreen>
		LCD_vidDisplayString("Locked Mode!!");	// display message on LCD
     adc:	88 e2       	ldi	r24, 0x28	; 40
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	0e 94 32 03 	call	0x664	; 0x664 <LCD_vidDisplayString>
	}
	return wrong_pass_count;				// return value of wrong_pass_count variable
     ae4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     ae8:	08 95       	ret

00000aea <sprintf>:
     aea:	ae e0       	ldi	r26, 0x0E	; 14
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	eb e7       	ldi	r30, 0x7B	; 123
     af0:	f5 e0       	ldi	r31, 0x05	; 5
     af2:	0c 94 36 08 	jmp	0x106c	; 0x106c <__prologue_saves__+0x1c>
     af6:	0d 89       	ldd	r16, Y+21	; 0x15
     af8:	1e 89       	ldd	r17, Y+22	; 0x16
     afa:	86 e0       	ldi	r24, 0x06	; 6
     afc:	8c 83       	std	Y+4, r24	; 0x04
     afe:	1a 83       	std	Y+2, r17	; 0x02
     b00:	09 83       	std	Y+1, r16	; 0x01
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	9f e7       	ldi	r25, 0x7F	; 127
     b06:	9e 83       	std	Y+6, r25	; 0x06
     b08:	8d 83       	std	Y+5, r24	; 0x05
     b0a:	ae 01       	movw	r20, r28
     b0c:	47 5e       	subi	r20, 0xE7	; 231
     b0e:	5f 4f       	sbci	r21, 0xFF	; 255
     b10:	6f 89       	ldd	r22, Y+23	; 0x17
     b12:	78 8d       	ldd	r23, Y+24	; 0x18
     b14:	ce 01       	movw	r24, r28
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	0e 94 97 05 	call	0xb2e	; 0xb2e <vfprintf>
     b1c:	ef 81       	ldd	r30, Y+7	; 0x07
     b1e:	f8 85       	ldd	r31, Y+8	; 0x08
     b20:	e0 0f       	add	r30, r16
     b22:	f1 1f       	adc	r31, r17
     b24:	10 82       	st	Z, r1
     b26:	2e 96       	adiw	r28, 0x0e	; 14
     b28:	e4 e0       	ldi	r30, 0x04	; 4
     b2a:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__epilogue_restores__+0x1c>

00000b2e <vfprintf>:
     b2e:	ab e0       	ldi	r26, 0x0B	; 11
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	ed e9       	ldi	r30, 0x9D	; 157
     b34:	f5 e0       	ldi	r31, 0x05	; 5
     b36:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__prologue_saves__>
     b3a:	6c 01       	movw	r12, r24
     b3c:	7b 01       	movw	r14, r22
     b3e:	8a 01       	movw	r16, r20
     b40:	fc 01       	movw	r30, r24
     b42:	17 82       	std	Z+7, r1	; 0x07
     b44:	16 82       	std	Z+6, r1	; 0x06
     b46:	83 81       	ldd	r24, Z+3	; 0x03
     b48:	81 ff       	sbrs	r24, 1
     b4a:	cc c1       	rjmp	.+920    	; 0xee4 <vfprintf+0x3b6>
     b4c:	ce 01       	movw	r24, r28
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	3c 01       	movw	r6, r24
     b52:	f6 01       	movw	r30, r12
     b54:	93 81       	ldd	r25, Z+3	; 0x03
     b56:	f7 01       	movw	r30, r14
     b58:	93 fd       	sbrc	r25, 3
     b5a:	85 91       	lpm	r24, Z+
     b5c:	93 ff       	sbrs	r25, 3
     b5e:	81 91       	ld	r24, Z+
     b60:	7f 01       	movw	r14, r30
     b62:	88 23       	and	r24, r24
     b64:	09 f4       	brne	.+2      	; 0xb68 <vfprintf+0x3a>
     b66:	ba c1       	rjmp	.+884    	; 0xedc <vfprintf+0x3ae>
     b68:	85 32       	cpi	r24, 0x25	; 37
     b6a:	39 f4       	brne	.+14     	; 0xb7a <vfprintf+0x4c>
     b6c:	93 fd       	sbrc	r25, 3
     b6e:	85 91       	lpm	r24, Z+
     b70:	93 ff       	sbrs	r25, 3
     b72:	81 91       	ld	r24, Z+
     b74:	7f 01       	movw	r14, r30
     b76:	85 32       	cpi	r24, 0x25	; 37
     b78:	29 f4       	brne	.+10     	; 0xb84 <vfprintf+0x56>
     b7a:	b6 01       	movw	r22, r12
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     b82:	e7 cf       	rjmp	.-50     	; 0xb52 <vfprintf+0x24>
     b84:	91 2c       	mov	r9, r1
     b86:	21 2c       	mov	r2, r1
     b88:	31 2c       	mov	r3, r1
     b8a:	ff e1       	ldi	r31, 0x1F	; 31
     b8c:	f3 15       	cp	r31, r3
     b8e:	d8 f0       	brcs	.+54     	; 0xbc6 <vfprintf+0x98>
     b90:	8b 32       	cpi	r24, 0x2B	; 43
     b92:	79 f0       	breq	.+30     	; 0xbb2 <vfprintf+0x84>
     b94:	38 f4       	brcc	.+14     	; 0xba4 <vfprintf+0x76>
     b96:	80 32       	cpi	r24, 0x20	; 32
     b98:	79 f0       	breq	.+30     	; 0xbb8 <vfprintf+0x8a>
     b9a:	83 32       	cpi	r24, 0x23	; 35
     b9c:	a1 f4       	brne	.+40     	; 0xbc6 <vfprintf+0x98>
     b9e:	23 2d       	mov	r18, r3
     ba0:	20 61       	ori	r18, 0x10	; 16
     ba2:	1d c0       	rjmp	.+58     	; 0xbde <vfprintf+0xb0>
     ba4:	8d 32       	cpi	r24, 0x2D	; 45
     ba6:	61 f0       	breq	.+24     	; 0xbc0 <vfprintf+0x92>
     ba8:	80 33       	cpi	r24, 0x30	; 48
     baa:	69 f4       	brne	.+26     	; 0xbc6 <vfprintf+0x98>
     bac:	23 2d       	mov	r18, r3
     bae:	21 60       	ori	r18, 0x01	; 1
     bb0:	16 c0       	rjmp	.+44     	; 0xbde <vfprintf+0xb0>
     bb2:	83 2d       	mov	r24, r3
     bb4:	82 60       	ori	r24, 0x02	; 2
     bb6:	38 2e       	mov	r3, r24
     bb8:	e3 2d       	mov	r30, r3
     bba:	e4 60       	ori	r30, 0x04	; 4
     bbc:	3e 2e       	mov	r3, r30
     bbe:	2a c0       	rjmp	.+84     	; 0xc14 <vfprintf+0xe6>
     bc0:	f3 2d       	mov	r31, r3
     bc2:	f8 60       	ori	r31, 0x08	; 8
     bc4:	1d c0       	rjmp	.+58     	; 0xc00 <vfprintf+0xd2>
     bc6:	37 fc       	sbrc	r3, 7
     bc8:	2d c0       	rjmp	.+90     	; 0xc24 <vfprintf+0xf6>
     bca:	20 ed       	ldi	r18, 0xD0	; 208
     bcc:	28 0f       	add	r18, r24
     bce:	2a 30       	cpi	r18, 0x0A	; 10
     bd0:	40 f0       	brcs	.+16     	; 0xbe2 <vfprintf+0xb4>
     bd2:	8e 32       	cpi	r24, 0x2E	; 46
     bd4:	b9 f4       	brne	.+46     	; 0xc04 <vfprintf+0xd6>
     bd6:	36 fc       	sbrc	r3, 6
     bd8:	81 c1       	rjmp	.+770    	; 0xedc <vfprintf+0x3ae>
     bda:	23 2d       	mov	r18, r3
     bdc:	20 64       	ori	r18, 0x40	; 64
     bde:	32 2e       	mov	r3, r18
     be0:	19 c0       	rjmp	.+50     	; 0xc14 <vfprintf+0xe6>
     be2:	36 fe       	sbrs	r3, 6
     be4:	06 c0       	rjmp	.+12     	; 0xbf2 <vfprintf+0xc4>
     be6:	8a e0       	ldi	r24, 0x0A	; 10
     be8:	98 9e       	mul	r9, r24
     bea:	20 0d       	add	r18, r0
     bec:	11 24       	eor	r1, r1
     bee:	92 2e       	mov	r9, r18
     bf0:	11 c0       	rjmp	.+34     	; 0xc14 <vfprintf+0xe6>
     bf2:	ea e0       	ldi	r30, 0x0A	; 10
     bf4:	2e 9e       	mul	r2, r30
     bf6:	20 0d       	add	r18, r0
     bf8:	11 24       	eor	r1, r1
     bfa:	22 2e       	mov	r2, r18
     bfc:	f3 2d       	mov	r31, r3
     bfe:	f0 62       	ori	r31, 0x20	; 32
     c00:	3f 2e       	mov	r3, r31
     c02:	08 c0       	rjmp	.+16     	; 0xc14 <vfprintf+0xe6>
     c04:	8c 36       	cpi	r24, 0x6C	; 108
     c06:	21 f4       	brne	.+8      	; 0xc10 <vfprintf+0xe2>
     c08:	83 2d       	mov	r24, r3
     c0a:	80 68       	ori	r24, 0x80	; 128
     c0c:	38 2e       	mov	r3, r24
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <vfprintf+0xe6>
     c10:	88 36       	cpi	r24, 0x68	; 104
     c12:	41 f4       	brne	.+16     	; 0xc24 <vfprintf+0xf6>
     c14:	f7 01       	movw	r30, r14
     c16:	93 fd       	sbrc	r25, 3
     c18:	85 91       	lpm	r24, Z+
     c1a:	93 ff       	sbrs	r25, 3
     c1c:	81 91       	ld	r24, Z+
     c1e:	7f 01       	movw	r14, r30
     c20:	81 11       	cpse	r24, r1
     c22:	b3 cf       	rjmp	.-154    	; 0xb8a <vfprintf+0x5c>
     c24:	98 2f       	mov	r25, r24
     c26:	9f 7d       	andi	r25, 0xDF	; 223
     c28:	95 54       	subi	r25, 0x45	; 69
     c2a:	93 30       	cpi	r25, 0x03	; 3
     c2c:	28 f4       	brcc	.+10     	; 0xc38 <vfprintf+0x10a>
     c2e:	0c 5f       	subi	r16, 0xFC	; 252
     c30:	1f 4f       	sbci	r17, 0xFF	; 255
     c32:	9f e3       	ldi	r25, 0x3F	; 63
     c34:	99 83       	std	Y+1, r25	; 0x01
     c36:	0d c0       	rjmp	.+26     	; 0xc52 <vfprintf+0x124>
     c38:	83 36       	cpi	r24, 0x63	; 99
     c3a:	31 f0       	breq	.+12     	; 0xc48 <vfprintf+0x11a>
     c3c:	83 37       	cpi	r24, 0x73	; 115
     c3e:	71 f0       	breq	.+28     	; 0xc5c <vfprintf+0x12e>
     c40:	83 35       	cpi	r24, 0x53	; 83
     c42:	09 f0       	breq	.+2      	; 0xc46 <vfprintf+0x118>
     c44:	59 c0       	rjmp	.+178    	; 0xcf8 <vfprintf+0x1ca>
     c46:	21 c0       	rjmp	.+66     	; 0xc8a <vfprintf+0x15c>
     c48:	f8 01       	movw	r30, r16
     c4a:	80 81       	ld	r24, Z
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	0e 5f       	subi	r16, 0xFE	; 254
     c50:	1f 4f       	sbci	r17, 0xFF	; 255
     c52:	88 24       	eor	r8, r8
     c54:	83 94       	inc	r8
     c56:	91 2c       	mov	r9, r1
     c58:	53 01       	movw	r10, r6
     c5a:	13 c0       	rjmp	.+38     	; 0xc82 <vfprintf+0x154>
     c5c:	28 01       	movw	r4, r16
     c5e:	f2 e0       	ldi	r31, 0x02	; 2
     c60:	4f 0e       	add	r4, r31
     c62:	51 1c       	adc	r5, r1
     c64:	f8 01       	movw	r30, r16
     c66:	a0 80       	ld	r10, Z
     c68:	b1 80       	ldd	r11, Z+1	; 0x01
     c6a:	36 fe       	sbrs	r3, 6
     c6c:	03 c0       	rjmp	.+6      	; 0xc74 <vfprintf+0x146>
     c6e:	69 2d       	mov	r22, r9
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <vfprintf+0x14a>
     c74:	6f ef       	ldi	r22, 0xFF	; 255
     c76:	7f ef       	ldi	r23, 0xFF	; 255
     c78:	c5 01       	movw	r24, r10
     c7a:	0e 94 83 07 	call	0xf06	; 0xf06 <strnlen>
     c7e:	4c 01       	movw	r8, r24
     c80:	82 01       	movw	r16, r4
     c82:	f3 2d       	mov	r31, r3
     c84:	ff 77       	andi	r31, 0x7F	; 127
     c86:	3f 2e       	mov	r3, r31
     c88:	16 c0       	rjmp	.+44     	; 0xcb6 <vfprintf+0x188>
     c8a:	28 01       	movw	r4, r16
     c8c:	22 e0       	ldi	r18, 0x02	; 2
     c8e:	42 0e       	add	r4, r18
     c90:	51 1c       	adc	r5, r1
     c92:	f8 01       	movw	r30, r16
     c94:	a0 80       	ld	r10, Z
     c96:	b1 80       	ldd	r11, Z+1	; 0x01
     c98:	36 fe       	sbrs	r3, 6
     c9a:	03 c0       	rjmp	.+6      	; 0xca2 <vfprintf+0x174>
     c9c:	69 2d       	mov	r22, r9
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <vfprintf+0x178>
     ca2:	6f ef       	ldi	r22, 0xFF	; 255
     ca4:	7f ef       	ldi	r23, 0xFF	; 255
     ca6:	c5 01       	movw	r24, r10
     ca8:	0e 94 78 07 	call	0xef0	; 0xef0 <strnlen_P>
     cac:	4c 01       	movw	r8, r24
     cae:	f3 2d       	mov	r31, r3
     cb0:	f0 68       	ori	r31, 0x80	; 128
     cb2:	3f 2e       	mov	r3, r31
     cb4:	82 01       	movw	r16, r4
     cb6:	33 fc       	sbrc	r3, 3
     cb8:	1b c0       	rjmp	.+54     	; 0xcf0 <vfprintf+0x1c2>
     cba:	82 2d       	mov	r24, r2
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	88 16       	cp	r8, r24
     cc0:	99 06       	cpc	r9, r25
     cc2:	b0 f4       	brcc	.+44     	; 0xcf0 <vfprintf+0x1c2>
     cc4:	b6 01       	movw	r22, r12
     cc6:	80 e2       	ldi	r24, 0x20	; 32
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     cce:	2a 94       	dec	r2
     cd0:	f4 cf       	rjmp	.-24     	; 0xcba <vfprintf+0x18c>
     cd2:	f5 01       	movw	r30, r10
     cd4:	37 fc       	sbrc	r3, 7
     cd6:	85 91       	lpm	r24, Z+
     cd8:	37 fe       	sbrs	r3, 7
     cda:	81 91       	ld	r24, Z+
     cdc:	5f 01       	movw	r10, r30
     cde:	b6 01       	movw	r22, r12
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     ce6:	21 10       	cpse	r2, r1
     ce8:	2a 94       	dec	r2
     cea:	21 e0       	ldi	r18, 0x01	; 1
     cec:	82 1a       	sub	r8, r18
     cee:	91 08       	sbc	r9, r1
     cf0:	81 14       	cp	r8, r1
     cf2:	91 04       	cpc	r9, r1
     cf4:	71 f7       	brne	.-36     	; 0xcd2 <vfprintf+0x1a4>
     cf6:	e8 c0       	rjmp	.+464    	; 0xec8 <vfprintf+0x39a>
     cf8:	84 36       	cpi	r24, 0x64	; 100
     cfa:	11 f0       	breq	.+4      	; 0xd00 <vfprintf+0x1d2>
     cfc:	89 36       	cpi	r24, 0x69	; 105
     cfe:	41 f5       	brne	.+80     	; 0xd50 <vfprintf+0x222>
     d00:	f8 01       	movw	r30, r16
     d02:	37 fe       	sbrs	r3, 7
     d04:	07 c0       	rjmp	.+14     	; 0xd14 <vfprintf+0x1e6>
     d06:	60 81       	ld	r22, Z
     d08:	71 81       	ldd	r23, Z+1	; 0x01
     d0a:	82 81       	ldd	r24, Z+2	; 0x02
     d0c:	93 81       	ldd	r25, Z+3	; 0x03
     d0e:	0c 5f       	subi	r16, 0xFC	; 252
     d10:	1f 4f       	sbci	r17, 0xFF	; 255
     d12:	08 c0       	rjmp	.+16     	; 0xd24 <vfprintf+0x1f6>
     d14:	60 81       	ld	r22, Z
     d16:	71 81       	ldd	r23, Z+1	; 0x01
     d18:	07 2e       	mov	r0, r23
     d1a:	00 0c       	add	r0, r0
     d1c:	88 0b       	sbc	r24, r24
     d1e:	99 0b       	sbc	r25, r25
     d20:	0e 5f       	subi	r16, 0xFE	; 254
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	f3 2d       	mov	r31, r3
     d26:	ff 76       	andi	r31, 0x6F	; 111
     d28:	3f 2e       	mov	r3, r31
     d2a:	97 ff       	sbrs	r25, 7
     d2c:	09 c0       	rjmp	.+18     	; 0xd40 <vfprintf+0x212>
     d2e:	90 95       	com	r25
     d30:	80 95       	com	r24
     d32:	70 95       	com	r23
     d34:	61 95       	neg	r22
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
     d38:	8f 4f       	sbci	r24, 0xFF	; 255
     d3a:	9f 4f       	sbci	r25, 0xFF	; 255
     d3c:	f0 68       	ori	r31, 0x80	; 128
     d3e:	3f 2e       	mov	r3, r31
     d40:	2a e0       	ldi	r18, 0x0A	; 10
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	a3 01       	movw	r20, r6
     d46:	0e 94 ca 07 	call	0xf94	; 0xf94 <__ultoa_invert>
     d4a:	88 2e       	mov	r8, r24
     d4c:	86 18       	sub	r8, r6
     d4e:	45 c0       	rjmp	.+138    	; 0xdda <vfprintf+0x2ac>
     d50:	85 37       	cpi	r24, 0x75	; 117
     d52:	31 f4       	brne	.+12     	; 0xd60 <vfprintf+0x232>
     d54:	23 2d       	mov	r18, r3
     d56:	2f 7e       	andi	r18, 0xEF	; 239
     d58:	b2 2e       	mov	r11, r18
     d5a:	2a e0       	ldi	r18, 0x0A	; 10
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	25 c0       	rjmp	.+74     	; 0xdaa <vfprintf+0x27c>
     d60:	93 2d       	mov	r25, r3
     d62:	99 7f       	andi	r25, 0xF9	; 249
     d64:	b9 2e       	mov	r11, r25
     d66:	8f 36       	cpi	r24, 0x6F	; 111
     d68:	c1 f0       	breq	.+48     	; 0xd9a <vfprintf+0x26c>
     d6a:	18 f4       	brcc	.+6      	; 0xd72 <vfprintf+0x244>
     d6c:	88 35       	cpi	r24, 0x58	; 88
     d6e:	79 f0       	breq	.+30     	; 0xd8e <vfprintf+0x260>
     d70:	b5 c0       	rjmp	.+362    	; 0xedc <vfprintf+0x3ae>
     d72:	80 37       	cpi	r24, 0x70	; 112
     d74:	19 f0       	breq	.+6      	; 0xd7c <vfprintf+0x24e>
     d76:	88 37       	cpi	r24, 0x78	; 120
     d78:	21 f0       	breq	.+8      	; 0xd82 <vfprintf+0x254>
     d7a:	b0 c0       	rjmp	.+352    	; 0xedc <vfprintf+0x3ae>
     d7c:	e9 2f       	mov	r30, r25
     d7e:	e0 61       	ori	r30, 0x10	; 16
     d80:	be 2e       	mov	r11, r30
     d82:	b4 fe       	sbrs	r11, 4
     d84:	0d c0       	rjmp	.+26     	; 0xda0 <vfprintf+0x272>
     d86:	fb 2d       	mov	r31, r11
     d88:	f4 60       	ori	r31, 0x04	; 4
     d8a:	bf 2e       	mov	r11, r31
     d8c:	09 c0       	rjmp	.+18     	; 0xda0 <vfprintf+0x272>
     d8e:	34 fe       	sbrs	r3, 4
     d90:	0a c0       	rjmp	.+20     	; 0xda6 <vfprintf+0x278>
     d92:	29 2f       	mov	r18, r25
     d94:	26 60       	ori	r18, 0x06	; 6
     d96:	b2 2e       	mov	r11, r18
     d98:	06 c0       	rjmp	.+12     	; 0xda6 <vfprintf+0x278>
     d9a:	28 e0       	ldi	r18, 0x08	; 8
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <vfprintf+0x27c>
     da0:	20 e1       	ldi	r18, 0x10	; 16
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <vfprintf+0x27c>
     da6:	20 e1       	ldi	r18, 0x10	; 16
     da8:	32 e0       	ldi	r19, 0x02	; 2
     daa:	f8 01       	movw	r30, r16
     dac:	b7 fe       	sbrs	r11, 7
     dae:	07 c0       	rjmp	.+14     	; 0xdbe <vfprintf+0x290>
     db0:	60 81       	ld	r22, Z
     db2:	71 81       	ldd	r23, Z+1	; 0x01
     db4:	82 81       	ldd	r24, Z+2	; 0x02
     db6:	93 81       	ldd	r25, Z+3	; 0x03
     db8:	0c 5f       	subi	r16, 0xFC	; 252
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <vfprintf+0x29c>
     dbe:	60 81       	ld	r22, Z
     dc0:	71 81       	ldd	r23, Z+1	; 0x01
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 5f       	subi	r16, 0xFE	; 254
     dc8:	1f 4f       	sbci	r17, 0xFF	; 255
     dca:	a3 01       	movw	r20, r6
     dcc:	0e 94 ca 07 	call	0xf94	; 0xf94 <__ultoa_invert>
     dd0:	88 2e       	mov	r8, r24
     dd2:	86 18       	sub	r8, r6
     dd4:	fb 2d       	mov	r31, r11
     dd6:	ff 77       	andi	r31, 0x7F	; 127
     dd8:	3f 2e       	mov	r3, r31
     dda:	36 fe       	sbrs	r3, 6
     ddc:	0d c0       	rjmp	.+26     	; 0xdf8 <vfprintf+0x2ca>
     dde:	23 2d       	mov	r18, r3
     de0:	2e 7f       	andi	r18, 0xFE	; 254
     de2:	a2 2e       	mov	r10, r18
     de4:	89 14       	cp	r8, r9
     de6:	58 f4       	brcc	.+22     	; 0xdfe <vfprintf+0x2d0>
     de8:	34 fe       	sbrs	r3, 4
     dea:	0b c0       	rjmp	.+22     	; 0xe02 <vfprintf+0x2d4>
     dec:	32 fc       	sbrc	r3, 2
     dee:	09 c0       	rjmp	.+18     	; 0xe02 <vfprintf+0x2d4>
     df0:	83 2d       	mov	r24, r3
     df2:	8e 7e       	andi	r24, 0xEE	; 238
     df4:	a8 2e       	mov	r10, r24
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <vfprintf+0x2d4>
     df8:	b8 2c       	mov	r11, r8
     dfa:	a3 2c       	mov	r10, r3
     dfc:	03 c0       	rjmp	.+6      	; 0xe04 <vfprintf+0x2d6>
     dfe:	b8 2c       	mov	r11, r8
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <vfprintf+0x2d6>
     e02:	b9 2c       	mov	r11, r9
     e04:	a4 fe       	sbrs	r10, 4
     e06:	0f c0       	rjmp	.+30     	; 0xe26 <vfprintf+0x2f8>
     e08:	fe 01       	movw	r30, r28
     e0a:	e8 0d       	add	r30, r8
     e0c:	f1 1d       	adc	r31, r1
     e0e:	80 81       	ld	r24, Z
     e10:	80 33       	cpi	r24, 0x30	; 48
     e12:	21 f4       	brne	.+8      	; 0xe1c <vfprintf+0x2ee>
     e14:	9a 2d       	mov	r25, r10
     e16:	99 7e       	andi	r25, 0xE9	; 233
     e18:	a9 2e       	mov	r10, r25
     e1a:	09 c0       	rjmp	.+18     	; 0xe2e <vfprintf+0x300>
     e1c:	a2 fe       	sbrs	r10, 2
     e1e:	06 c0       	rjmp	.+12     	; 0xe2c <vfprintf+0x2fe>
     e20:	b3 94       	inc	r11
     e22:	b3 94       	inc	r11
     e24:	04 c0       	rjmp	.+8      	; 0xe2e <vfprintf+0x300>
     e26:	8a 2d       	mov	r24, r10
     e28:	86 78       	andi	r24, 0x86	; 134
     e2a:	09 f0       	breq	.+2      	; 0xe2e <vfprintf+0x300>
     e2c:	b3 94       	inc	r11
     e2e:	a3 fc       	sbrc	r10, 3
     e30:	11 c0       	rjmp	.+34     	; 0xe54 <vfprintf+0x326>
     e32:	a0 fe       	sbrs	r10, 0
     e34:	06 c0       	rjmp	.+12     	; 0xe42 <vfprintf+0x314>
     e36:	b2 14       	cp	r11, r2
     e38:	88 f4       	brcc	.+34     	; 0xe5c <vfprintf+0x32e>
     e3a:	28 0c       	add	r2, r8
     e3c:	92 2c       	mov	r9, r2
     e3e:	9b 18       	sub	r9, r11
     e40:	0e c0       	rjmp	.+28     	; 0xe5e <vfprintf+0x330>
     e42:	b2 14       	cp	r11, r2
     e44:	60 f4       	brcc	.+24     	; 0xe5e <vfprintf+0x330>
     e46:	b6 01       	movw	r22, r12
     e48:	80 e2       	ldi	r24, 0x20	; 32
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     e50:	b3 94       	inc	r11
     e52:	f7 cf       	rjmp	.-18     	; 0xe42 <vfprintf+0x314>
     e54:	b2 14       	cp	r11, r2
     e56:	18 f4       	brcc	.+6      	; 0xe5e <vfprintf+0x330>
     e58:	2b 18       	sub	r2, r11
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <vfprintf+0x332>
     e5c:	98 2c       	mov	r9, r8
     e5e:	21 2c       	mov	r2, r1
     e60:	a4 fe       	sbrs	r10, 4
     e62:	10 c0       	rjmp	.+32     	; 0xe84 <vfprintf+0x356>
     e64:	b6 01       	movw	r22, r12
     e66:	80 e3       	ldi	r24, 0x30	; 48
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     e6e:	a2 fe       	sbrs	r10, 2
     e70:	17 c0       	rjmp	.+46     	; 0xea0 <vfprintf+0x372>
     e72:	a1 fc       	sbrc	r10, 1
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <vfprintf+0x34e>
     e76:	88 e7       	ldi	r24, 0x78	; 120
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <vfprintf+0x352>
     e7c:	88 e5       	ldi	r24, 0x58	; 88
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	b6 01       	movw	r22, r12
     e82:	0c c0       	rjmp	.+24     	; 0xe9c <vfprintf+0x36e>
     e84:	8a 2d       	mov	r24, r10
     e86:	86 78       	andi	r24, 0x86	; 134
     e88:	59 f0       	breq	.+22     	; 0xea0 <vfprintf+0x372>
     e8a:	a1 fe       	sbrs	r10, 1
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <vfprintf+0x364>
     e8e:	8b e2       	ldi	r24, 0x2B	; 43
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <vfprintf+0x366>
     e92:	80 e2       	ldi	r24, 0x20	; 32
     e94:	a7 fc       	sbrc	r10, 7
     e96:	8d e2       	ldi	r24, 0x2D	; 45
     e98:	b6 01       	movw	r22, r12
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     ea0:	89 14       	cp	r8, r9
     ea2:	38 f4       	brcc	.+14     	; 0xeb2 <vfprintf+0x384>
     ea4:	b6 01       	movw	r22, r12
     ea6:	80 e3       	ldi	r24, 0x30	; 48
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     eae:	9a 94       	dec	r9
     eb0:	f7 cf       	rjmp	.-18     	; 0xea0 <vfprintf+0x372>
     eb2:	8a 94       	dec	r8
     eb4:	f3 01       	movw	r30, r6
     eb6:	e8 0d       	add	r30, r8
     eb8:	f1 1d       	adc	r31, r1
     eba:	80 81       	ld	r24, Z
     ebc:	b6 01       	movw	r22, r12
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     ec4:	81 10       	cpse	r8, r1
     ec6:	f5 cf       	rjmp	.-22     	; 0xeb2 <vfprintf+0x384>
     ec8:	22 20       	and	r2, r2
     eca:	09 f4       	brne	.+2      	; 0xece <vfprintf+0x3a0>
     ecc:	42 ce       	rjmp	.-892    	; 0xb52 <vfprintf+0x24>
     ece:	b6 01       	movw	r22, r12
     ed0:	80 e2       	ldi	r24, 0x20	; 32
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     ed8:	2a 94       	dec	r2
     eda:	f6 cf       	rjmp	.-20     	; 0xec8 <vfprintf+0x39a>
     edc:	f6 01       	movw	r30, r12
     ede:	86 81       	ldd	r24, Z+6	; 0x06
     ee0:	97 81       	ldd	r25, Z+7	; 0x07
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <vfprintf+0x3ba>
     ee4:	8f ef       	ldi	r24, 0xFF	; 255
     ee6:	9f ef       	ldi	r25, 0xFF	; 255
     ee8:	2b 96       	adiw	r28, 0x0b	; 11
     eea:	e2 e1       	ldi	r30, 0x12	; 18
     eec:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__epilogue_restores__>

00000ef0 <strnlen_P>:
     ef0:	fc 01       	movw	r30, r24
     ef2:	05 90       	lpm	r0, Z+
     ef4:	61 50       	subi	r22, 0x01	; 1
     ef6:	70 40       	sbci	r23, 0x00	; 0
     ef8:	01 10       	cpse	r0, r1
     efa:	d8 f7       	brcc	.-10     	; 0xef2 <strnlen_P+0x2>
     efc:	80 95       	com	r24
     efe:	90 95       	com	r25
     f00:	8e 0f       	add	r24, r30
     f02:	9f 1f       	adc	r25, r31
     f04:	08 95       	ret

00000f06 <strnlen>:
     f06:	fc 01       	movw	r30, r24
     f08:	61 50       	subi	r22, 0x01	; 1
     f0a:	70 40       	sbci	r23, 0x00	; 0
     f0c:	01 90       	ld	r0, Z+
     f0e:	01 10       	cpse	r0, r1
     f10:	d8 f7       	brcc	.-10     	; 0xf08 <strnlen+0x2>
     f12:	80 95       	com	r24
     f14:	90 95       	com	r25
     f16:	8e 0f       	add	r24, r30
     f18:	9f 1f       	adc	r25, r31
     f1a:	08 95       	ret

00000f1c <fputc>:
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	fb 01       	movw	r30, r22
     f26:	23 81       	ldd	r18, Z+3	; 0x03
     f28:	21 fd       	sbrc	r18, 1
     f2a:	03 c0       	rjmp	.+6      	; 0xf32 <fputc+0x16>
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	9f ef       	ldi	r25, 0xFF	; 255
     f30:	2c c0       	rjmp	.+88     	; 0xf8a <fputc+0x6e>
     f32:	22 ff       	sbrs	r18, 2
     f34:	16 c0       	rjmp	.+44     	; 0xf62 <fputc+0x46>
     f36:	46 81       	ldd	r20, Z+6	; 0x06
     f38:	57 81       	ldd	r21, Z+7	; 0x07
     f3a:	24 81       	ldd	r18, Z+4	; 0x04
     f3c:	35 81       	ldd	r19, Z+5	; 0x05
     f3e:	42 17       	cp	r20, r18
     f40:	53 07       	cpc	r21, r19
     f42:	44 f4       	brge	.+16     	; 0xf54 <fputc+0x38>
     f44:	a0 81       	ld	r26, Z
     f46:	b1 81       	ldd	r27, Z+1	; 0x01
     f48:	9d 01       	movw	r18, r26
     f4a:	2f 5f       	subi	r18, 0xFF	; 255
     f4c:	3f 4f       	sbci	r19, 0xFF	; 255
     f4e:	31 83       	std	Z+1, r19	; 0x01
     f50:	20 83       	st	Z, r18
     f52:	8c 93       	st	X, r24
     f54:	26 81       	ldd	r18, Z+6	; 0x06
     f56:	37 81       	ldd	r19, Z+7	; 0x07
     f58:	2f 5f       	subi	r18, 0xFF	; 255
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
     f5c:	37 83       	std	Z+7, r19	; 0x07
     f5e:	26 83       	std	Z+6, r18	; 0x06
     f60:	14 c0       	rjmp	.+40     	; 0xf8a <fputc+0x6e>
     f62:	8b 01       	movw	r16, r22
     f64:	ec 01       	movw	r28, r24
     f66:	fb 01       	movw	r30, r22
     f68:	00 84       	ldd	r0, Z+8	; 0x08
     f6a:	f1 85       	ldd	r31, Z+9	; 0x09
     f6c:	e0 2d       	mov	r30, r0
     f6e:	09 95       	icall
     f70:	89 2b       	or	r24, r25
     f72:	e1 f6       	brne	.-72     	; 0xf2c <fputc+0x10>
     f74:	d8 01       	movw	r26, r16
     f76:	16 96       	adiw	r26, 0x06	; 6
     f78:	8d 91       	ld	r24, X+
     f7a:	9c 91       	ld	r25, X
     f7c:	17 97       	sbiw	r26, 0x07	; 7
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	17 96       	adiw	r26, 0x07	; 7
     f82:	9c 93       	st	X, r25
     f84:	8e 93       	st	-X, r24
     f86:	16 97       	sbiw	r26, 0x06	; 6
     f88:	ce 01       	movw	r24, r28
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	08 95       	ret

00000f94 <__ultoa_invert>:
     f94:	fa 01       	movw	r30, r20
     f96:	aa 27       	eor	r26, r26
     f98:	28 30       	cpi	r18, 0x08	; 8
     f9a:	51 f1       	breq	.+84     	; 0xff0 <__ultoa_invert+0x5c>
     f9c:	20 31       	cpi	r18, 0x10	; 16
     f9e:	81 f1       	breq	.+96     	; 0x1000 <__ultoa_invert+0x6c>
     fa0:	e8 94       	clt
     fa2:	6f 93       	push	r22
     fa4:	6e 7f       	andi	r22, 0xFE	; 254
     fa6:	6e 5f       	subi	r22, 0xFE	; 254
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255
     faa:	8f 4f       	sbci	r24, 0xFF	; 255
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	af 4f       	sbci	r26, 0xFF	; 255
     fb0:	b1 e0       	ldi	r27, 0x01	; 1
     fb2:	3e d0       	rcall	.+124    	; 0x1030 <__ultoa_invert+0x9c>
     fb4:	b4 e0       	ldi	r27, 0x04	; 4
     fb6:	3c d0       	rcall	.+120    	; 0x1030 <__ultoa_invert+0x9c>
     fb8:	67 0f       	add	r22, r23
     fba:	78 1f       	adc	r23, r24
     fbc:	89 1f       	adc	r24, r25
     fbe:	9a 1f       	adc	r25, r26
     fc0:	a1 1d       	adc	r26, r1
     fc2:	68 0f       	add	r22, r24
     fc4:	79 1f       	adc	r23, r25
     fc6:	8a 1f       	adc	r24, r26
     fc8:	91 1d       	adc	r25, r1
     fca:	a1 1d       	adc	r26, r1
     fcc:	6a 0f       	add	r22, r26
     fce:	71 1d       	adc	r23, r1
     fd0:	81 1d       	adc	r24, r1
     fd2:	91 1d       	adc	r25, r1
     fd4:	a1 1d       	adc	r26, r1
     fd6:	20 d0       	rcall	.+64     	; 0x1018 <__ultoa_invert+0x84>
     fd8:	09 f4       	brne	.+2      	; 0xfdc <__ultoa_invert+0x48>
     fda:	68 94       	set
     fdc:	3f 91       	pop	r19
     fde:	2a e0       	ldi	r18, 0x0A	; 10
     fe0:	26 9f       	mul	r18, r22
     fe2:	11 24       	eor	r1, r1
     fe4:	30 19       	sub	r19, r0
     fe6:	30 5d       	subi	r19, 0xD0	; 208
     fe8:	31 93       	st	Z+, r19
     fea:	de f6       	brtc	.-74     	; 0xfa2 <__ultoa_invert+0xe>
     fec:	cf 01       	movw	r24, r30
     fee:	08 95       	ret
     ff0:	46 2f       	mov	r20, r22
     ff2:	47 70       	andi	r20, 0x07	; 7
     ff4:	40 5d       	subi	r20, 0xD0	; 208
     ff6:	41 93       	st	Z+, r20
     ff8:	b3 e0       	ldi	r27, 0x03	; 3
     ffa:	0f d0       	rcall	.+30     	; 0x101a <__ultoa_invert+0x86>
     ffc:	c9 f7       	brne	.-14     	; 0xff0 <__ultoa_invert+0x5c>
     ffe:	f6 cf       	rjmp	.-20     	; 0xfec <__ultoa_invert+0x58>
    1000:	46 2f       	mov	r20, r22
    1002:	4f 70       	andi	r20, 0x0F	; 15
    1004:	40 5d       	subi	r20, 0xD0	; 208
    1006:	4a 33       	cpi	r20, 0x3A	; 58
    1008:	18 f0       	brcs	.+6      	; 0x1010 <__ultoa_invert+0x7c>
    100a:	49 5d       	subi	r20, 0xD9	; 217
    100c:	31 fd       	sbrc	r19, 1
    100e:	40 52       	subi	r20, 0x20	; 32
    1010:	41 93       	st	Z+, r20
    1012:	02 d0       	rcall	.+4      	; 0x1018 <__ultoa_invert+0x84>
    1014:	a9 f7       	brne	.-22     	; 0x1000 <__ultoa_invert+0x6c>
    1016:	ea cf       	rjmp	.-44     	; 0xfec <__ultoa_invert+0x58>
    1018:	b4 e0       	ldi	r27, 0x04	; 4
    101a:	a6 95       	lsr	r26
    101c:	97 95       	ror	r25
    101e:	87 95       	ror	r24
    1020:	77 95       	ror	r23
    1022:	67 95       	ror	r22
    1024:	ba 95       	dec	r27
    1026:	c9 f7       	brne	.-14     	; 0x101a <__ultoa_invert+0x86>
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	61 05       	cpc	r22, r1
    102c:	71 05       	cpc	r23, r1
    102e:	08 95       	ret
    1030:	9b 01       	movw	r18, r22
    1032:	ac 01       	movw	r20, r24
    1034:	0a 2e       	mov	r0, r26
    1036:	06 94       	lsr	r0
    1038:	57 95       	ror	r21
    103a:	47 95       	ror	r20
    103c:	37 95       	ror	r19
    103e:	27 95       	ror	r18
    1040:	ba 95       	dec	r27
    1042:	c9 f7       	brne	.-14     	; 0x1036 <__ultoa_invert+0xa2>
    1044:	62 0f       	add	r22, r18
    1046:	73 1f       	adc	r23, r19
    1048:	84 1f       	adc	r24, r20
    104a:	95 1f       	adc	r25, r21
    104c:	a0 1d       	adc	r26, r0
    104e:	08 95       	ret

00001050 <__prologue_saves__>:
    1050:	2f 92       	push	r2
    1052:	3f 92       	push	r3
    1054:	4f 92       	push	r4
    1056:	5f 92       	push	r5
    1058:	6f 92       	push	r6
    105a:	7f 92       	push	r7
    105c:	8f 92       	push	r8
    105e:	9f 92       	push	r9
    1060:	af 92       	push	r10
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	ca 1b       	sub	r28, r26
    107a:	db 0b       	sbc	r29, r27
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	09 94       	ijmp

00001088 <__epilogue_restores__>:
    1088:	2a 88       	ldd	r2, Y+18	; 0x12
    108a:	39 88       	ldd	r3, Y+17	; 0x11
    108c:	48 88       	ldd	r4, Y+16	; 0x10
    108e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1090:	6e 84       	ldd	r6, Y+14	; 0x0e
    1092:	7d 84       	ldd	r7, Y+13	; 0x0d
    1094:	8c 84       	ldd	r8, Y+12	; 0x0c
    1096:	9b 84       	ldd	r9, Y+11	; 0x0b
    1098:	aa 84       	ldd	r10, Y+10	; 0x0a
    109a:	b9 84       	ldd	r11, Y+9	; 0x09
    109c:	c8 84       	ldd	r12, Y+8	; 0x08
    109e:	df 80       	ldd	r13, Y+7	; 0x07
    10a0:	ee 80       	ldd	r14, Y+6	; 0x06
    10a2:	fd 80       	ldd	r15, Y+5	; 0x05
    10a4:	0c 81       	ldd	r16, Y+4	; 0x04
    10a6:	1b 81       	ldd	r17, Y+3	; 0x03
    10a8:	aa 81       	ldd	r26, Y+2	; 0x02
    10aa:	b9 81       	ldd	r27, Y+1	; 0x01
    10ac:	ce 0f       	add	r28, r30
    10ae:	d1 1d       	adc	r29, r1
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	ed 01       	movw	r28, r26
    10bc:	08 95       	ret

000010be <_exit>:
    10be:	f8 94       	cli

000010c0 <__stop_program>:
    10c0:	ff cf       	rjmp	.-2      	; 0x10c0 <__stop_program>
