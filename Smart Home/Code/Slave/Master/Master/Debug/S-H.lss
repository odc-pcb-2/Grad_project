
S-H.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000006be  00800060  00002a30  00002ac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  0080071e  0080071e  00003182  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003182  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000031e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  0000321c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006285  00000000  00000000  0000367c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000187e  00000000  00000000  00009901  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f5f  00000000  00000000  0000b17f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a2c  00000000  00000000  0000e0e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e90  00000000  00000000  0000eb0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e12  00000000  00000000  0000f99c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  000127ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_1>
       8:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__vector_2>
       c:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__vector_3>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	a1 00       	.word	0x00a1	; ????
      56:	a9 00       	.word	0x00a9	; ????
      58:	b0 00       	.word	0x00b0	; ????
      5a:	b7 00       	.word	0x00b7	; ????
      5c:	c0 00       	.word	0x00c0	; ????
      5e:	c7 00       	.word	0x00c7	; ????
      60:	d0 00       	.word	0x00d0	; ????
      62:	d9 00       	.word	0x00d9	; ????
      64:	dd 01       	movw	r26, r26
      66:	68 02       	muls	r22, r24
      68:	15 02       	muls	r17, r21
      6a:	31 02       	muls	r19, r17
      6c:	f9 01       	movw	r30, r18
      6e:	4d 02       	muls	r20, r29
      70:	68 02       	muls	r22, r24
      72:	68 02       	muls	r22, r24
      74:	68 02       	muls	r22, r24
      76:	68 02       	muls	r22, r24
      78:	68 02       	muls	r22, r24
      7a:	68 02       	muls	r22, r24
      7c:	68 02       	muls	r22, r24
      7e:	68 02       	muls	r22, r24
      80:	68 02       	muls	r22, r24
      82:	68 02       	muls	r22, r24
      84:	68 02       	muls	r22, r24
      86:	68 02       	muls	r22, r24
      88:	68 02       	muls	r22, r24
      8a:	68 02       	muls	r22, r24
      8c:	68 02       	muls	r22, r24
      8e:	68 02       	muls	r22, r24
      90:	68 02       	muls	r22, r24
      92:	68 02       	muls	r22, r24
      94:	c1 01       	movw	r24, r2
      96:	68 02       	muls	r22, r24
      98:	68 02       	muls	r22, r24
      9a:	68 02       	muls	r22, r24
      9c:	68 02       	muls	r22, r24
      9e:	68 02       	muls	r22, r24
      a0:	68 02       	muls	r22, r24
      a2:	68 02       	muls	r22, r24
      a4:	eb 01       	movw	r28, r22
      a6:	68 02       	muls	r22, r24
      a8:	23 02       	muls	r18, r19
      aa:	3f 02       	muls	r19, r31
      ac:	07 02       	muls	r16, r23
      ae:	5b 02       	muls	r21, r27
      b0:	68 02       	muls	r22, r24
      b2:	68 02       	muls	r22, r24
      b4:	68 02       	muls	r22, r24
      b6:	68 02       	muls	r22, r24
      b8:	68 02       	muls	r22, r24
      ba:	68 02       	muls	r22, r24
      bc:	68 02       	muls	r22, r24
      be:	68 02       	muls	r22, r24
      c0:	68 02       	muls	r22, r24
      c2:	68 02       	muls	r22, r24
      c4:	68 02       	muls	r22, r24
      c6:	68 02       	muls	r22, r24
      c8:	68 02       	muls	r22, r24
      ca:	68 02       	muls	r22, r24
      cc:	68 02       	muls	r22, r24
      ce:	68 02       	muls	r22, r24
      d0:	68 02       	muls	r22, r24
      d2:	68 02       	muls	r22, r24
      d4:	cf 01       	movw	r24, r30
      d6:	39 0e       	add	r3, r25
      d8:	30 0e       	add	r3, r16
      da:	98 0e       	add	r9, r24
      dc:	9f 0e       	add	r9, r31
      de:	a6 0e       	add	r10, r22
      e0:	ad 0e       	add	r10, r29
      e2:	b4 0e       	add	r11, r20
      e4:	bb 0e       	add	r11, r27

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf e5       	ldi	r28, 0x5F	; 95
      ec:	d8 e0       	ldi	r29, 0x08	; 8
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	17 e0       	ldi	r17, 0x07	; 7
      f4:	a0 e6       	ldi	r26, 0x60	; 96
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e0 e3       	ldi	r30, 0x30	; 48
      fa:	fa e2       	ldi	r31, 0x2A	; 42
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
      fe:	05 90       	lpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	ae 31       	cpi	r26, 0x1E	; 30
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
     108:	27 e0       	ldi	r18, 0x07	; 7
     10a:	ae e1       	ldi	r26, 0x1E	; 30
     10c:	b7 e0       	ldi	r27, 0x07	; 7
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a3 34       	cpi	r26, 0x43	; 67
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 3e 0c 	call	0x187c	; 0x187c <main>
     11c:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <ADC_vidInit>:
#include "ADC_config.h"
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void ADC_vidInit(_enuADCChannels enuADCChannel)
{
     124:	e8 2f       	mov	r30, r24
    ADMUX &= 0xE0;
     126:	87 b1       	in	r24, 0x07	; 7
     128:	80 7e       	andi	r24, 0xE0	; 224
     12a:	87 b9       	out	0x07, r24	; 7
    switch (enuADCChannel)
     12c:	8e 2f       	mov	r24, r30
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	88 30       	cpi	r24, 0x08	; 8
     132:	91 05       	cpc	r25, r1
     134:	08 f0       	brcs	.+2      	; 0x138 <ADC_vidInit+0x14>
     136:	45 c0       	rjmp	.+138    	; 0x1c2 <ADC_vidInit+0x9e>
     138:	fc 01       	movw	r30, r24
     13a:	e6 5d       	subi	r30, 0xD6	; 214
     13c:	ff 4f       	sbci	r31, 0xFF	; 255
     13e:	0c 94 26 12 	jmp	0x244c	; 0x244c <__tablejump2__>
    {
    case ADC_CH0:
        DIO_vidSetPinMode(GPIOA, PIN0, INPUT);
     142:	40 e0       	ldi	r20, 0x00	; 0
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
        ADMUX |= ADC_CH0;
     14c:	87 b1       	in	r24, 0x07	; 7
     14e:	87 b9       	out	0x07, r24	; 7
        break;
     150:	38 c0       	rjmp	.+112    	; 0x1c2 <ADC_vidInit+0x9e>
    case ADC_CH1:
        DIO_vidSetPinMode(GPIOA, PIN1, INPUT);
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
        ADMUX |= ADC_CH1;
     15c:	38 9a       	sbi	0x07, 0	; 7
        break;
     15e:	31 c0       	rjmp	.+98     	; 0x1c2 <ADC_vidInit+0x9e>
    case ADC_CH2:
        DIO_vidSetPinMode(GPIOA, PIN2, INPUT);
     160:	40 e0       	ldi	r20, 0x00	; 0
     162:	62 e0       	ldi	r22, 0x02	; 2
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
        ADMUX |= ADC_CH2;
     16a:	39 9a       	sbi	0x07, 1	; 7
        break;
     16c:	2a c0       	rjmp	.+84     	; 0x1c2 <ADC_vidInit+0x9e>
    case ADC_CH3:
        DIO_vidSetPinMode(GPIOA, PIN3, INPUT);
     16e:	40 e0       	ldi	r20, 0x00	; 0
     170:	63 e0       	ldi	r22, 0x03	; 3
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
        ADMUX |= ADC_CH3;
     178:	87 b1       	in	r24, 0x07	; 7
     17a:	83 60       	ori	r24, 0x03	; 3
     17c:	87 b9       	out	0x07, r24	; 7
        break;
     17e:	21 c0       	rjmp	.+66     	; 0x1c2 <ADC_vidInit+0x9e>
    case ADC_CH4:
        DIO_vidSetPinMode(GPIOA, PIN4, INPUT);
     180:	40 e0       	ldi	r20, 0x00	; 0
     182:	64 e0       	ldi	r22, 0x04	; 4
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
        ADMUX |= ADC_CH4;
     18a:	3a 9a       	sbi	0x07, 2	; 7
        break;
     18c:	1a c0       	rjmp	.+52     	; 0x1c2 <ADC_vidInit+0x9e>
    case ADC_CH5:
        DIO_vidSetPinMode(GPIOA, PIN5, INPUT);
     18e:	40 e0       	ldi	r20, 0x00	; 0
     190:	65 e0       	ldi	r22, 0x05	; 5
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
        ADMUX |= ADC_CH5;
     198:	87 b1       	in	r24, 0x07	; 7
     19a:	85 60       	ori	r24, 0x05	; 5
     19c:	87 b9       	out	0x07, r24	; 7
        break;
     19e:	11 c0       	rjmp	.+34     	; 0x1c2 <ADC_vidInit+0x9e>
    case ADC_CH6:
        DIO_vidSetPinMode(GPIOA, PIN6, INPUT);
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	66 e0       	ldi	r22, 0x06	; 6
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
        ADMUX |= ADC_CH6;
     1aa:	87 b1       	in	r24, 0x07	; 7
     1ac:	86 60       	ori	r24, 0x06	; 6
     1ae:	87 b9       	out	0x07, r24	; 7
        break;
     1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <ADC_vidInit+0x9e>
    case ADC_CH7:
        DIO_vidSetPinMode(GPIOA, PIN7, INPUT);
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	67 e0       	ldi	r22, 0x07	; 7
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
        ADMUX |= ADC_CH7;
     1bc:	87 b1       	in	r24, 0x07	; 7
     1be:	87 60       	ori	r24, 0x07	; 7
     1c0:	87 b9       	out	0x07, r24	; 7
        break;
    default:
        break;
    }
    ADCSRA &= 0xF8;
     1c2:	86 b1       	in	r24, 0x06	; 6
     1c4:	88 7f       	andi	r24, 0xF8	; 248
     1c6:	86 b9       	out	0x06, r24	; 6
    ADCSRA |= ADC_PSC;
     1c8:	86 b1       	in	r24, 0x06	; 6
     1ca:	83 60       	ori	r24, 0x03	; 3
     1cc:	86 b9       	out	0x06, r24	; 6
    #elif   ADC_PSC == 3
    #elif   ADC_PSC == 4
    #elif   ADC_PSC == 5
    #else
    #endif*/
    ADMUX  &= 0xF8;
     1ce:	87 b1       	in	r24, 0x07	; 7
     1d0:	88 7f       	andi	r24, 0xF8	; 248
     1d2:	87 b9       	out	0x07, r24	; 7
    ADMUX  |= (ADC_VREF << 6);
     1d4:	87 b1       	in	r24, 0x07	; 7
     1d6:	80 6c       	ori	r24, 0xC0	; 192
     1d8:	87 b9       	out	0x07, r24	; 7

    #if ADC_STORE == 0
        CLR_BIT(ADMUX, ADLAR);
     1da:	3d 98       	cbi	0x07, 5	; 7
    #else
        SET_BIT(ADMUX, ADLAR);
    #endif

    SET_BIT(ADCSRA, ADATE);
     1dc:	35 9a       	sbi	0x06, 5	; 6
    SET_BIT(ADCSRA, ADEN);
     1de:	37 9a       	sbi	0x06, 7	; 6
     1e0:	08 95       	ret

000001e2 <ADC_u16Read>:
		/*                                                                      */
		/************************************************************************/
u16 ADC_u16Read(void)
{
    u16 u16ReturnedValue;
    SET_BIT(ADCSRA, ADSC);
     1e2:	36 9a       	sbi	0x06, 6	; 6
    while(GET_BIT(ADCSRA, ADIF) == 0);
     1e4:	34 9b       	sbis	0x06, 4	; 6
     1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <ADC_u16Read+0x2>
    SET_BIT(ADCSRA, ADIF);
     1e8:	34 9a       	sbi	0x06, 4	; 6
    u16ReturnedValue  = (u16)ADCL;
     1ea:	84 b1       	in	r24, 0x04	; 4
    u16ReturnedValue |= (u16)(ADCH<<8);
     1ec:	25 b1       	in	r18, 0x05	; 5
    return u16ReturnedValue;
     1ee:	90 e0       	ldi	r25, 0x00	; 0
}
     1f0:	92 2b       	or	r25, r18
     1f2:	08 95       	ret

000001f4 <back>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function that return user to previous menu */
		/************************************************************************/
 void back()
{
	  if(u8ReturnedValue=='0')				// if user choice equal to 0
     1f4:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     1f8:	80 33       	cpi	r24, 0x30	; 48
     1fa:	19 f4       	brne	.+6      	; 0x202 <back+0xe>
	  {
			  User_menue();					// call function that return to user home control
     1fc:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <User_menue>
     200:	08 95       	ret
	  }
	  else								    // if not 
	  {
		 LCD_vidClearScreen();				// clear LCD screen
     202:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
		 LCD_vidDisplayString("Wrong Choice");// display message on LCD screen
     206:	80 e7       	ldi	r24, 0x70	; 112
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20e:	2f e7       	ldi	r18, 0x7F	; 127
     210:	89 ea       	ldi	r24, 0xA9	; 169
     212:	93 e0       	ldi	r25, 0x03	; 3
     214:	21 50       	subi	r18, 0x01	; 1
     216:	80 40       	sbci	r24, 0x00	; 0
     218:	90 40       	sbci	r25, 0x00	; 0
     21a:	e1 f7       	brne	.-8      	; 0x214 <back+0x20>
     21c:	00 c0       	rjmp	.+0      	; 0x21e <back+0x2a>
     21e:	00 00       	nop
		 _delay_ms(150);					// wait for 150 m second
		 Air_condition();					// call function to reenter valid choice
     220:	0e 94 13 01 	call	0x226	; 0x226 <Air_condition>
     224:	08 95       	ret

00000226 <Air_condition>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function that control air condition		*/
		/************************************************************************/
void Air_condition()
{
	DC_Motor_vidInit();												// initialize the DC Motor
     226:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DC_Motor_vidInit>
	u8 temp,pre=1;													// declaration for two variable and initialize them with 1
	LCD_vidInit();													// initialize the LCD 	
     22a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <LCD_vidInit>
	LM35_vidInit(ADC_CH0);											// initialize the temperature sensor with channel 0 	
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	0e 94 9d 0b 	call	0x173a	; 0x173a <LM35_vidInit>
	LCD_vidClearScreen();											// clear LCD screen 			
     234:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
		/*Function Description: void function that control air condition		*/
		/************************************************************************/
void Air_condition()
{
	DC_Motor_vidInit();												// initialize the DC Motor
	u8 temp,pre=1;													// declaration for two variable and initialize them with 1
     238:	d1 e0       	ldi	r29, 0x01	; 1
     23a:	03 c0       	rjmp	.+6      	; 0x242 <Air_condition+0x1c>
     23c:	dc 2f       	mov	r29, r28
     23e:	01 c0       	rjmp	.+2      	; 0x242 <Air_condition+0x1c>
			{
				LCD_vidMoveCursor(1,1);								// move LCD cursor to line one
				LCD_vidDisplayString("Temperature =");				// display message on LCD
				LCD_vidDisplayNumber(temp);							// display temperature on LCD
				LCD_vidDisplayString("C");							// display message on LCD
				pre = temp;											// set previous value with recent read value
     240:	dc 2f       	mov	r29, r28
	LCD_vidInit();													// initialize the LCD 	
	LM35_vidInit(ADC_CH0);											// initialize the temperature sensor with channel 0 	
	LCD_vidClearScreen();											// clear LCD screen 			
	while (1)														// infinite while loop
	{
		u8ReturnedValue = KPD_u8GetPressedKey(GPIOC, HIGH_NIBBLE);	// take choice from user
     242:	61 e0       	ldi	r22, 0x01	; 1
     244:	82 e0       	ldi	r24, 0x02	; 2
     246:	0e 94 33 0a 	call	0x1466	; 0x1466 <KPD_u8GetPressedKey>
     24a:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
		if(u8ReturnedValue==NOT_PRESSED)							// if user still not enter any thing
     24e:	8f 3f       	cpi	r24, 0xFF	; 255
     250:	09 f0       	breq	.+2      	; 0x254 <Air_condition+0x2e>
     252:	5c c0       	rjmp	.+184    	; 0x30c <Air_condition+0xe6>
		{
			temp = LM35_u8Read();									// read temperature from sensor 			
     254:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LM35_u8Read>
     258:	c8 2f       	mov	r28, r24
			if(temp != pre)											// if temperature is not change (equal to previous one)
     25a:	d8 17       	cp	r29, r24
     25c:	79 f3       	breq	.-34     	; 0x23c <Air_condition+0x16>
			{
				LCD_vidMoveCursor(1,1);								// move LCD cursor to line one
     25e:	61 e0       	ldi	r22, 0x01	; 1
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString("Temperature =");				// display message on LCD
     266:	8d e7       	ldi	r24, 0x7D	; 125
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				LCD_vidDisplayNumber(temp);							// display temperature on LCD
     26e:	6c 2f       	mov	r22, r28
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 45 0b 	call	0x168a	; 0x168a <LCD_vidDisplayNumber>
				LCD_vidDisplayString("C");							// display message on LCD
     27a:	8b e8       	ldi	r24, 0x8B	; 139
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				pre = temp;											// set previous value with recent read value
				if(temp >= 28)										// if temperature is grater than or equal to 28
     282:	cc 31       	cpi	r28, 0x1C	; 28
     284:	00 f1       	brcs	.+64     	; 0x2c6 <Air_condition+0xa0>
				{
					LED_vidTurnOn(GPIOD,PIN2);						// turn on air condition LED
     286:	62 e0       	ldi	r22, 0x02	; 2
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	0e 94 95 0b 	call	0x172a	; 0x172a <LED_vidTurnOn>
					LCD_vidMoveCursor(2,1);							// move cursor to second line
     28e:	61 e0       	ldi	r22, 0x01	; 1
     290:	82 e0       	ldi	r24, 0x02	; 2
     292:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
					LCD_vidDisplayString("FAN ON ");				// display message on LCD
     296:	8d e8       	ldi	r24, 0x8D	; 141
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
					DC_Motor_vidTurnOn();							// turn on the DC Motor (air condition)
     29e:	0e 94 67 07 	call	0xece	; 0xece <DC_Motor_vidTurnOn>
					LCD_vidMoveCursor(3,1);							// move cursor to third line
     2a2:	61 e0       	ldi	r22, 0x01	; 1
     2a4:	83 e0       	ldi	r24, 0x03	; 3
     2a6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
					LCD_vidDisplayString("Press 0 to Back");		// display message on LCD
     2aa:	85 e9       	ldi	r24, 0x95	; 149
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
					LCD_vidMoveCursor(4,1);							// move cursor to fourth line
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	84 e0       	ldi	r24, 0x04	; 4
     2b6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
					LCD_vidDisplayString(">> ");					// display message on LCD
     2ba:	88 e4       	ldi	r24, 0x48	; 72
     2bc:	96 e0       	ldi	r25, 0x06	; 6
     2be:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
			{
				LCD_vidMoveCursor(1,1);								// move LCD cursor to line one
				LCD_vidDisplayString("Temperature =");				// display message on LCD
				LCD_vidDisplayNumber(temp);							// display temperature on LCD
				LCD_vidDisplayString("C");							// display message on LCD
				pre = temp;											// set previous value with recent read value
     2c2:	dc 2f       	mov	r29, r28
     2c4:	be cf       	rjmp	.-132    	; 0x242 <Air_condition+0x1c>
					LCD_vidMoveCursor(3,1);							// move cursor to third line
					LCD_vidDisplayString("Press 0 to Back");		// display message on LCD
					LCD_vidMoveCursor(4,1);							// move cursor to fourth line
					LCD_vidDisplayString(">> ");					// display message on LCD
				}
				else if(temp <= 21 )								// if temperature is less than or equal to 21
     2c6:	c6 31       	cpi	r28, 0x16	; 22
     2c8:	08 f0       	brcs	.+2      	; 0x2cc <Air_condition+0xa6>
     2ca:	ba cf       	rjmp	.-140    	; 0x240 <Air_condition+0x1a>
				{
					LED_vidTurnOff(GPIOD,PIN2);						// turn off air condition LED
     2cc:	62 e0       	ldi	r22, 0x02	; 2
     2ce:	83 e0       	ldi	r24, 0x03	; 3
     2d0:	0e 94 99 0b 	call	0x1732	; 0x1732 <LED_vidTurnOff>
					LCD_vidMoveCursor(2,1);							// move cursor to second line
     2d4:	61 e0       	ldi	r22, 0x01	; 1
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
					LCD_vidDisplayString("FAN OFF ");				// display message on LCD
     2dc:	85 ea       	ldi	r24, 0xA5	; 165
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
					DC_Motor_vidTurnOff();							// turn off the DC Motor (air condition)
     2e4:	0e 94 72 07 	call	0xee4	; 0xee4 <DC_Motor_vidTurnOff>
					LCD_vidMoveCursor(3,1);							// move cursor to third line
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	83 e0       	ldi	r24, 0x03	; 3
     2ec:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
					LCD_vidDisplayString("Press 0 to Back");		// display message on LCD
     2f0:	85 e9       	ldi	r24, 0x95	; 149
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
					LCD_vidMoveCursor(4,1);							// move cursor to fourth line
     2f8:	61 e0       	ldi	r22, 0x01	; 1
     2fa:	84 e0       	ldi	r24, 0x04	; 4
     2fc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
					LCD_vidDisplayString(">> ");					// display message on LCD
     300:	88 e4       	ldi	r24, 0x48	; 72
     302:	96 e0       	ldi	r25, 0x06	; 6
     304:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
			{
				LCD_vidMoveCursor(1,1);								// move LCD cursor to line one
				LCD_vidDisplayString("Temperature =");				// display message on LCD
				LCD_vidDisplayNumber(temp);							// display temperature on LCD
				LCD_vidDisplayString("C");							// display message on LCD
				pre = temp;											// set previous value with recent read value
     308:	dc 2f       	mov	r29, r28
     30a:	9b cf       	rjmp	.-202    	; 0x242 <Air_condition+0x1c>
				}
			}
		}
		else														// if not 
		{
			back();													// back to previous menu
     30c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <back>
     310:	98 cf       	rjmp	.-208    	; 0x242 <Air_condition+0x1c>

00000312 <u8RecieveByte>:
		/*Function Description: function from type u8 take void and return u8
								receive byte from user							*/
		/************************************************************************/
u8 u8RecieveByte()
{
	u8ReturnedValue = USART_u8RecieveByte();			// receive data
     312:	0e 94 56 10 	call	0x20ac	; 0x20ac <USART_u8RecieveByte>
     316:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     31a:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
	u8ReturnedValue = USART_u8RecieveByte();			// receive data
     31e:	0e 94 56 10 	call	0x20ac	; 0x20ac <USART_u8RecieveByte>
     322:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     326:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
	u8ReturnedValue = USART_u8RecieveByte();			// receive data
     32a:	0e 94 56 10 	call	0x20ac	; 0x20ac <USART_u8RecieveByte>
     32e:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     332:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
	return u8ReturnedValue;								// return data receive
}
     336:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     33a:	08 95       	ret

0000033c <Isadmin_Remoted>:
		/*Function Input: no input (void)										*/
		/*Function Description: function from type u8 take void and return u8
					check who login user or admin & return only 0 or 1 (remoted)*/
		/************************************************************************/
u8 Isadmin_Remoted()
{	
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <LogInFlag>
     342:	91 30       	cpi	r25, 0x01	; 1
     344:	09 f0       	breq	.+2      	; 0x348 <Isadmin_Remoted+0xc>
     346:	80 e0       	ldi	r24, 0x00	; 0
	}
	else												// if not
	{
		return 0;										// return 0
	}
}
     348:	08 95       	ret

0000034a <control_Remoted_Rooms>:
		/*Function Description: void function take void and return void
								control rooms lightning (remoted)				*/
		/************************************************************************/
void control_Remoted_Rooms()
{
	USART_vidSendString("R1: Z & z   R2: B & b   R3: F & f   R4: D & d   R5: E & e R6: G & g   0.To Return");// send message to serial terminal
     34a:	8e ea       	ldi	r24, 0xAE	; 174
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     352:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	while(u8ReturnedValue!='0')							// while loop work if choice not equal 0
     356:	bc c0       	rjmp	.+376    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
	{
		u8ReturnedValue = USART_u8RecieveByte();		// receive data
     358:	0e 94 56 10 	call	0x20ac	; 0x20ac <USART_u8RecieveByte>
     35c:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
		USART_vidEnableRXInterrupt();					// enable RX interrupt (finish receiving)
     360:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
		switch(u8ReturnedValue)							// switch choice
     364:	e0 91 1f 07 	lds	r30, 0x071F	; 0x80071f <u8ReturnedValue>
     368:	8e 2f       	mov	r24, r30
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	fc 01       	movw	r30, r24
     36e:	e2 54       	subi	r30, 0x42	; 66
     370:	f1 09       	sbc	r31, r1
     372:	e9 33       	cpi	r30, 0x39	; 57
     374:	f1 05       	cpc	r31, r1
     376:	08 f0       	brcs	.+2      	; 0x37a <control_Remoted_Rooms+0x30>
     378:	ab c0       	rjmp	.+342    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
     37a:	ee 5c       	subi	r30, 0xCE	; 206
     37c:	ff 4f       	sbci	r31, 0xFF	; 255
     37e:	0c 94 26 12 	jmp	0x244c	; 0x244c <__tablejump2__>
		{
			case 'Z' :									// if choice equal to Z
				LCD_vidMoveCursor(1,1);					// move LCD cursor
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString("R1: ON ");		// display string on LCD
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				USART_vidSendByte('Z');					// send message to serial terminal
     392:	8a e5       	ldi	r24, 0x5A	; 90
     394:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     398:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
				break;									// break
     39c:	99 c0       	rjmp	.+306    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			case 'z' :									// if choice equal to z
				LCD_vidMoveCursor(1,1);					// move LCD cursor
     39e:	61 e0       	ldi	r22, 0x01	; 1
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString("R1: OFF");		// display string on LCD
     3a6:	88 e0       	ldi	r24, 0x08	; 8
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				USART_vidSendByte('z');					// send message to serial terminal
     3ae:	8a e7       	ldi	r24, 0x7A	; 122
     3b0:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     3b4:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
				break;									// break
     3b8:	8b c0       	rjmp	.+278    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			case 'B' :									// if choice equal to B
				USART_vidSendByte('B');					// send message to serial terminal
     3ba:	82 e4       	ldi	r24, 0x42	; 66
     3bc:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     3c0:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
				LCD_vidMoveCursor(1,8);					// move LCD cursor
     3c4:	68 e0       	ldi	r22, 0x08	; 8
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString(" R2: ON ");		// display string on LCD
     3cc:	80 e1       	ldi	r24, 0x10	; 16
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				break;									// break
     3d4:	7d c0       	rjmp	.+250    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			case 'b' :									// if choice equal to b
				USART_vidSendByte('b');					// send message to serial terminal
     3d6:	82 e6       	ldi	r24, 0x62	; 98
     3d8:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     3dc:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
				LCD_vidMoveCursor(1,8);					// move LCD cursor
     3e0:	68 e0       	ldi	r22, 0x08	; 8
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString(" R2: OFF");		// display string on LCD
     3e8:	89 e1       	ldi	r24, 0x19	; 25
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				break;									// break 
     3f0:	6f c0       	rjmp	.+222    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			case 'F' :									// if choice equal to F
				USART_vidSendByte('F');					// send message to serial terminal
     3f2:	86 e4       	ldi	r24, 0x46	; 70
     3f4:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     3f8:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
				LCD_vidMoveCursor(2,1);					// move LCD cursor
     3fc:	61 e0       	ldi	r22, 0x01	; 1
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString("R3: ON ");		// display string on LCD
     404:	82 e2       	ldi	r24, 0x22	; 34
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				break;									// break
     40c:	61 c0       	rjmp	.+194    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			case 'f' :									// if choice equal to f
				USART_vidSendByte('f');					// send message to serial terminal
     40e:	86 e6       	ldi	r24, 0x66	; 102
     410:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     414:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
				LCD_vidMoveCursor(2,1);					// move LCD cursor
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString("R3: OFF");		// display string on LCD
     420:	8a e2       	ldi	r24, 0x2A	; 42
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				break;									// break
     428:	53 c0       	rjmp	.+166    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			case 'D' :									// if choice equal to D
				USART_vidSendByte('D');					// send message to serial terminal
     42a:	84 e4       	ldi	r24, 0x44	; 68
     42c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     430:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
				LCD_vidMoveCursor(2,8);					// move LCD cursor
     434:	68 e0       	ldi	r22, 0x08	; 8
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString(" R4: ON ");		// display string on LCD		
     43c:	82 e3       	ldi	r24, 0x32	; 50
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				break;									// break
     444:	45 c0       	rjmp	.+138    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			case 'd' :									// if choice equal to d
				USART_vidSendByte('d');					// send message to serial terminal
     446:	84 e6       	ldi	r24, 0x64	; 100
     448:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     44c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
				LCD_vidMoveCursor(2,8);					// move LCD cursor
     450:	68 e0       	ldi	r22, 0x08	; 8
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString(" R4: OFF");		// display string on LCD
     458:	8b e3       	ldi	r24, 0x3B	; 59
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				break;									// break
     460:	37 c0       	rjmp	.+110    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			case 'E' :									// if choice equal to E
				USART_vidSendByte('E');					// send message to serial terminal
     462:	85 e4       	ldi	r24, 0x45	; 69
     464:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     468:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
				LCD_vidMoveCursor(3,1);					// move LCD cursor
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	83 e0       	ldi	r24, 0x03	; 3
     470:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString("R5: ON ");		// display string on LCD
     474:	84 e4       	ldi	r24, 0x44	; 68
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				break;									// break
     47c:	29 c0       	rjmp	.+82     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			case 'e' :									// if choice equal to e
				USART_vidSendByte('e');					// send message to serial terminal
     47e:	85 e6       	ldi	r24, 0x65	; 101
     480:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     484:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
				LCD_vidMoveCursor(3,1);					// move LCD cursor
     488:	61 e0       	ldi	r22, 0x01	; 1
     48a:	83 e0       	ldi	r24, 0x03	; 3
     48c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString("R5: OFF");		// display string on LCD
     490:	8c e4       	ldi	r24, 0x4C	; 76
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				break;									// break
     498:	1b c0       	rjmp	.+54     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			case 'G' :									// if choice equal to G
				USART_vidSendByte('G');					// send message to serial terminal
     49a:	87 e4       	ldi	r24, 0x47	; 71
     49c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     4a0:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
				LCD_vidMoveCursor(3,8);					// move LCD cursor
     4a4:	68 e0       	ldi	r22, 0x08	; 8
     4a6:	83 e0       	ldi	r24, 0x03	; 3
     4a8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString(" R6: ON ");		// display string on LCD
     4ac:	84 e5       	ldi	r24, 0x54	; 84
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				break;									// break
     4b4:	0d c0       	rjmp	.+26     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			case 'g' :									// if choice equal to g
				USART_vidSendByte('g');					// send message to serial terminal
     4b6:	87 e6       	ldi	r24, 0x67	; 103
     4b8:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     4bc:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
				LCD_vidMoveCursor(3,8);					// move LCD cursor
     4c0:	68 e0       	ldi	r22, 0x08	; 8
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString(" R6: OFF");		// display string on LCD
     4c8:	8d e5       	ldi	r24, 0x5D	; 93
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		/************************************************************************/
void control_Remoted_Rooms()
{
	USART_vidSendString("R1: Z & z   R2: B & b   R3: F & f   R4: D & d   R5: E & e R6: G & g   0.To Return");// send message to serial terminal
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
	while(u8ReturnedValue!='0')							// while loop work if choice not equal 0
     4d0:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     4d4:	80 33       	cpi	r24, 0x30	; 48
     4d6:	09 f0       	breq	.+2      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
     4d8:	3f cf       	rjmp	.-386    	; 0x358 <control_Remoted_Rooms+0xe>
				LCD_vidMoveCursor(3,8);					// move LCD cursor
				LCD_vidDisplayString(" R6: OFF");		// display string on LCD
				break;									// break
		}
	}
	if (Isadmin_Remoted()==1)							// if is admin equal to 1
     4da:	0e 94 9e 01 	call	0x33c	; 0x33c <Isadmin_Remoted>
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	19 f4       	brne	.+6      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
	{
		Admin_Remoted_Menue();							// call function that control admin login
     4e2:	0e 94 bf 02 	call	0x57e	; 0x57e <Admin_Remoted_Menue>
     4e6:	08 95       	ret
	}
	else if(Isadmin_Remoted()==0)						// if not
     4e8:	81 11       	cpse	r24, r1
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
	{
		User_Remoted_Menue();							// call function that control user login
     4ec:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <User_Remoted_Menue>
     4f0:	08 95       	ret

000004f2 <control_home_remoted>:
		/*Function Description: void function take void and return void
								admin control (remoted)							*/
		/************************************************************************/
void control_home_remoted()
{
	USART_vidSendString("1.Opening Door  ");			// send message to serial terminal
     4f2:	86 e6       	ldi	r24, 0x66	; 102
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     4fa:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	USART_vidSendString("2.Room Lighting ");			// send message to serial terminal
     4fe:	87 e7       	ldi	r24, 0x77	; 119
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     506:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	USART_vidSendString("3.Air condition ");			// send message to serial terminal
     50a:	88 e8       	ldi	r24, 0x88	; 136
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     512:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	USART_vidSendString("4.Return        ");			// send message to serial terminal
     516:	89 e9       	ldi	r24, 0x99	; 153
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     51e:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     522:	0e 94 56 10 	call	0x20ac	; 0x20ac <USART_u8RecieveByte>
     526:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     52a:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     52e:	0e 94 56 10 	call	0x20ac	; 0x20ac <USART_u8RecieveByte>
     532:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     536:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     53a:	0e 94 56 10 	call	0x20ac	; 0x20ac <USART_u8RecieveByte>
     53e:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     542:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
	switch(u8ReturnedValue)								// switch choice
     546:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     54a:	82 33       	cpi	r24, 0x32	; 50
     54c:	61 f0       	breq	.+24     	; 0x566 <control_home_remoted+0x74>
     54e:	18 f4       	brcc	.+6      	; 0x556 <control_home_remoted+0x64>
     550:	81 33       	cpi	r24, 0x31	; 49
     552:	31 f0       	breq	.+12     	; 0x560 <control_home_remoted+0x6e>
     554:	11 c0       	rjmp	.+34     	; 0x578 <control_home_remoted+0x86>
     556:	83 33       	cpi	r24, 0x33	; 51
     558:	49 f0       	breq	.+18     	; 0x56c <control_home_remoted+0x7a>
     55a:	84 33       	cpi	r24, 0x34	; 52
     55c:	51 f0       	breq	.+20     	; 0x572 <control_home_remoted+0x80>
     55e:	0c c0       	rjmp	.+24     	; 0x578 <control_home_remoted+0x86>
	{
		case '1':										// if choice equal 1
			open_door();								// call function that control door 
     560:	0e 94 3c 06 	call	0xc78	; 0xc78 <open_door>
			break;										// break
     564:	08 95       	ret
		case '2':										// if choice equal 2
			control_Remoted_Rooms();					// call function that control rooms 
     566:	0e 94 a5 01 	call	0x34a	; 0x34a <control_Remoted_Rooms>
			break;										// break
     56a:	08 95       	ret
		case '3':										// if choice equal 1
			Air_Condition_Remoted();					// call function that control air condition
     56c:	0e 94 10 05 	call	0xa20	; 0xa20 <Air_Condition_Remoted>
			break;										// break
     570:	08 95       	ret
		case '4':										// if choice equal 1
			Admin_Remoted_Menue();						// call function that display admin control menu
     572:	0e 94 bf 02 	call	0x57e	; 0x57e <Admin_Remoted_Menue>
			break;										// break
     576:	08 95       	ret
		default:										// default
			control_home_remoted();						// call function that return admin menu
     578:	0e 94 79 02 	call	0x4f2	; 0x4f2 <control_home_remoted>
     57c:	08 95       	ret

0000057e <Admin_Remoted_Menue>:
		/*Function Description: void function take void and return void
								display admin control menu (remoted)			*/
		/************************************************************************/
void Admin_Remoted_Menue()
{
	USART_vidSendString("1.Control Home       ");		// send message to serial terminal
     57e:	8a ea       	ldi	r24, 0xAA	; 170
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     586:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	USART_vidSendString("2.Add user           ");		// send message to serial terminal
     58a:	80 ec       	ldi	r24, 0xC0	; 192
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     592:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	USART_vidSendString("3.Remove user        ");		// send message to serial terminal
     596:	86 ed       	ldi	r24, 0xD6	; 214
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     59e:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	USART_vidSendString("4.Log out            ");		// send message to serial terminal
     5a2:	8c ee       	ldi	r24, 0xEC	; 236
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     5aa:	0e 94 56 10 	call	0x20ac	; 0x20ac <USART_u8RecieveByte>
     5ae:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     5b2:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     5b6:	0e 94 56 10 	call	0x20ac	; 0x20ac <USART_u8RecieveByte>
     5ba:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)		
     5be:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     5c2:	0e 94 56 10 	call	0x20ac	; 0x20ac <USART_u8RecieveByte>
     5c6:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     5ca:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
	switch(u8ReturnedValue)								// switch choice
     5ce:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     5d2:	82 33       	cpi	r24, 0x32	; 50
     5d4:	61 f0       	breq	.+24     	; 0x5ee <Admin_Remoted_Menue+0x70>
     5d6:	18 f4       	brcc	.+6      	; 0x5de <Admin_Remoted_Menue+0x60>
     5d8:	81 33       	cpi	r24, 0x31	; 49
     5da:	31 f0       	breq	.+12     	; 0x5e8 <Admin_Remoted_Menue+0x6a>
     5dc:	08 95       	ret
     5de:	83 33       	cpi	r24, 0x33	; 51
     5e0:	49 f0       	breq	.+18     	; 0x5f4 <Admin_Remoted_Menue+0x76>
     5e2:	84 33       	cpi	r24, 0x34	; 52
     5e4:	51 f0       	breq	.+20     	; 0x5fa <Admin_Remoted_Menue+0x7c>
     5e6:	08 95       	ret
	{
		case '1':										// if choice equal 1
			control_home_remoted();						// call function that control admin menu
     5e8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <control_home_remoted>
			break;										// break
     5ec:	08 95       	ret
		case '2':										// if choice equal 2
			Add_Remoted_User();							// call function that control user menu
     5ee:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Add_Remoted_User>
			break;										// break
     5f2:	08 95       	ret
		case '3':										// if choice equal 3
			Remove_Remoted_User();						// call function that control user menu
     5f4:	0e 94 15 06 	call	0xc2a	; 0xc2a <Remove_Remoted_User>
			break;										// break
     5f8:	08 95       	ret
		case '4':										// if choice equal 4
			LogOut_Remotly();							// call function that logout from system
     5fa:	0e 94 de 03 	call	0x7bc	; 0x7bc <LogOut_Remotly>
     5fe:	08 95       	ret

00000600 <check_admin_pass_remoted>:
		/*Function Description: void function take void and return void
								check username & pass for admin (remoted)		*/
		/************************************************************************/
void check_admin_pass_remoted()
{
	read_EEPROM(0x0);									// read EEPROM
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <read_EEPROM>
     606:	ea e2       	ldi	r30, 0x2A	; 42
     608:	f7 e0       	ldi	r31, 0x07	; 7
     60a:	a6 e2       	ldi	r26, 0x26	; 38
     60c:	b7 e0       	ldi	r27, 0x07	; 7
     60e:	2e e2       	ldi	r18, 0x2E	; 46
     610:	37 e0       	ldi	r19, 0x07	; 7
     612:	60 e0       	ldi	r22, 0x00	; 0
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
	{
		if (user[i] == EEPROM_user[i])					// check if two value are equal or not
     614:	91 91       	ld	r25, Z+
     616:	8d 91       	ld	r24, X+
     618:	98 13       	cpse	r25, r24
     61a:	01 c0       	rjmp	.+2      	; 0x61e <check_admin_pass_remoted+0x1e>
		{
			check_user++;								// if that increase the check variable by one
     61c:	6f 5f       	subi	r22, 0xFF	; 255
		/************************************************************************/
void check_admin_pass_remoted()
{
	read_EEPROM(0x0);									// read EEPROM
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     61e:	e2 17       	cp	r30, r18
     620:	f3 07       	cpc	r31, r19
     622:	c1 f7       	brne	.-16     	; 0x614 <check_admin_pass_remoted+0x14>
     624:	60 93 21 07 	sts	0x0721, r22	; 0x800721 <check_user>
     628:	e2 e2       	ldi	r30, 0x22	; 34
     62a:	f7 e0       	ldi	r31, 0x07	; 7
     62c:	a3 e3       	ldi	r26, 0x33	; 51
     62e:	b7 e0       	ldi	r27, 0x07	; 7
     630:	46 e2       	ldi	r20, 0x26	; 38
     632:	57 e0       	ldi	r21, 0x07	; 7
     634:	20 e0       	ldi	r18, 0x00	; 0
		}
	}
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
	{
		if (pass[i] == EEPROM_pass[i])					// check if two value are equal or not
     636:	91 91       	ld	r25, Z+
     638:	8d 91       	ld	r24, X+
     63a:	98 13       	cpse	r25, r24
     63c:	01 c0       	rjmp	.+2      	; 0x640 <check_admin_pass_remoted+0x40>
		{
			check++;									// if that increase the check variable by one
     63e:	2f 5f       	subi	r18, 0xFF	; 255
		else											// if not
		{
		}
	}
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     640:	e4 17       	cp	r30, r20
     642:	f5 07       	cpc	r31, r21
     644:	c1 f7       	brne	.-16     	; 0x636 <check_admin_pass_remoted+0x36>
     646:	20 93 32 07 	sts	0x0732, r18	; 0x800732 <check>
		}
		else											// if not
		{
		}
	}
	if(check == 4 && check_user == 4)					// check if check variable equal 4 or not (correct pass)
     64a:	24 30       	cpi	r18, 0x04	; 4
     64c:	c9 f4       	brne	.+50     	; 0x680 <check_admin_pass_remoted+0x80>
     64e:	64 30       	cpi	r22, 0x04	; 4
     650:	b9 f4       	brne	.+46     	; 0x680 <check_admin_pass_remoted+0x80>
	{
		USART_vidSendString("Correct Password ");// send message to serial terminal
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     65a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
		LED_vidTurnOn(GPIOD,PIN3);						// turn on led
     65e:	63 e0       	ldi	r22, 0x03	; 3
     660:	83 e0       	ldi	r24, 0x03	; 3
     662:	0e 94 95 0b 	call	0x172a	; 0x172a <LED_vidTurnOn>
		LED_vidTurnOff(GPIOD,PIN4);						// turn off led
     666:	64 e0       	ldi	r22, 0x04	; 4
     668:	83 e0       	ldi	r24, 0x03	; 3
     66a:	0e 94 99 0b 	call	0x1732	; 0x1732 <LED_vidTurnOff>
		LED_vidTurnOff(GPIOB,PIN5);						// turn off led
     66e:	65 e0       	ldi	r22, 0x05	; 5
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	0e 94 99 0b 	call	0x1732	; 0x1732 <LED_vidTurnOff>
		wrong_pass_count = 0;							// reset wrong_pass_count variable by reinitialize by 0	
     676:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <__data_end>
		Admin_Remoted_Menue();							// call function that control admin menu
     67a:	0e 94 bf 02 	call	0x57e	; 0x57e <Admin_Remoted_Menue>
     67e:	08 95       	ret
	}
	else												// if not
	{
		wrong_pass_count++;								// increase wrong_pass_count variable by one
     680:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <__data_end>
     684:	8f 5f       	subi	r24, 0xFF	; 255
     686:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <__data_end>
		USART_vidSendString("Password Wrong ");			// send message to serial terminal
     68a:	84 e1       	ldi	r24, 0x14	; 20
     68c:	92 e0       	ldi	r25, 0x02	; 2
     68e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     692:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
		if (wrong_pass_count == 1)						// if wrong pass counter equal to 1
     696:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <__data_end>
     69a:	81 30       	cpi	r24, 0x01	; 1
     69c:	29 f4       	brne	.+10     	; 0x6a8 <check_admin_pass_remoted+0xa8>
		USART_vidSendString(" 2 ");						// send message to serial terminal
     69e:	84 e2       	ldi	r24, 0x24	; 36
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
     6a6:	0d c0       	rjmp	.+26     	; 0x6c2 <check_admin_pass_remoted+0xc2>
		else if (wrong_pass_count == 2)					// if wrong pass counter equal to 2
     6a8:	82 30       	cpi	r24, 0x02	; 2
     6aa:	29 f4       	brne	.+10     	; 0x6b6 <check_admin_pass_remoted+0xb6>
		USART_vidSendString(" 1 ");						// send message to serial terminal
     6ac:	88 e2       	ldi	r24, 0x28	; 40
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
     6b4:	06 c0       	rjmp	.+12     	; 0x6c2 <check_admin_pass_remoted+0xc2>
		else if (wrong_pass_count == 3)					// if wrong pass counter equal to 3
     6b6:	83 30       	cpi	r24, 0x03	; 3
     6b8:	21 f4       	brne	.+8      	; 0x6c2 <check_admin_pass_remoted+0xc2>
		USART_vidSendString(" 0 ");						// send message to serial terminal
     6ba:	8c e2       	ldi	r24, 0x2C	; 44
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidSendString("tries remains ");// send message to serial terminal
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	93 e0       	ldi	r25, 0x03	; 3
     6c6:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     6ca:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
		if (wrong_pass_count == 3)						// if wrong pass counter equal to 3
     6ce:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <__data_end>
     6d2:	83 30       	cpi	r24, 0x03	; 3
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <check_admin_pass_remoted+0xd8>
     6d6:	40 c0       	rjmp	.+128    	; 0x758 <check_admin_pass_remoted+0x158>
		{
			wrong_pass_count=0;							// set wrong pass counter to 0
     6d8:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <__data_end>
			USART_vidSendString("Lock mode!! ");		// send message to serial terminal
     6dc:	80 e3       	ldi	r24, 0x30	; 48
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     6e4:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
			USART_vidSendString("try again after 20 second ");// send message to serial terminal
     6e8:	8d e3       	ldi	r24, 0x3D	; 61
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     6f0:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
			
			LED_vidTurnOn(GPIOB, PIN5);					// turn on led
     6f4:	65 e0       	ldi	r22, 0x05	; 5
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	0e 94 95 0b 	call	0x172a	; 0x172a <LED_vidTurnOn>
			LED_vidTurnOff(GPIOD, PIN3);				// turn off led
     6fc:	63 e0       	ldi	r22, 0x03	; 3
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	0e 94 99 0b 	call	0x1732	; 0x1732 <LED_vidTurnOff>
			LED_vidTurnOff(GPIOD, PIN4);				// turn of led
     704:	64 e0       	ldi	r22, 0x04	; 4
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	0e 94 99 0b 	call	0x1732	; 0x1732 <LED_vidTurnOff>
			DIO_vidWritePin(GPIOD, PIN7, HIGH);			// output high on pin (turn on alarm)
     70c:	41 e0       	ldi	r20, 0x01	; 1
     70e:	67 e0       	ldi	r22, 0x07	; 7
     710:	83 e0       	ldi	r24, 0x03	; 3
     712:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
			LCD_vidMoveCursor(4,9);
     716:	69 e0       	ldi	r22, 0x09	; 9
     718:	84 e0       	ldi	r24, 0x04	; 4
     71a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
			LCD_vidDisplayString("AL: ON ");			// display string on LCD
     71e:	88 e5       	ldi	r24, 0x58	; 88
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
     726:	2a ea       	ldi	r18, 0xAA	; 170
     728:	36 ee       	ldi	r19, 0xE6	; 230
     72a:	86 e9       	ldi	r24, 0x96	; 150
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	21 50       	subi	r18, 0x01	; 1
     730:	30 40       	sbci	r19, 0x00	; 0
     732:	80 40       	sbci	r24, 0x00	; 0
     734:	90 40       	sbci	r25, 0x00	; 0
     736:	d9 f7       	brne	.-10     	; 0x72e <check_admin_pass_remoted+0x12e>
     738:	00 00       	nop
			_delay_ms(20000);							// wait for 20 second
			DIO_vidWritePin(GPIOD, PIN7, LOW);			// output low on pin (turn off alarm)
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	67 e0       	ldi	r22, 0x07	; 7
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
			LCD_vidMoveCursor(4,9);
     744:	69 e0       	ldi	r22, 0x09	; 9
     746:	84 e0       	ldi	r24, 0x04	; 4
     748:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
			LCD_vidDisplayString("AL: OFF");			// display string on LCD
     74c:	80 e6       	ldi	r24, 0x60	; 96
     74e:	92 e0       	ldi	r25, 0x02	; 2
     750:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
			Bluetooth_Control();
     754:	0e 94 56 05 	call	0xaac	; 0xaac <Bluetooth_Control>
		}
		Admin_Remoted_Login();							// call function that control admin login
     758:	0e 94 af 03 	call	0x75e	; 0x75e <Admin_Remoted_Login>
     75c:	08 95       	ret

0000075e <Admin_Remoted_Login>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								scan username & pass from admin then check it (remoted)*/
		/************************************************************************/
void Admin_Remoted_Login()
{
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
	USART_vidSendString("Enter UserName: ");			// send message to serial terminal
     766:	88 e6       	ldi	r24, 0x68	; 104
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     76e:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
     772:	ca e2       	ldi	r28, 0x2A	; 42
     774:	d7 e0       	ldi	r29, 0x07	; 7
     776:	0e e2       	ldi	r16, 0x2E	; 46
     778:	17 e0       	ldi	r17, 0x07	; 7
	for (int i=0;i<4;i++)
	{
		u8RecieveByte();								// receive data
     77a:	0e 94 89 01 	call	0x312	; 0x312 <u8RecieveByte>
		user[i]=u8ReturnedValue;						// store data in array
     77e:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     782:	89 93       	st	Y+, r24
		/************************************************************************/
void Admin_Remoted_Login()
{
	USART_vidSendString("Enter UserName: ");			// send message to serial terminal
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
	for (int i=0;i<4;i++)
     784:	c0 17       	cp	r28, r16
     786:	d1 07       	cpc	r29, r17
     788:	c1 f7       	brne	.-16     	; 0x77a <Admin_Remoted_Login+0x1c>
	{
		u8RecieveByte();								// receive data
		user[i]=u8ReturnedValue;						// store data in array
	}
	USART_vidSendString("Enter Password ");				// send message to serial terminal
     78a:	89 e7       	ldi	r24, 0x79	; 121
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)	
     792:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
     796:	c2 e2       	ldi	r28, 0x22	; 34
     798:	d7 e0       	ldi	r29, 0x07	; 7
     79a:	06 e2       	ldi	r16, 0x26	; 38
     79c:	17 e0       	ldi	r17, 0x07	; 7
	for (int i=0;i<4;i++)
	{
		u8RecieveByte();								// receive data
     79e:	0e 94 89 01 	call	0x312	; 0x312 <u8RecieveByte>
		pass[i]=u8ReturnedValue;						// store data in array
     7a2:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     7a6:	89 93       	st	Y+, r24
		u8RecieveByte();								// receive data
		user[i]=u8ReturnedValue;						// store data in array
	}
	USART_vidSendString("Enter Password ");				// send message to serial terminal
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)	
	for (int i=0;i<4;i++)
     7a8:	c0 17       	cp	r28, r16
     7aa:	d1 07       	cpc	r29, r17
     7ac:	c1 f7       	brne	.-16     	; 0x79e <Admin_Remoted_Login+0x40>
	{
		u8RecieveByte();								// receive data
		pass[i]=u8ReturnedValue;						// store data in array
	}
	check_admin_pass_remoted();							// call function that check username & pass for admin
     7ae:	0e 94 00 03 	call	0x600	; 0x600 <check_admin_pass_remoted>
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	08 95       	ret

000007bc <LogOut_Remotly>:
		/*Function Description: void function take void and return void
								logout from the system and return to start screen (remoted)*/
		/************************************************************************/
void LogOut_Remotly()
{
	USART_vidSendString("press A for Admin Login & U for User login");// send message to serial terminal
     7bc:	89 e8       	ldi	r24, 0x89	; 137
     7be:	92 e0       	ldi	r25, 0x02	; 2
     7c0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)					
     7c4:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     7c8:	0e 94 89 01 	call	0x312	; 0x312 <u8RecieveByte>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     7cc:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
	if (u8ReturnedValue=='A')							// if choice equal A
     7d0:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     7d4:	81 34       	cpi	r24, 0x41	; 65
     7d6:	31 f4       	brne	.+12     	; 0x7e4 <LogOut_Remotly+0x28>
	{
		LogInFlag=1;									// set login flag equal to 1
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <LogInFlag>
		Isadmin_Remoted();								// call function that know who is login
		Admin_Remoted_Login();							// call function that control admin login
     7de:	0e 94 af 03 	call	0x75e	; 0x75e <Admin_Remoted_Login>
     7e2:	08 95       	ret
	}
	else if (u8ReturnedValue=='U')						// if choice equal to U
     7e4:	85 35       	cpi	r24, 0x55	; 85
     7e6:	29 f4       	brne	.+10     	; 0x7f2 <LogOut_Remotly+0x36>
	{
		LogInFlag=0;									// set login flag equal to 0
     7e8:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <LogInFlag>
		Isadmin_Remoted();								// call function that know who is login
		User_Remoted_Login();							// call function that control user login
     7ec:	0e 94 1a 04 	call	0x834	; 0x834 <User_Remoted_Login>
     7f0:	08 95       	ret
	}
	else												// if not
	{	
		LogOut_Remotly();								// call function that logout from system
     7f2:	0e 94 de 03 	call	0x7bc	; 0x7bc <LogOut_Remotly>
     7f6:	08 95       	ret

000007f8 <User_Remoted_Menue>:
		/*Function Description: void function take void and return void
								display user control menu (remoted)				*/
		/************************************************************************/
void User_Remoted_Menue()
{
	USART_vidSendString("1.Room Lighting   2.Air condition   3.LogOut");// send message to serial terminal
     7f8:	84 eb       	ldi	r24, 0xB4	; 180
     7fa:	92 e0       	ldi	r25, 0x02	; 2
     7fc:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     800:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     804:	0e 94 89 01 	call	0x312	; 0x312 <u8RecieveByte>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     808:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
	switch(u8ReturnedValue)								// switch choice
     80c:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     810:	82 33       	cpi	r24, 0x32	; 50
     812:	39 f0       	breq	.+14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     814:	83 33       	cpi	r24, 0x33	; 51
     816:	41 f0       	breq	.+16     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     818:	81 33       	cpi	r24, 0x31	; 49
     81a:	49 f4       	brne	.+18     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
	{
		case '1' :										// if choice equal 1
			control_Remoted_Rooms();					// call function that control rooms
     81c:	0e 94 a5 01 	call	0x34a	; 0x34a <control_Remoted_Rooms>
			break;										// break
     820:	08 95       	ret
		case '2' :										// if choice equal 2
			Air_Condition_Remoted();					// call function that control air condition
     822:	0e 94 10 05 	call	0xa20	; 0xa20 <Air_Condition_Remoted>
			break;										// break
     826:	08 95       	ret
		case '3' :										// if choice equal 3
			LogOut_Remotly();							// call function that logout from system
     828:	0e 94 de 03 	call	0x7bc	; 0x7bc <LogOut_Remotly>
			break;										// break
     82c:	08 95       	ret
		default:										// default
			User_Remoted_Menue();						// call function that display user control menu
     82e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <User_Remoted_Menue>
     832:	08 95       	ret

00000834 <User_Remoted_Login>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								scan username & pass from user then check it (remoted)*/
		/************************************************************************/
void User_Remoted_Login()
{
     834:	9f 92       	push	r9
     836:	af 92       	push	r10
     838:	bf 92       	push	r11
     83a:	cf 92       	push	r12
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
	u8 UserId;											// declare user id variable
	USART_vidSendString("Enter User Id ");				// send message to serial terminal
     84a:	81 ee       	ldi	r24, 0xE1	; 225
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     852:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     856:	0e 94 89 01 	call	0x312	; 0x312 <u8RecieveByte>
	UserId=u8ReturnedValue;								// set user id to entered id
     85a:	90 90 1f 07 	lds	r9, 0x071F	; 0x80071f <u8ReturnedValue>
	USART_vidSendString("Enter UserName ");				// send message to serial terminal
     85e:	80 ef       	ldi	r24, 0xF0	; 240
     860:	92 e0       	ldi	r25, 0x02	; 2
     862:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     866:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
     86a:	0a e2       	ldi	r16, 0x2A	; 42
     86c:	17 e0       	ldi	r17, 0x07	; 7
     86e:	0f 2e       	mov	r0, r31
     870:	fe e2       	ldi	r31, 0x2E	; 46
     872:	cf 2e       	mov	r12, r31
     874:	f7 e0       	ldi	r31, 0x07	; 7
     876:	df 2e       	mov	r13, r31
     878:	f0 2d       	mov	r31, r0
     87a:	e8 01       	movw	r28, r16
	for (int i=0;i<4;i++)
	{
		u8RecieveByte();								// receive data
     87c:	0e 94 89 01 	call	0x312	; 0x312 <u8RecieveByte>
		user[i]=u8ReturnedValue;						// store data in array
     880:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     884:	89 93       	st	Y+, r24
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
	u8RecieveByte();									// receive data
	UserId=u8ReturnedValue;								// set user id to entered id
	USART_vidSendString("Enter UserName ");				// send message to serial terminal
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
	for (int i=0;i<4;i++)
     886:	cc 15       	cp	r28, r12
     888:	dd 05       	cpc	r29, r13
     88a:	c1 f7       	brne	.-16     	; 0x87c <__stack+0x1d>
	{
		u8RecieveByte();								// receive data
		user[i]=u8ReturnedValue;						// store data in array
	}
	USART_vidSendString("Enter Password ");				// send message to serial terminal
     88c:	89 e7       	ldi	r24, 0x79	; 121
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     894:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
     898:	c2 e2       	ldi	r28, 0x22	; 34
     89a:	d7 e0       	ldi	r29, 0x07	; 7
     89c:	0f 2e       	mov	r0, r31
     89e:	f6 e2       	ldi	r31, 0x26	; 38
     8a0:	af 2e       	mov	r10, r31
     8a2:	f7 e0       	ldi	r31, 0x07	; 7
     8a4:	bf 2e       	mov	r11, r31
     8a6:	f0 2d       	mov	r31, r0
     8a8:	7e 01       	movw	r14, r28
	for (int i=0;i<4;i++)
	{
		u8RecieveByte();								// receive data
     8aa:	0e 94 89 01 	call	0x312	; 0x312 <u8RecieveByte>
		pass[i]=u8ReturnedValue;						// store data in array
     8ae:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     8b2:	d7 01       	movw	r26, r14
     8b4:	8d 93       	st	X+, r24
     8b6:	7d 01       	movw	r14, r26
		u8RecieveByte();								// receive data
		user[i]=u8ReturnedValue;						// store data in array
	}
	USART_vidSendString("Enter Password ");				// send message to serial terminal
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
	for (int i=0;i<4;i++)
     8b8:	aa 15       	cp	r26, r10
     8ba:	bb 05       	cpc	r27, r11
     8bc:	b1 f7       	brne	.-20     	; 0x8aa <__stack+0x4b>
	{
		u8RecieveByte();								// receive data
		pass[i]=u8ReturnedValue;						// store data in array
	}
	read_EEPROM(UserId);								// read user from EEPROM
     8be:	89 2d       	mov	r24, r9
     8c0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <read_EEPROM>
     8c4:	e6 e2       	ldi	r30, 0x26	; 38
     8c6:	f7 e0       	ldi	r31, 0x07	; 7
     8c8:	30 e0       	ldi	r19, 0x00	; 0
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
	{
		if (user[i] == EEPROM_user[i])					// check if two value are equal or not
     8ca:	d8 01       	movw	r26, r16
     8cc:	9d 91       	ld	r25, X+
     8ce:	8d 01       	movw	r16, r26
     8d0:	81 91       	ld	r24, Z+
     8d2:	98 13       	cpse	r25, r24
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <__stack+0x79>
		{
			check_user++;								// if that increase the check variable by one
     8d6:	3f 5f       	subi	r19, 0xFF	; 255
		u8RecieveByte();								// receive data
		pass[i]=u8ReturnedValue;						// store data in array
	}
	read_EEPROM(UserId);								// read user from EEPROM
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     8d8:	0c 15       	cp	r16, r12
     8da:	1d 05       	cpc	r17, r13
     8dc:	b1 f7       	brne	.-20     	; 0x8ca <__stack+0x6b>
     8de:	30 93 21 07 	sts	0x0721, r19	; 0x800721 <check_user>
     8e2:	e3 e3       	ldi	r30, 0x33	; 51
     8e4:	f7 e0       	ldi	r31, 0x07	; 7
     8e6:	20 e0       	ldi	r18, 0x00	; 0
		}
	}
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
	{
		if (pass[i] == EEPROM_pass[i])					// check if two value are equal or not
     8e8:	99 91       	ld	r25, Y+
     8ea:	81 91       	ld	r24, Z+
     8ec:	98 13       	cpse	r25, r24
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__stack+0x93>
		{
			check++;									// if that increase the check variable by one
     8f0:	2f 5f       	subi	r18, 0xFF	; 255
		else											// if not
		{
		}
	}
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     8f2:	ca 15       	cp	r28, r10
     8f4:	db 05       	cpc	r29, r11
     8f6:	c1 f7       	brne	.-16     	; 0x8e8 <__stack+0x89>
     8f8:	20 93 32 07 	sts	0x0732, r18	; 0x800732 <check>
		}
		else											// if not
		{
		}
	}
	if(check == 4 && check_user == 4)					// check if check variable equal 4 or not (correct pass)
     8fc:	24 30       	cpi	r18, 0x04	; 4
     8fe:	c9 f4       	brne	.+50     	; 0x932 <__stack+0xd3>
     900:	34 30       	cpi	r19, 0x04	; 4
     902:	b9 f4       	brne	.+46     	; 0x932 <__stack+0xd3>
	{
		USART_vidSendString("Correct Password ");		// send message to serial terminal
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     90c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
		LED_vidTurnOn(GPIOD,PIN4);						// turn on the led
     910:	64 e0       	ldi	r22, 0x04	; 4
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	0e 94 95 0b 	call	0x172a	; 0x172a <LED_vidTurnOn>
		LED_vidTurnOff(GPIOD,PIN3);						// turn off the led
     918:	63 e0       	ldi	r22, 0x03	; 3
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	0e 94 99 0b 	call	0x1732	; 0x1732 <LED_vidTurnOff>
		LED_vidTurnOff(GPIOB,PIN5);						// turn off the led
     920:	65 e0       	ldi	r22, 0x05	; 5
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	0e 94 99 0b 	call	0x1732	; 0x1732 <LED_vidTurnOff>
		wrong_pass_count = 0;							// set wrong pass counter to 0
     928:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <__data_end>
		User_Remoted_Menue();							// reset wrong_pass_count variable by reinitialize by 0
     92c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <User_Remoted_Menue>
     930:	6b c0       	rjmp	.+214    	; 0xa08 <__stack+0x1a9>
	}
	else												// if not
	{ 
		wrong_pass_count++;								// increase wrong_pass_count variable by one
     932:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <__data_end>
     936:	8f 5f       	subi	r24, 0xFF	; 255
     938:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <__data_end>
		USART_vidSendString("Password Wrong ");			// send message to serial terminal
     93c:	84 e1       	ldi	r24, 0x14	; 20
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     944:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
		if (wrong_pass_count == 1)						// if wrong pass counter equal to 1
     948:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <__data_end>
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	29 f4       	brne	.+10     	; 0x95a <__stack+0xfb>
		USART_vidSendString(" 2 ");						// send message to serial terminal
     950:	84 e2       	ldi	r24, 0x24	; 36
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
     958:	0d c0       	rjmp	.+26     	; 0x974 <__stack+0x115>
		else if (wrong_pass_count == 2)					// if wrong pass counter equal to 2
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	29 f4       	brne	.+10     	; 0x968 <__stack+0x109>
		USART_vidSendString(" 1 ");						// send message to serial terminal
     95e:	88 e2       	ldi	r24, 0x28	; 40
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
     966:	06 c0       	rjmp	.+12     	; 0x974 <__stack+0x115>
		else if (wrong_pass_count == 3)					// if wrong pass counter equal to 3
     968:	83 30       	cpi	r24, 0x03	; 3
     96a:	21 f4       	brne	.+8      	; 0x974 <__stack+0x115>
		USART_vidSendString(" 0 ");						// send message to serial terminal
     96c:	8c e2       	ldi	r24, 0x2C	; 44
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidSendString(" tries remains ");			// send message to serial terminal
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     97c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
		if (wrong_pass_count == 3)						// if wrong pass counter equal to 3
     980:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <__data_end>
     984:	83 30       	cpi	r24, 0x03	; 3
     986:	f1 f5       	brne	.+124    	; 0xa04 <__stack+0x1a5>
		{
			wrong_pass_count=0;							// set wrong pass counter to 0
     988:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <__data_end>
			USART_vidSendString("Lock mode!! ");		// send message to serial terminal
     98c:	80 e3       	ldi	r24, 0x30	; 48
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     994:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
			USART_vidSendString("try again after 20 second ");// send message to serial terminal
     998:	8d e3       	ldi	r24, 0x3D	; 61
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     9a0:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>

			LED_vidTurnOn(GPIOB, PIN5);					// turn on the led
     9a4:	65 e0       	ldi	r22, 0x05	; 5
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	0e 94 95 0b 	call	0x172a	; 0x172a <LED_vidTurnOn>
			LED_vidTurnOff(GPIOD, PIN3);				// turn off led
     9ac:	63 e0       	ldi	r22, 0x03	; 3
     9ae:	83 e0       	ldi	r24, 0x03	; 3
     9b0:	0e 94 99 0b 	call	0x1732	; 0x1732 <LED_vidTurnOff>
			LED_vidTurnOff(GPIOD, PIN4);				// turn off led
     9b4:	64 e0       	ldi	r22, 0x04	; 4
     9b6:	83 e0       	ldi	r24, 0x03	; 3
     9b8:	0e 94 99 0b 	call	0x1732	; 0x1732 <LED_vidTurnOff>
			DIO_vidWritePin(GPIOD, PIN7, HIGH);			// output high on pin (turn on alarm)
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	67 e0       	ldi	r22, 0x07	; 7
     9c0:	83 e0       	ldi	r24, 0x03	; 3
     9c2:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
			LCD_vidMoveCursor(4,10);
     9c6:	6a e0       	ldi	r22, 0x0A	; 10
     9c8:	84 e0       	ldi	r24, 0x04	; 4
     9ca:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
			LCD_vidDisplayString("AL: ON ");			// display string on LCD
     9ce:	88 e5       	ldi	r24, 0x58	; 88
     9d0:	92 e0       	ldi	r25, 0x02	; 2
     9d2:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
     9d6:	ba ea       	ldi	r27, 0xAA	; 170
     9d8:	e6 ee       	ldi	r30, 0xE6	; 230
     9da:	f6 e9       	ldi	r31, 0x96	; 150
     9dc:	21 e0       	ldi	r18, 0x01	; 1
     9de:	b1 50       	subi	r27, 0x01	; 1
     9e0:	e0 40       	sbci	r30, 0x00	; 0
     9e2:	f0 40       	sbci	r31, 0x00	; 0
     9e4:	20 40       	sbci	r18, 0x00	; 0
     9e6:	d9 f7       	brne	.-10     	; 0x9de <__stack+0x17f>
     9e8:	00 00       	nop
			_delay_ms(20000);							// wait for 20 second
			DIO_vidWritePin(GPIOD, PIN7, LOW);			// output low on pin (turn off alarm)
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	67 e0       	ldi	r22, 0x07	; 7
     9ee:	83 e0       	ldi	r24, 0x03	; 3
     9f0:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
			LCD_vidMoveCursor(4,10);
     9f4:	6a e0       	ldi	r22, 0x0A	; 10
     9f6:	84 e0       	ldi	r24, 0x04	; 4
     9f8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
			LCD_vidDisplayString("AL: OFF");			// display string on LCD
     9fc:	80 e6       	ldi	r24, 0x60	; 96
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		}
		User_Remoted_Login();							// call function that control user login
     a04:	0e 94 1a 04 	call	0x834	; 0x834 <User_Remoted_Login>
	}
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	df 90       	pop	r13
     a16:	cf 90       	pop	r12
     a18:	bf 90       	pop	r11
     a1a:	af 90       	pop	r10
     a1c:	9f 90       	pop	r9
     a1e:	08 95       	ret

00000a20 <Air_Condition_Remoted>:
		/*Function Description: void function take void and return void
								control air condition	(remoted)				*/
		/************************************************************************/
void Air_Condition_Remoted()
{
	DC_Motor_vidInit();									// initialize DC Motor
     a20:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DC_Motor_vidInit>
	u8 temp,pre=1;										// declare two variable & initialize both with 1
	LM35_vidInit(ADC_CH0);								// initialize temperature sensor
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	0e 94 9d 0b 	call	0x173a	; 0x173a <LM35_vidInit>
								control air condition	(remoted)				*/
		/************************************************************************/
void Air_Condition_Remoted()
{
	DC_Motor_vidInit();									// initialize DC Motor
	u8 temp,pre=1;										// declare two variable & initialize both with 1
     a2a:	d1 e0       	ldi	r29, 0x01	; 1
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <Air_Condition_Remoted+0x10>
	LM35_vidInit(ADC_CH0);								// initialize temperature sensor
	while (1)											// infinite while loop
	{
		temp = LM35_u8Read();							// read temperature
     a2e:	dc 2f       	mov	r29, r28
     a30:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LM35_u8Read>
     a34:	c8 2f       	mov	r28, r24
		if(temp != pre)									// if temperature not equal to previous one
     a36:	8d 17       	cp	r24, r29
     a38:	d9 f3       	breq	.-10     	; 0xa30 <Air_Condition_Remoted+0x10>
		{
			pre = temp;									// set previous temperature to recent one
			if(temp >= 28)								// if temperature greater than or equal to 28
     a3a:	8c 31       	cpi	r24, 0x1C	; 28
     a3c:	a8 f0       	brcs	.+42     	; 0xa68 <Air_Condition_Remoted+0x48>
			{
				USART_vidSendString("Air condition ON                                                  ");// send message to serial terminal
     a3e:	80 e1       	ldi	r24, 0x10	; 16
     a40:	93 e0       	ldi	r25, 0x03	; 3
     a42:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     a46:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
				LCD_vidMoveCursor(4,1);					// move LCD cursor
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	84 e0       	ldi	r24, 0x04	; 4
     a4e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString("Air:ON ");		// display string on LCD
     a52:	83 e5       	ldi	r24, 0x53	; 83
     a54:	93 e0       	ldi	r25, 0x03	; 3
     a56:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				LED_vidTurnOn(GPIOD, PIN2);				// turn on led
     a5a:	62 e0       	ldi	r22, 0x02	; 2
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	0e 94 95 0b 	call	0x172a	; 0x172a <LED_vidTurnOn>
				DC_Motor_vidTurnOn();					// turn on DC Motor
     a62:	0e 94 67 07 	call	0xece	; 0xece <DC_Motor_vidTurnOn>
     a66:	16 c0       	rjmp	.+44     	; 0xa94 <Air_Condition_Remoted+0x74>
			}
			else if(temp <= 21 )
     a68:	86 31       	cpi	r24, 0x16	; 22
     a6a:	a0 f4       	brcc	.+40     	; 0xa94 <Air_Condition_Remoted+0x74>
			{
				USART_vidSendString("Air condition off ");// send message to serial terminal
     a6c:	8b e5       	ldi	r24, 0x5B	; 91
     a6e:	93 e0       	ldi	r25, 0x03	; 3
     a70:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     a74:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
				LCD_vidMoveCursor(4,1);					// move LCD cursor
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	84 e0       	ldi	r24, 0x04	; 4
     a7c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString("Air:OFF ");		// display string on LCD
     a80:	8e e6       	ldi	r24, 0x6E	; 110
     a82:	93 e0       	ldi	r25, 0x03	; 3
     a84:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				LED_vidTurnOff(GPIOD, PIN2);			// turn off led
     a88:	62 e0       	ldi	r22, 0x02	; 2
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	0e 94 99 0b 	call	0x1732	; 0x1732 <LED_vidTurnOff>
				DC_Motor_vidTurnOff();					// turn off DC Motor
     a90:	0e 94 72 07 	call	0xee4	; 0xee4 <DC_Motor_vidTurnOff>
			}
		if (Isadmin_Remoted()==1)						// if is admin equal to 1
     a94:	0e 94 9e 01 	call	0x33c	; 0x33c <Isadmin_Remoted>
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	19 f4       	brne	.+6      	; 0xaa2 <Air_Condition_Remoted+0x82>
		{
			Admin_Remoted_Menue();						// call function that control admin login
     a9c:	0e 94 bf 02 	call	0x57e	; 0x57e <Admin_Remoted_Menue>
     aa0:	c6 cf       	rjmp	.-116    	; 0xa2e <Air_Condition_Remoted+0xe>
		}
		else if(Isadmin_Remoted()==0)					// if not
     aa2:	81 11       	cpse	r24, r1
     aa4:	c4 cf       	rjmp	.-120    	; 0xa2e <Air_Condition_Remoted+0xe>
		{
			User_Remoted_Menue();						// call function that control user login
     aa6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <User_Remoted_Menue>
     aaa:	c1 cf       	rjmp	.-126    	; 0xa2e <Air_Condition_Remoted+0xe>

00000aac <Bluetooth_Control>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								control system via bluetooth (remoted)			*/
		/************************************************************************/
void Bluetooth_Control()
{
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
	pass_check = EEPROM_u8Read(PASS_address_check);		// check if pass set or not by reading value in PASS_address_check
     ab4:	80 e5       	ldi	r24, 0x50	; 80
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 23 09 	call	0x1246	; 0x1246 <EEPROM_u8Read>
     abc:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <pass_check>
	if (pass_check != 0)
     ac0:	88 23       	and	r24, r24
     ac2:	09 f4       	brne	.+2      	; 0xac6 <Bluetooth_Control+0x1a>
     ac4:	41 c0       	rjmp	.+130    	; 0xb48 <Bluetooth_Control+0x9c>
	{
		USART_vidSendString("--- Please, Set Admin ---");// send message to serial terminal
     ac6:	87 e7       	ldi	r24, 0x77	; 119
     ac8:	93 e0       	ldi	r25, 0x03	; 3
     aca:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     ace:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
		USART_vidSendString("Set UserName: ");			// send message to serial terminal
     ad2:	81 e9       	ldi	r24, 0x91	; 145
     ad4:	93 e0       	ldi	r25, 0x03	; 3
     ad6:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     ada:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
     ade:	ca e2       	ldi	r28, 0x2A	; 42
     ae0:	d7 e0       	ldi	r29, 0x07	; 7
     ae2:	0e e2       	ldi	r16, 0x2E	; 46
     ae4:	17 e0       	ldi	r17, 0x07	; 7
		for (int i=0;i<4;i++)
		{
			u8RecieveByte();							// receive data
     ae6:	0e 94 89 01 	call	0x312	; 0x312 <u8RecieveByte>
			user[i]=u8ReturnedValue;					// store data in array
     aea:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     aee:	89 93       	st	Y+, r24
	{
		USART_vidSendString("--- Please, Set Admin ---");// send message to serial terminal
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
		USART_vidSendString("Set UserName: ");			// send message to serial terminal
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
		for (int i=0;i<4;i++)
     af0:	c0 17       	cp	r28, r16
     af2:	d1 07       	cpc	r29, r17
     af4:	c1 f7       	brne	.-16     	; 0xae6 <Bluetooth_Control+0x3a>
		{
			u8RecieveByte();							// receive data
			user[i]=u8ReturnedValue;					// store data in array
		}
		USART_vidSendString("Set Password: ");			// send message to serial terminal
     af6:	80 ea       	ldi	r24, 0xA0	; 160
     af8:	93 e0       	ldi	r25, 0x03	; 3
     afa:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     afe:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
     b02:	c2 e2       	ldi	r28, 0x22	; 34
     b04:	d7 e0       	ldi	r29, 0x07	; 7
     b06:	06 e2       	ldi	r16, 0x26	; 38
     b08:	17 e0       	ldi	r17, 0x07	; 7
		for (int i=0;i<4;i++)
		{
			u8RecieveByte();							// receive data
     b0a:	0e 94 89 01 	call	0x312	; 0x312 <u8RecieveByte>
			pass[i]=u8ReturnedValue;					// store data in array
     b0e:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     b12:	89 93       	st	Y+, r24
			u8RecieveByte();							// receive data
			user[i]=u8ReturnedValue;					// store data in array
		}
		USART_vidSendString("Set Password: ");			// send message to serial terminal
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
		for (int i=0;i<4;i++)
     b14:	c0 17       	cp	r28, r16
     b16:	d1 07       	cpc	r29, r17
     b18:	c1 f7       	brne	.-16     	; 0xb0a <Bluetooth_Control+0x5e>
		{
			u8RecieveByte();							// receive data
			pass[i]=u8ReturnedValue;					// store data in array
		}
		write_EEPROM(0x0);								// call function that write username and pass in EEPROM		
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <write_EEPROM>
		USART_vidSendString("Admin Set Successfully ");	// send message to serial terminal
     b20:	8f ea       	ldi	r24, 0xAF	; 175
     b22:	93 e0       	ldi	r25, 0x03	; 3
     b24:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     b28:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
		EEPROM_vidWrite(PASS_address_check, 0);			// change value in PASS_address_check to zero (as pass is set)
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	80 e5       	ldi	r24, 0x50	; 80
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 1a 09 	call	0x1234	; 0x1234 <EEPROM_vidWrite>
		pass_check = EEPROM_u8Read(PASS_address_check);	// check if pass is set or not by reading value in PASS_address_check
     b36:	80 e5       	ldi	r24, 0x50	; 80
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 94 23 09 	call	0x1246	; 0x1246 <EEPROM_u8Read>
     b3e:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <pass_check>
		Bluetooth_Control();							// call function that control system via bluetooth 
     b42:	0e 94 56 05 	call	0xaac	; 0xaac <Bluetooth_Control>
     b46:	25 c0       	rjmp	.+74     	; 0xb92 <Bluetooth_Control+0xe6>
	}
	else												// if not
	{
		USART_vidSendString("Press A for Admin Login & U for user login");// send message to serial terminal
     b48:	87 ec       	ldi	r24, 0xC7	; 199
     b4a:	93 e0       	ldi	r25, 0x03	; 3
     b4c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     b50:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
		u8ReturnedValue = USART_u8RecieveByte();		// receive data and store it in variable
     b54:	0e 94 56 10 	call	0x20ac	; 0x20ac <USART_u8RecieveByte>
     b58:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
		USART_vidEnableRXInterrupt();					// enable TX interrupt (finish receiving)
     b5c:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
		if (u8ReturnedValue=='A')						// if choice equal to A
     b60:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     b64:	81 34       	cpi	r24, 0x41	; 65
     b66:	31 f4       	brne	.+12     	; 0xb74 <Bluetooth_Control+0xc8>
		{
			LogInFlag=1;								// set login flag to 1
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <LogInFlag>
			Isadmin_Remoted();							// call function that check who is login (admin or user)
			Admin_Remoted_Login();						// call function that scan username & pass from admin
     b6e:	0e 94 af 03 	call	0x75e	; 0x75e <Admin_Remoted_Login>
     b72:	0f c0       	rjmp	.+30     	; 0xb92 <Bluetooth_Control+0xe6>
		}
		else if (u8ReturnedValue=='U')					// if choice equal to U
     b74:	85 35       	cpi	r24, 0x55	; 85
     b76:	29 f4       	brne	.+10     	; 0xb82 <Bluetooth_Control+0xd6>
		{
			LogInFlag=0;								// set login flag to 0
     b78:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <LogInFlag>
			Isadmin_Remoted();							// call function that check who is login (admin or user)
			User_Remoted_Login();						// call function that scan username & pass from user
     b7c:	0e 94 1a 04 	call	0x834	; 0x834 <User_Remoted_Login>
     b80:	08 c0       	rjmp	.+16     	; 0xb92 <Bluetooth_Control+0xe6>
		}
		else											// if not 
		{
			USART_vidSendString("Wrong Choice");		// send message to serial terminal
     b82:	80 e7       	ldi	r24, 0x70	; 112
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     b8a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
			Bluetooth_Control();						// call function that control system remoted
     b8e:	0e 94 56 05 	call	0xaac	; 0xaac <Bluetooth_Control>
		}
	}
}
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	08 95       	ret

00000b9c <Add_Remoted_User>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								add user to the system	(remoted)				*/
		/************************************************************************/
void Add_Remoted_User()
{	
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
	u8 UserId;											// declare variable to store user id
	USART_vidSendString("Enter User Id ");				// send message to serial terminal
     ba6:	81 ee       	ldi	r24, 0xE1	; 225
     ba8:	92 e0       	ldi	r25, 0x02	; 2
     baa:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     bae:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     bb2:	0e 94 89 01 	call	0x312	; 0x312 <u8RecieveByte>
	UserId=u8ReturnedValue;								// store data in variable
     bb6:	f0 90 1f 07 	lds	r15, 0x071F	; 0x80071f <u8ReturnedValue>
	USART_vidSendString("Enter UserName ");				// send message to serial terminal
     bba:	80 ef       	ldi	r24, 0xF0	; 240
     bbc:	92 e0       	ldi	r25, 0x02	; 2
     bbe:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     bc2:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
     bc6:	ca e2       	ldi	r28, 0x2A	; 42
     bc8:	d7 e0       	ldi	r29, 0x07	; 7
     bca:	0e e2       	ldi	r16, 0x2E	; 46
     bcc:	17 e0       	ldi	r17, 0x07	; 7
	for (int i=0;i<4;i++)
	{
		u8RecieveByte();								// receive data
     bce:	0e 94 89 01 	call	0x312	; 0x312 <u8RecieveByte>
		user[i]=u8ReturnedValue;						// store data in array
     bd2:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     bd6:	89 93       	st	Y+, r24
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
	u8RecieveByte();									// receive data
	UserId=u8ReturnedValue;								// store data in variable
	USART_vidSendString("Enter UserName ");				// send message to serial terminal
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
	for (int i=0;i<4;i++)
     bd8:	c0 17       	cp	r28, r16
     bda:	d1 07       	cpc	r29, r17
     bdc:	c1 f7       	brne	.-16     	; 0xbce <Add_Remoted_User+0x32>
	{
		u8RecieveByte();								// receive data
		user[i]=u8ReturnedValue;						// store data in array
	}
	USART_vidSendString("Enter Password");				// send message to serial terminal
     bde:	82 ef       	ldi	r24, 0xF2	; 242
     be0:	93 e0       	ldi	r25, 0x03	; 3
     be2:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     be6:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
     bea:	c2 e2       	ldi	r28, 0x22	; 34
     bec:	d7 e0       	ldi	r29, 0x07	; 7
     bee:	06 e2       	ldi	r16, 0x26	; 38
     bf0:	17 e0       	ldi	r17, 0x07	; 7
	for (int i=0;i<4;i++)
	{
		u8RecieveByte();								// receive data
     bf2:	0e 94 89 01 	call	0x312	; 0x312 <u8RecieveByte>
		pass[i]=u8ReturnedValue;						// store data in array
     bf6:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     bfa:	89 93       	st	Y+, r24
		u8RecieveByte();								// receive data
		user[i]=u8ReturnedValue;						// store data in array
	}
	USART_vidSendString("Enter Password");				// send message to serial terminal
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
	for (int i=0;i<4;i++)
     bfc:	c0 17       	cp	r28, r16
     bfe:	d1 07       	cpc	r29, r17
     c00:	c1 f7       	brne	.-16     	; 0xbf2 <Add_Remoted_User+0x56>
	{
		u8RecieveByte();								// receive data
		pass[i]=u8ReturnedValue;						// store data in array
	}
	write_EEPROM(UserId);								// write data in EEPROM
     c02:	8f 2d       	mov	r24, r15
     c04:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <write_EEPROM>
	read_EEPROM(UserId);								// read data from EEPROM
     c08:	8f 2d       	mov	r24, r15
     c0a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <read_EEPROM>
	USART_vidSendString("User Added Successfully ");	// send message to serial terminal
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	94 e0       	ldi	r25, 0x04	; 4
     c12:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     c16:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	Admin_Remoted_Menue();								// call function that display admin control menu
     c1a:	0e 94 bf 02 	call	0x57e	; 0x57e <Admin_Remoted_Menue>
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	08 95       	ret

00000c2a <Remove_Remoted_User>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								remove user to the system	(remoted)			*/
		/************************************************************************/
void Remove_Remoted_User()
{
     c2a:	cf 93       	push	r28
	u8 UserId;											// declare variable to store user id
	USART_vidSendString("Enter User Id ");				// send message to serial terminal
     c2c:	81 ee       	ldi	r24, 0xE1	; 225
     c2e:	92 e0       	ldi	r25, 0x02	; 2
     c30:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     c34:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	UserId = u8RecieveByte();							// receive data
     c38:	0e 94 89 01 	call	0x312	; 0x312 <u8RecieveByte>
     c3c:	c8 2f       	mov	r28, r24
	for (int i=0;i<4;i++)
	{
		user[i]='F';									// store data in array
     c3e:	ea e2       	ldi	r30, 0x2A	; 42
     c40:	f7 e0       	ldi	r31, 0x07	; 7
     c42:	86 e4       	ldi	r24, 0x46	; 70
     c44:	80 83       	st	Z, r24
     c46:	81 83       	std	Z+1, r24	; 0x01
     c48:	82 83       	std	Z+2, r24	; 0x02
     c4a:	83 83       	std	Z+3, r24	; 0x03
	}
	for (int i=0;i<4;i++)
	{
		pass[i]='F';									// store data in array
     c4c:	e2 e2       	ldi	r30, 0x22	; 34
     c4e:	f7 e0       	ldi	r31, 0x07	; 7
     c50:	80 83       	st	Z, r24
     c52:	81 83       	std	Z+1, r24	; 0x01
     c54:	82 83       	std	Z+2, r24	; 0x02
     c56:	83 83       	std	Z+3, r24	; 0x03
	}
	write_EEPROM(UserId);								// write data in EEPROM
     c58:	8c 2f       	mov	r24, r28
     c5a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <write_EEPROM>
	read_EEPROM(UserId);								// read data from EEPROM
     c5e:	8c 2f       	mov	r24, r28
     c60:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <read_EEPROM>
	USART_vidSendString("User Remove Successfully ");	// send message to serial terminal
     c64:	8a e1       	ldi	r24, 0x1A	; 26
     c66:	94 e0       	ldi	r25, 0x04	; 4
     c68:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     c6c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	Admin_Remoted_Menue();								// call function that display admin control menu
     c70:	0e 94 bf 02 	call	0x57e	; 0x57e <Admin_Remoted_Menue>
}
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <open_door>:
		/*Function Description: void function take void and return void
								control door opening & closing (remoted)		*/
		/************************************************************************/
void open_door()
{	
	USART_vidSendString("1. open The door    2.Close the door    0.Return");// send message to serial terminal
     c78:	84 e3       	ldi	r24, 0x34	; 52
     c7a:	94 e0       	ldi	r25, 0x04	; 4
     c7c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     c80:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     c84:	0e 94 89 01 	call	0x312	; 0x312 <u8RecieveByte>
	if (u8ReturnedValue == '1')							// if choice equal 1
     c88:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     c8c:	81 33       	cpi	r24, 0x31	; 49
     c8e:	51 f4       	brne	.+20     	; 0xca4 <open_door+0x2c>
	{
		Servo_Clockwise(angle);							// turn on servo clock wise
     c90:	8a e5       	ldi	r24, 0x5A	; 90
     c92:	0e 94 84 0c 	call	0x1908	; 0x1908 <Servo_Clockwise>
		USART_vidSendString("The door is open                                                               ");// send message to serial terminal
     c96:	85 e6       	ldi	r24, 0x65	; 101
     c98:	94 e0       	ldi	r25, 0x04	; 4
     c9a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidEnableRXInterrupt();					// enable RX interrupt (finish receiving)
     c9e:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
     ca2:	13 c0       	rjmp	.+38     	; 0xcca <open_door+0x52>
	}
	else if(u8ReturnedValue == '2')						// if choice equal 2
     ca4:	82 33       	cpi	r24, 0x32	; 50
     ca6:	51 f4       	brne	.+20     	; 0xcbc <open_door+0x44>
	{
		Servo_Counterclockwise(angle);					// turn on servo anti clock wise
     ca8:	8a e5       	ldi	r24, 0x5A	; 90
     caa:	0e 94 9d 0c 	call	0x193a	; 0x193a <Servo_Counterclockwise>
		USART_vidSendString("The door is closed                                                            ");// send message to serial terminal
     cae:	85 eb       	ldi	r24, 0xB5	; 181
     cb0:	94 e0       	ldi	r25, 0x04	; 4
     cb2:	0e 94 5e 10 	call	0x20bc	; 0x20bc <USART_vidSendString>
		USART_vidEnableRXInterrupt();					// enable RX interrupt (finish receiving)
     cb6:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
     cba:	07 c0       	rjmp	.+14     	; 0xcca <open_door+0x52>
	}
	else if (u8ReturnedValue == '0')					// if choice equal 0
     cbc:	80 33       	cpi	r24, 0x30	; 48
     cbe:	19 f4       	brne	.+6      	; 0xcc6 <open_door+0x4e>
	{
		Admin_Remoted_Menue();							// call function that display admin control menu
     cc0:	0e 94 bf 02 	call	0x57e	; 0x57e <Admin_Remoted_Menue>
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <open_door+0x52>
	}
	else												// if not
	{
		open_door();									// call function that control door
     cc6:	0e 94 3c 06 	call	0xc78	; 0xc78 <open_door>
	}
	Admin_Remoted_Menue();								// call function that display admin control menu
     cca:	0e 94 bf 02 	call	0x57e	; 0x57e <Admin_Remoted_Menue>
     cce:	08 95       	ret

00000cd0 <u8GetKeyPressed>:
		/************************************************************************/
u8 u8GetKeyPressed()
{
	do										// do while loop                         	
	{
		u8ReturnedValue = KPD_u8GetPressedKey(GPIOC, HIGH_NIBBLE);// return keypad pressed value	
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	0e 94 33 0a 	call	0x1466	; 0x1466 <KPD_u8GetPressedKey>
     cd8:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
     cdc:	2f e7       	ldi	r18, 0x7F	; 127
     cde:	89 ea       	ldi	r24, 0xA9	; 169
     ce0:	93 e0       	ldi	r25, 0x03	; 3
     ce2:	21 50       	subi	r18, 0x01	; 1
     ce4:	80 40       	sbci	r24, 0x00	; 0
     ce6:	90 40       	sbci	r25, 0x00	; 0
     ce8:	e1 f7       	brne	.-8      	; 0xce2 <u8GetKeyPressed+0x12>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <u8GetKeyPressed+0x1c>
     cec:	00 00       	nop
		_delay_ms(150);						//	wait for 150 m second                   	
	} while (u8ReturnedValue == NOT_PRESSED);// loop repeated if not pressed any key
     cee:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     cf2:	8f 3f       	cpi	r24, 0xFF	; 255
     cf4:	69 f3       	breq	.-38     	; 0xcd0 <u8GetKeyPressed>
	return u8ReturnedValue;					// return pressed value
}
     cf6:	08 95       	ret

00000cf8 <control_rooms>:
		/*Function Name: control_rooms											*/
		/*Function Input: take one input (constant variable form u8 type)		*/
		/*Function Description: void function that control rooms lightning		*/
		/************************************************************************/
void control_rooms(const u8 u8SelectedRoom)
{
     cf8:	9f 92       	push	r9
     cfa:	af 92       	push	r10
     cfc:	bf 92       	push	r11
     cfe:	cf 92       	push	r12
     d00:	df 92       	push	r13
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	c8 2f       	mov	r28, r24
	u8 u8Status = 0;						// declare variable that will store status and initialize it with 0
	u8 u8TurnOn  = 0;						// declare variable that will store turn on status and initialize it with 0
	u8 u8TurnOff = 0;						// declare variable that will store turn off status and initialize it with 0
     d10:	f1 2c       	mov	r15, r1
		/*Function Description: void function that control rooms lightning		*/
		/************************************************************************/
void control_rooms(const u8 u8SelectedRoom)
{
	u8 u8Status = 0;						// declare variable that will store status and initialize it with 0
	u8 u8TurnOn  = 0;						// declare variable that will store turn on status and initialize it with 0
     d12:	00 e0       	ldi	r16, 0x00	; 0
		/*Function Input: take one input (constant variable form u8 type)		*/
		/*Function Description: void function that control rooms lightning		*/
		/************************************************************************/
void control_rooms(const u8 u8SelectedRoom)
{
	u8 u8Status = 0;						// declare variable that will store status and initialize it with 0
     d14:	10 e0       	ldi	r17, 0x00	; 0
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
			break;							// break case
			case ROOM3_MENU:				// if selection is room3
			u8Status = ROOM3_STATUS;		// set status to room3 status
     d16:	0f 2e       	mov	r0, r31
     d18:	f3 e1       	ldi	r31, 0x13	; 19
     d1a:	9f 2e       	mov	r9, r31
     d1c:	f0 2d       	mov	r31, r0
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
			break;							// break case
			case ROOM5_MENU:				// if selection is room5
			u8Status = ROOM5_STATUS;		// set status to room5 status
     d1e:	0f 2e       	mov	r0, r31
     d20:	f5 e1       	ldi	r31, 0x15	; 21
     d22:	af 2e       	mov	r10, r31
     d24:	f0 2d       	mov	r31, r0
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
			break;							// break case
			case ROOM4_MENU:				// if selection is room4
			u8Status = ROOM4_STATUS;		// set status to room4 status
     d26:	0f 2e       	mov	r0, r31
     d28:	f4 e1       	ldi	r31, 0x14	; 20
     d2a:	bf 2e       	mov	r11, r31
     d2c:	f0 2d       	mov	r31, r0
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
			break;							// break case
			case ROOM6_MENU:				// if selection is room6
			u8Status = ROOM6_STATUS;		// set status to room6 status
     d2e:	0f 2e       	mov	r0, r31
     d30:	f6 e1       	ldi	r31, 0x16	; 22
     d32:	cf 2e       	mov	r12, r31
     d34:	f0 2d       	mov	r31, r0
	{
		LCD_vidClearScreen();				// clear LCD screen
		switch(u8SelectedRoom)				// switch for selection room variable
		{
			case ROOM1_MENU:				// if selection is room1
			u8Status = ROOM1_STATUS;		// set status to room1 status
     d36:	0f 2e       	mov	r0, r31
     d38:	f1 e1       	ldi	r31, 0x11	; 17
     d3a:	df 2e       	mov	r13, r31
     d3c:	f0 2d       	mov	r31, r0
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
			break;							// break case
			case ROOM2_MENU:				// if selection is room2
			u8Status = ROOM2_STATUS;		// set status to room2 status
     d3e:	0f 2e       	mov	r0, r31
     d40:	f2 e1       	ldi	r31, 0x12	; 18
     d42:	ef 2e       	mov	r14, r31
     d44:	f0 2d       	mov	r31, r0
	u8 u8TurnOn  = 0;						// declare variable that will store turn on status and initialize it with 0
	u8 u8TurnOff = 0;						// declare variable that will store turn off status and initialize it with 0
	u8 response;
	do										// do while loop 
	{
		LCD_vidClearScreen();				// clear LCD screen
     d46:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
		switch(u8SelectedRoom)				// switch for selection room variable
     d4a:	c5 30       	cpi	r28, 0x05	; 5
     d4c:	11 f1       	breq	.+68     	; 0xd92 <control_rooms+0x9a>
     d4e:	28 f4       	brcc	.+10     	; 0xd5a <control_rooms+0x62>
     d50:	c3 30       	cpi	r28, 0x03	; 3
     d52:	49 f0       	breq	.+18     	; 0xd66 <control_rooms+0x6e>
     d54:	c4 30       	cpi	r28, 0x04	; 4
     d56:	91 f0       	breq	.+36     	; 0xd7c <control_rooms+0x84>
     d58:	47 c0       	rjmp	.+142    	; 0xde8 <control_rooms+0xf0>
     d5a:	c7 30       	cpi	r28, 0x07	; 7
     d5c:	81 f1       	breq	.+96     	; 0xdbe <control_rooms+0xc6>
     d5e:	20 f1       	brcs	.+72     	; 0xda8 <control_rooms+0xb0>
     d60:	c8 30       	cpi	r28, 0x08	; 8
     d62:	c1 f1       	breq	.+112    	; 0xdd4 <control_rooms+0xdc>
     d64:	41 c0       	rjmp	.+130    	; 0xde8 <control_rooms+0xf0>
		{
			case ROOM1_MENU:				// if selection is room1
			u8Status = ROOM1_STATUS;		// set status to room1 status
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
     d66:	84 e0       	ldi	r24, 0x04	; 4
     d68:	95 e0       	ldi	r25, 0x05	; 5
     d6a:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		switch(u8SelectedRoom)				// switch for selection room variable
		{
			case ROOM1_MENU:				// if selection is room1
			u8Status = ROOM1_STATUS;		// set status to room1 status
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
     d6e:	0f 2e       	mov	r0, r31
     d70:	f1 e3       	ldi	r31, 0x31	; 49
     d72:	ff 2e       	mov	r15, r31
     d74:	f0 2d       	mov	r31, r0
		LCD_vidClearScreen();				// clear LCD screen
		switch(u8SelectedRoom)				// switch for selection room variable
		{
			case ROOM1_MENU:				// if selection is room1
			u8Status = ROOM1_STATUS;		// set status to room1 status
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
     d76:	01 e2       	ldi	r16, 0x21	; 33
	{
		LCD_vidClearScreen();				// clear LCD screen
		switch(u8SelectedRoom)				// switch for selection room variable
		{
			case ROOM1_MENU:				// if selection is room1
			u8Status = ROOM1_STATUS;		// set status to room1 status
     d78:	1d 2d       	mov	r17, r13
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
			break;							// break case
     d7a:	36 c0       	rjmp	.+108    	; 0xde8 <control_rooms+0xf0>
			case ROOM2_MENU:				// if selection is room2
			u8Status = ROOM2_STATUS;		// set status to room2 status
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
     d7c:	82 e1       	ldi	r24, 0x12	; 18
     d7e:	95 e0       	ldi	r25, 0x05	; 5
     d80:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
			break;							// break case
			case ROOM2_MENU:				// if selection is room2
			u8Status = ROOM2_STATUS;		// set status to room2 status
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
     d84:	0f 2e       	mov	r0, r31
     d86:	f2 e3       	ldi	r31, 0x32	; 50
     d88:	ff 2e       	mov	r15, r31
     d8a:	f0 2d       	mov	r31, r0
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
			break;							// break case
			case ROOM2_MENU:				// if selection is room2
			u8Status = ROOM2_STATUS;		// set status to room2 status
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
     d8c:	02 e2       	ldi	r16, 0x22	; 34
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
			break;							// break case
			case ROOM2_MENU:				// if selection is room2
			u8Status = ROOM2_STATUS;		// set status to room2 status
     d8e:	1e 2d       	mov	r17, r14
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
			break;							// break case
     d90:	2b c0       	rjmp	.+86     	; 0xde8 <control_rooms+0xf0>
			case ROOM3_MENU:				// if selection is room3
			u8Status = ROOM3_STATUS;		// set status to room3 status
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
     d92:	80 e2       	ldi	r24, 0x20	; 32
     d94:	95 e0       	ldi	r25, 0x05	; 5
     d96:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
			break;							// break case
			case ROOM3_MENU:				// if selection is room3
			u8Status = ROOM3_STATUS;		// set status to room3 status
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
     d9a:	0f 2e       	mov	r0, r31
     d9c:	f3 e3       	ldi	r31, 0x33	; 51
     d9e:	ff 2e       	mov	r15, r31
     da0:	f0 2d       	mov	r31, r0
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
			break;							// break case
			case ROOM3_MENU:				// if selection is room3
			u8Status = ROOM3_STATUS;		// set status to room3 status
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
     da2:	03 e2       	ldi	r16, 0x23	; 35
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
			break;							// break case
			case ROOM3_MENU:				// if selection is room3
			u8Status = ROOM3_STATUS;		// set status to room3 status
     da4:	19 2d       	mov	r17, r9
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
			break;							// break case
     da6:	20 c0       	rjmp	.+64     	; 0xde8 <control_rooms+0xf0>
			case ROOM4_MENU:				// if selection is room4
			u8Status = ROOM4_STATUS;		// set status to room4 status
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
     da8:	8e e2       	ldi	r24, 0x2E	; 46
     daa:	95 e0       	ldi	r25, 0x05	; 5
     dac:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
			break;							// break case
			case ROOM4_MENU:				// if selection is room4
			u8Status = ROOM4_STATUS;		// set status to room4 status
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
     db0:	0f 2e       	mov	r0, r31
     db2:	f4 e3       	ldi	r31, 0x34	; 52
     db4:	ff 2e       	mov	r15, r31
     db6:	f0 2d       	mov	r31, r0
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
			break;							// break case
			case ROOM4_MENU:				// if selection is room4
			u8Status = ROOM4_STATUS;		// set status to room4 status
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
     db8:	04 e2       	ldi	r16, 0x24	; 36
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
			break;							// break case
			case ROOM4_MENU:				// if selection is room4
			u8Status = ROOM4_STATUS;		// set status to room4 status
     dba:	1b 2d       	mov	r17, r11
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
			break;							// break case
     dbc:	15 c0       	rjmp	.+42     	; 0xde8 <control_rooms+0xf0>
			case ROOM5_MENU:				// if selection is room5
			u8Status = ROOM5_STATUS;		// set status to room5 status
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
     dbe:	8c e3       	ldi	r24, 0x3C	; 60
     dc0:	95 e0       	ldi	r25, 0x05	; 5
     dc2:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
			break;							// break case
			case ROOM5_MENU:				// if selection is room5
			u8Status = ROOM5_STATUS;		// set status to room5 status
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
     dc6:	0f 2e       	mov	r0, r31
     dc8:	f5 e3       	ldi	r31, 0x35	; 53
     dca:	ff 2e       	mov	r15, r31
     dcc:	f0 2d       	mov	r31, r0
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
			break;							// break case
			case ROOM5_MENU:				// if selection is room5
			u8Status = ROOM5_STATUS;		// set status to room5 status
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
     dce:	05 e2       	ldi	r16, 0x25	; 37
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
			break;							// break case
			case ROOM5_MENU:				// if selection is room5
			u8Status = ROOM5_STATUS;		// set status to room5 status
     dd0:	1a 2d       	mov	r17, r10
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
			break;							// break case
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <control_rooms+0xf0>
			case ROOM6_MENU:				// if selection is room6
			u8Status = ROOM6_STATUS;		// set status to room6 status
			u8TurnOn = ROOM6_TURN_ON;		// set turn on status to room6 turn on status
			u8TurnOff = ROOM6_TURN_OFF;		// set turn off status to room6 turn off status
			LCD_vidDisplayString("Room6 Status:");// display message on LCD screen
     dd4:	8a e4       	ldi	r24, 0x4A	; 74
     dd6:	95 e0       	ldi	r25, 0x05	; 5
     dd8:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
			break;							// break case
			case ROOM6_MENU:				// if selection is room6
			u8Status = ROOM6_STATUS;		// set status to room6 status
			u8TurnOn = ROOM6_TURN_ON;		// set turn on status to room6 turn on status
			u8TurnOff = ROOM6_TURN_OFF;		// set turn off status to room6 turn off status
     ddc:	0f 2e       	mov	r0, r31
     dde:	f6 e3       	ldi	r31, 0x36	; 54
     de0:	ff 2e       	mov	r15, r31
     de2:	f0 2d       	mov	r31, r0
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
			break;							// break case
			case ROOM6_MENU:				// if selection is room6
			u8Status = ROOM6_STATUS;		// set status to room6 status
			u8TurnOn = ROOM6_TURN_ON;		// set turn on status to room6 turn on status
     de4:	06 e2       	ldi	r16, 0x26	; 38
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
			break;							// break case
			case ROOM6_MENU:				// if selection is room6
			u8Status = ROOM6_STATUS;		// set status to room6 status
     de6:	1c 2d       	mov	r17, r12
			u8TurnOn = ROOM6_TURN_ON;		// set turn on status to room6 turn on status
			u8TurnOff = ROOM6_TURN_OFF;		// set turn off status to room6 turn off status
			LCD_vidDisplayString("Room6 Status:");// display message on LCD screen
			break;							// break case
		}	
		USART_vidSendByte(u8Status);		// send status to slave
     de8:	81 2f       	mov	r24, r17
     dea:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
		USART_vidEnableTXInterrupt();		// enable TX interrupt (finish transmitting)
     dee:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
		response = USART_u8RecieveByte();	// receive response from slave
     df2:	0e 94 56 10 	call	0x20ac	; 0x20ac <USART_u8RecieveByte>
     df6:	d8 2f       	mov	r29, r24
		USART_vidEnableRXInterrupt();		// enable RX interrupt (finish receiving)
     df8:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USART_vidEnableRXInterrupt>
		if(response == ON_STATUS)			// if response equal to on state
     dfc:	d1 30       	cpi	r29, 0x01	; 1
     dfe:	29 f4       	brne	.+10     	; 0xe0a <control_rooms+0x112>
		{
			LCD_vidDisplayString("ON");		// display message on LCD screen
     e00:	88 e5       	ldi	r24, 0x58	; 88
     e02:	95 e0       	ldi	r25, 0x05	; 5
     e04:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
     e08:	04 c0       	rjmp	.+8      	; 0xe12 <control_rooms+0x11a>
		}
		else								// if not 
		{
			LCD_vidDisplayString("OFF");	// display message on LCD screen
     e0a:	8c e0       	ldi	r24, 0x0C	; 12
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		}
		LCD_vidMoveCursor(2,1);				// move LCD cursor to second line
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
		LCD_vidDisplayString(">> 1-On ");	// display message on LCD screen
     e1a:	8b e5       	ldi	r24, 0x5B	; 91
     e1c:	95 e0       	ldi	r25, 0x05	; 5
     e1e:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		LCD_vidMoveCursor(3,1);				// move LCD cursor to third line
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	83 e0       	ldi	r24, 0x03	; 3
     e26:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
		LCD_vidDisplayString(">> 2-Off ");	// display message on LCD screen
     e2a:	84 e6       	ldi	r24, 0x64	; 100
     e2c:	95 e0       	ldi	r25, 0x05	; 5
     e2e:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		LCD_vidMoveCursor(4,1);				// move LCD cursor to fourth line
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
		LCD_vidDisplayString(">> 0-RET ");	// display message on LCD screen
     e3a:	8e e6       	ldi	r24, 0x6E	; 110
     e3c:	95 e0       	ldi	r25, 0x05	; 5
     e3e:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		LCD_vidDisplayString(" >> ");		// display message on LCD screen
     e42:	87 e4       	ldi	r24, 0x47	; 71
     e44:	96 e0       	ldi	r25, 0x06	; 6
     e46:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		u8ReturnedValue = u8GetKeyPressed();// take choice from user            
     e4a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <u8GetKeyPressed>
     e4e:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
		if (u8ReturnedValue == '1')			// if choice equal to one
     e52:	81 33       	cpi	r24, 0x31	; 49
     e54:	31 f4       	brne	.+12     	; 0xe62 <control_rooms+0x16a>
		{
			USART_vidSendByte(u8TurnOn);	// send turn on status to slave
     e56:	80 2f       	mov	r24, r16
     e58:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();	// enable TX interrupt (finish transmitting)
     e5c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
     e60:	19 c0       	rjmp	.+50     	; 0xe94 <control_rooms+0x19c>
		}
		else if (u8ReturnedValue == '2')	// if choice equal to two
     e62:	82 33       	cpi	r24, 0x32	; 50
     e64:	31 f4       	brne	.+12     	; 0xe72 <control_rooms+0x17a>
		{
		  USART_vidSendByte(u8TurnOff);		// send turn off status to slave
     e66:	8f 2d       	mov	r24, r15
     e68:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
		  USART_vidEnableTXInterrupt();		// enable TX interrupt (finish transmitting)
     e6c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
     e70:	11 c0       	rjmp	.+34     	; 0xe94 <control_rooms+0x19c>
		}
		else if (u8ReturnedValue == '0')	// if choice equal to zero
     e72:	80 33       	cpi	r24, 0x30	; 48
     e74:	a9 f0       	breq	.+42     	; 0xea0 <control_rooms+0x1a8>
		{
			break;							// break	
		}
		else								// if not 
		{
			LCD_vidClearScreen();			// clear LCD screen
     e76:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
			LCD_vidDisplayString("Wrong input");// display message on LCD screen
     e7a:	88 e7       	ldi	r24, 0x78	; 120
     e7c:	95 e0       	ldi	r25, 0x05	; 5
     e7e:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
     e82:	2f ef       	ldi	r18, 0xFF	; 255
     e84:	89 e6       	ldi	r24, 0x69	; 105
     e86:	98 e1       	ldi	r25, 0x18	; 24
     e88:	21 50       	subi	r18, 0x01	; 1
     e8a:	80 40       	sbci	r24, 0x00	; 0
     e8c:	90 40       	sbci	r25, 0x00	; 0
     e8e:	e1 f7       	brne	.-8      	; 0xe88 <control_rooms+0x190>
     e90:	00 c0       	rjmp	.+0      	; 0xe92 <control_rooms+0x19a>
     e92:	00 00       	nop
			_delay_ms(1000);				// wait for one second
		}
	}while ( (u8ReturnedValue < '0') || (u8ReturnedValue > '2') );// loop repeated if choice less than 0 or grater than 2
     e94:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
     e98:	80 53       	subi	r24, 0x30	; 48
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <control_rooms+0x1a8>
     e9e:	53 cf       	rjmp	.-346    	; 0xd46 <control_rooms+0x4e>
}
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	df 90       	pop	r13
     eae:	cf 90       	pop	r12
     eb0:	bf 90       	pop	r11
     eb2:	af 90       	pop	r10
     eb4:	9f 90       	pop	r9
     eb6:	08 95       	ret

00000eb8 <DC_Motor_vidInit>:
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void DC_Motor_vidInit()
{
DIO_vidSetPinMode(DC_MOTOR_PORT,DC_MOTOR_PIN0,OUTPUT);
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	66 e0       	ldi	r22, 0x06	; 6
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
DIO_vidSetPinMode(DC_MOTOR_PORT,DC_MOTOR_PIN1,OUTPUT);
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	67 e0       	ldi	r22, 0x07	; 7
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
     ecc:	08 95       	ret

00000ece <DC_Motor_vidTurnOn>:
		/************************************************************************/
		/*                       declare functions needed	                    */
		/************************************************************************/
void DC_Motor_vidTurnOn()
{
    DIO_vidWritePin(DC_MOTOR_PORT,DC_MOTOR_PIN0,HIGH);
     ece:	41 e0       	ldi	r20, 0x01	; 1
     ed0:	66 e0       	ldi	r22, 0x06	; 6
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
    DIO_vidWritePin(DC_MOTOR_PORT,DC_MOTOR_PIN1,LOW);
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	67 e0       	ldi	r22, 0x07	; 7
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
     ee2:	08 95       	ret

00000ee4 <DC_Motor_vidTurnOff>:
		/************************************************************************/
		/*                       declare functions needed	                    */
		/************************************************************************/
void DC_Motor_vidTurnOff()
{
    DIO_vidWritePin(DC_MOTOR_PORT,DC_MOTOR_PIN0,LOW);
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	66 e0       	ldi	r22, 0x06	; 6
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
    DIO_vidWritePin(DC_MOTOR_PORT,DC_MOTOR_PIN1,LOW);
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	67 e0       	ldi	r22, 0x07	; 7
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
     ef8:	08 95       	ret

00000efa <DIO_vidSetPinMode>:
        break;
    case GPIOC:
        PORTC = u8Value;
        break;
    case GPIOD:
        PORTD = u8Value;
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	01 f1       	breq	.+64     	; 0xf3e <DIO_vidSetPinMode+0x44>
     efe:	30 f0       	brcs	.+12     	; 0xf0c <DIO_vidSetPinMode+0x12>
     f00:	82 30       	cpi	r24, 0x02	; 2
     f02:	b1 f1       	breq	.+108    	; 0xf70 <DIO_vidSetPinMode+0x76>
     f04:	83 30       	cpi	r24, 0x03	; 3
     f06:	09 f4       	brne	.+2      	; 0xf0a <DIO_vidSetPinMode+0x10>
     f08:	4c c0       	rjmp	.+152    	; 0xfa2 <DIO_vidSetPinMode+0xa8>
     f0a:	08 95       	ret
     f0c:	41 30       	cpi	r20, 0x01	; 1
     f0e:	59 f4       	brne	.+22     	; 0xf26 <DIO_vidSetPinMode+0x2c>
     f10:	2a b3       	in	r18, 0x1a	; 26
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_vidSetPinMode+0x22>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	6a 95       	dec	r22
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_vidSetPinMode+0x1e>
     f20:	82 2b       	or	r24, r18
     f22:	8a bb       	out	0x1a, r24	; 26
     f24:	08 95       	ret
     f26:	2a b3       	in	r18, 0x1a	; 26
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_vidSetPinMode+0x38>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	6a 95       	dec	r22
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_vidSetPinMode+0x34>
     f36:	80 95       	com	r24
     f38:	82 23       	and	r24, r18
     f3a:	8a bb       	out	0x1a, r24	; 26
     f3c:	08 95       	ret
     f3e:	41 30       	cpi	r20, 0x01	; 1
     f40:	59 f4       	brne	.+22     	; 0xf58 <DIO_vidSetPinMode+0x5e>
     f42:	27 b3       	in	r18, 0x17	; 23
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_vidSetPinMode+0x54>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	6a 95       	dec	r22
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_vidSetPinMode+0x50>
     f52:	82 2b       	or	r24, r18
     f54:	87 bb       	out	0x17, r24	; 23
     f56:	08 95       	ret
     f58:	27 b3       	in	r18, 0x17	; 23
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_vidSetPinMode+0x6a>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	6a 95       	dec	r22
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_vidSetPinMode+0x66>
     f68:	80 95       	com	r24
     f6a:	82 23       	and	r24, r18
     f6c:	87 bb       	out	0x17, r24	; 23
     f6e:	08 95       	ret
     f70:	41 30       	cpi	r20, 0x01	; 1
     f72:	59 f4       	brne	.+22     	; 0xf8a <DIO_vidSetPinMode+0x90>
     f74:	24 b3       	in	r18, 0x14	; 20
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_vidSetPinMode+0x86>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	6a 95       	dec	r22
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_vidSetPinMode+0x82>
     f84:	82 2b       	or	r24, r18
     f86:	84 bb       	out	0x14, r24	; 20
     f88:	08 95       	ret
     f8a:	24 b3       	in	r18, 0x14	; 20
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_vidSetPinMode+0x9c>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	6a 95       	dec	r22
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_vidSetPinMode+0x98>
     f9a:	80 95       	com	r24
     f9c:	82 23       	and	r24, r18
     f9e:	84 bb       	out	0x14, r24	; 20
     fa0:	08 95       	ret
     fa2:	41 30       	cpi	r20, 0x01	; 1
     fa4:	59 f4       	brne	.+22     	; 0xfbc <DIO_vidSetPinMode+0xc2>
     fa6:	21 b3       	in	r18, 0x11	; 17
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_vidSetPinMode+0xb8>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	6a 95       	dec	r22
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_vidSetPinMode+0xb4>
     fb6:	82 2b       	or	r24, r18
     fb8:	81 bb       	out	0x11, r24	; 17
     fba:	08 95       	ret
     fbc:	21 b3       	in	r18, 0x11	; 17
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_vidSetPinMode+0xce>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	6a 95       	dec	r22
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_vidSetPinMode+0xca>
     fcc:	80 95       	com	r24
     fce:	82 23       	and	r24, r18
     fd0:	81 bb       	out	0x11, r24	; 17
     fd2:	08 95       	ret

00000fd4 <DIO_vidWritePin>:
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	01 f1       	breq	.+64     	; 0x1018 <DIO_vidWritePin+0x44>
     fd8:	30 f0       	brcs	.+12     	; 0xfe6 <DIO_vidWritePin+0x12>
     fda:	82 30       	cpi	r24, 0x02	; 2
     fdc:	b1 f1       	breq	.+108    	; 0x104a <DIO_vidWritePin+0x76>
     fde:	83 30       	cpi	r24, 0x03	; 3
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <DIO_vidWritePin+0x10>
     fe2:	4c c0       	rjmp	.+152    	; 0x107c <DIO_vidWritePin+0xa8>
     fe4:	08 95       	ret
     fe6:	41 30       	cpi	r20, 0x01	; 1
     fe8:	59 f4       	brne	.+22     	; 0x1000 <DIO_vidWritePin+0x2c>
     fea:	2b b3       	in	r18, 0x1b	; 27
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_vidWritePin+0x22>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	6a 95       	dec	r22
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_vidWritePin+0x1e>
     ffa:	82 2b       	or	r24, r18
     ffc:	8b bb       	out	0x1b, r24	; 27
     ffe:	08 95       	ret
    1000:	2b b3       	in	r18, 0x1b	; 27
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_vidWritePin+0x38>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	6a 95       	dec	r22
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_vidWritePin+0x34>
    1010:	80 95       	com	r24
    1012:	82 23       	and	r24, r18
    1014:	8b bb       	out	0x1b, r24	; 27
    1016:	08 95       	ret
    1018:	41 30       	cpi	r20, 0x01	; 1
    101a:	59 f4       	brne	.+22     	; 0x1032 <DIO_vidWritePin+0x5e>
    101c:	28 b3       	in	r18, 0x18	; 24
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_vidWritePin+0x54>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	6a 95       	dec	r22
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_vidWritePin+0x50>
    102c:	82 2b       	or	r24, r18
    102e:	88 bb       	out	0x18, r24	; 24
    1030:	08 95       	ret
    1032:	28 b3       	in	r18, 0x18	; 24
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_vidWritePin+0x6a>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	6a 95       	dec	r22
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_vidWritePin+0x66>
    1042:	80 95       	com	r24
    1044:	82 23       	and	r24, r18
    1046:	88 bb       	out	0x18, r24	; 24
    1048:	08 95       	ret
    104a:	41 30       	cpi	r20, 0x01	; 1
    104c:	59 f4       	brne	.+22     	; 0x1064 <DIO_vidWritePin+0x90>
    104e:	25 b3       	in	r18, 0x15	; 21
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_vidWritePin+0x86>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	6a 95       	dec	r22
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_vidWritePin+0x82>
    105e:	82 2b       	or	r24, r18
    1060:	85 bb       	out	0x15, r24	; 21
    1062:	08 95       	ret
    1064:	25 b3       	in	r18, 0x15	; 21
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_vidWritePin+0x9c>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	6a 95       	dec	r22
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_vidWritePin+0x98>
    1074:	80 95       	com	r24
    1076:	82 23       	and	r24, r18
    1078:	85 bb       	out	0x15, r24	; 21
    107a:	08 95       	ret
    107c:	41 30       	cpi	r20, 0x01	; 1
    107e:	59 f4       	brne	.+22     	; 0x1096 <DIO_vidWritePin+0xc2>
    1080:	22 b3       	in	r18, 0x12	; 18
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_vidWritePin+0xb8>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	6a 95       	dec	r22
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_vidWritePin+0xb4>
    1090:	82 2b       	or	r24, r18
    1092:	82 bb       	out	0x12, r24	; 18
    1094:	08 95       	ret
    1096:	22 b3       	in	r18, 0x12	; 18
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_vidWritePin+0xce>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	6a 95       	dec	r22
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DIO_vidWritePin+0xca>
    10a6:	80 95       	com	r24
    10a8:	82 23       	and	r24, r18
    10aa:	82 bb       	out	0x12, r24	; 18
    10ac:	08 95       	ret

000010ae <DIO_enuReadPin>:
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	c9 f0       	breq	.+50     	; 0x10e4 <DIO_enuReadPin+0x36>
    10b2:	28 f0       	brcs	.+10     	; 0x10be <DIO_enuReadPin+0x10>
    10b4:	82 30       	cpi	r24, 0x02	; 2
    10b6:	49 f1       	breq	.+82     	; 0x110a <DIO_enuReadPin+0x5c>
    10b8:	83 30       	cpi	r24, 0x03	; 3
    10ba:	d1 f1       	breq	.+116    	; 0x1130 <DIO_enuReadPin+0x82>
    10bc:	4b c0       	rjmp	.+150    	; 0x1154 <DIO_enuReadPin+0xa6>
    10be:	29 b3       	in	r18, 0x19	; 25
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	06 2e       	mov	r0, r22
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_enuReadPin+0x1e>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_enuReadPin+0x1a>
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	82 23       	and	r24, r18
    10d4:	93 23       	and	r25, r19
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_enuReadPin+0x2e>
    10d8:	95 95       	asr	r25
    10da:	87 95       	ror	r24
    10dc:	6a 95       	dec	r22
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_enuReadPin+0x2a>
    10e0:	98 2f       	mov	r25, r24
    10e2:	38 c0       	rjmp	.+112    	; 0x1154 <DIO_enuReadPin+0xa6>
    10e4:	26 b3       	in	r18, 0x16	; 22
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	06 2e       	mov	r0, r22
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_enuReadPin+0x44>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_enuReadPin+0x40>
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	82 23       	and	r24, r18
    10fa:	93 23       	and	r25, r19
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_enuReadPin+0x54>
    10fe:	95 95       	asr	r25
    1100:	87 95       	ror	r24
    1102:	6a 95       	dec	r22
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_enuReadPin+0x50>
    1106:	98 2f       	mov	r25, r24
    1108:	25 c0       	rjmp	.+74     	; 0x1154 <DIO_enuReadPin+0xa6>
    110a:	23 b3       	in	r18, 0x13	; 19
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	06 2e       	mov	r0, r22
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_enuReadPin+0x6a>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_enuReadPin+0x66>
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	82 23       	and	r24, r18
    1120:	93 23       	and	r25, r19
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_enuReadPin+0x7a>
    1124:	95 95       	asr	r25
    1126:	87 95       	ror	r24
    1128:	6a 95       	dec	r22
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_enuReadPin+0x76>
    112c:	98 2f       	mov	r25, r24
    112e:	12 c0       	rjmp	.+36     	; 0x1154 <DIO_enuReadPin+0xa6>
    1130:	20 b3       	in	r18, 0x10	; 16
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	06 2e       	mov	r0, r22
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_enuReadPin+0x90>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_enuReadPin+0x8c>
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	82 23       	and	r24, r18
    1146:	93 23       	and	r25, r19
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_enuReadPin+0xa0>
    114a:	95 95       	asr	r25
    114c:	87 95       	ror	r24
    114e:	6a 95       	dec	r22
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_enuReadPin+0x9c>
    1152:	98 2f       	mov	r25, r24
    1154:	89 2f       	mov	r24, r25
    1156:	08 95       	ret

00001158 <DIO_vidSetLowNibbleMode>:
		/*Function Input: two input (address, data)								*/
		/*Function Description: void function take two input and return void
								write in EEPROM									*/
		/************************************************************************/
void DIO_vidSetLowNibbleMode(_enuGPIOx enuPortNum , _enuIOx enuPinDirection)
{
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	18 2f       	mov	r17, r24
    1160:	d6 2f       	mov	r29, r22
    u8 u8Counter = 0;
    for (u8Counter = 0; u8Counter <= 3; u8Counter++)
    1162:	c0 e0       	ldi	r28, 0x00	; 0
    {
        DIO_vidSetPinMode(enuPortNum, u8Counter, enuPinDirection);
    1164:	4d 2f       	mov	r20, r29
    1166:	6c 2f       	mov	r22, r28
    1168:	81 2f       	mov	r24, r17
    116a:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
								write in EEPROM									*/
		/************************************************************************/
void DIO_vidSetLowNibbleMode(_enuGPIOx enuPortNum , _enuIOx enuPinDirection)
{
    u8 u8Counter = 0;
    for (u8Counter = 0; u8Counter <= 3; u8Counter++)
    116e:	cf 5f       	subi	r28, 0xFF	; 255
    1170:	c4 30       	cpi	r28, 0x04	; 4
    1172:	c1 f7       	brne	.-16     	; 0x1164 <DIO_vidSetLowNibbleMode+0xc>
    {
        DIO_vidSetPinMode(enuPortNum, u8Counter, enuPinDirection);
    }
    
}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	08 95       	ret

0000117c <DIO_vidWriteLowNibble>:
		/*Function Description: void function take two input and return void
								write in EEPROM									*/
		/************************************************************************/
void DIO_vidWriteLowNibble(_enuGPIOx enuPortNum, u8 u8Value)
{
    u8Value &= 0x0F;
    117c:	6f 70       	andi	r22, 0x0F	; 15
    switch (enuPortNum)
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	69 f0       	breq	.+26     	; 0x119c <DIO_vidWriteLowNibble+0x20>
    1182:	28 f0       	brcs	.+10     	; 0x118e <DIO_vidWriteLowNibble+0x12>
    1184:	82 30       	cpi	r24, 0x02	; 2
    1186:	89 f0       	breq	.+34     	; 0x11aa <DIO_vidWriteLowNibble+0x2e>
    1188:	83 30       	cpi	r24, 0x03	; 3
    118a:	b1 f0       	breq	.+44     	; 0x11b8 <DIO_vidWriteLowNibble+0x3c>
    118c:	08 95       	ret
    {
    case GPIOA:
        PORTA &= 0xF0;
    118e:	8b b3       	in	r24, 0x1b	; 27
    1190:	80 7f       	andi	r24, 0xF0	; 240
    1192:	8b bb       	out	0x1b, r24	; 27
        PORTA |= u8Value;
    1194:	8b b3       	in	r24, 0x1b	; 27
    1196:	68 2b       	or	r22, r24
    1198:	6b bb       	out	0x1b, r22	; 27
        break;
    119a:	08 95       	ret
    case GPIOB:
        PORTB &= 0xF0;
    119c:	88 b3       	in	r24, 0x18	; 24
    119e:	80 7f       	andi	r24, 0xF0	; 240
    11a0:	88 bb       	out	0x18, r24	; 24
        PORTB |= u8Value;
    11a2:	88 b3       	in	r24, 0x18	; 24
    11a4:	68 2b       	or	r22, r24
    11a6:	68 bb       	out	0x18, r22	; 24
        break;
    11a8:	08 95       	ret
    case GPIOC:
        PORTC &= 0xF0;
    11aa:	85 b3       	in	r24, 0x15	; 21
    11ac:	80 7f       	andi	r24, 0xF0	; 240
    11ae:	85 bb       	out	0x15, r24	; 21
        PORTC |= u8Value;
    11b0:	85 b3       	in	r24, 0x15	; 21
    11b2:	68 2b       	or	r22, r24
    11b4:	65 bb       	out	0x15, r22	; 21
        break;
    11b6:	08 95       	ret
    case GPIOD:
        PORTD &= 0xF0;
    11b8:	82 b3       	in	r24, 0x12	; 18
    11ba:	80 7f       	andi	r24, 0xF0	; 240
    11bc:	82 bb       	out	0x12, r24	; 18
        PORTD |= u8Value;
    11be:	82 b3       	in	r24, 0x12	; 18
    11c0:	68 2b       	or	r22, r24
    11c2:	62 bb       	out	0x12, r22	; 18
    11c4:	08 95       	ret

000011c6 <DIO_vidSetHighNibbleMode>:
		/*Function Input: two input (address, data)								*/
		/*Function Description: void function take two input and return void
								write in EEPROM									*/
		/************************************************************************/
void DIO_vidSetHighNibbleMode(_enuGPIOx enuPortNum , _enuIOx enuPinDirection)
{
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	18 2f       	mov	r17, r24
    11ce:	d6 2f       	mov	r29, r22
    u8 u8Counter = 4;
    for (u8Counter = 4; u8Counter <= 7; u8Counter++)
    11d0:	c4 e0       	ldi	r28, 0x04	; 4
    {
        DIO_vidSetPinMode(enuPortNum, u8Counter, enuPinDirection);
    11d2:	4d 2f       	mov	r20, r29
    11d4:	6c 2f       	mov	r22, r28
    11d6:	81 2f       	mov	r24, r17
    11d8:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
								write in EEPROM									*/
		/************************************************************************/
void DIO_vidSetHighNibbleMode(_enuGPIOx enuPortNum , _enuIOx enuPinDirection)
{
    u8 u8Counter = 4;
    for (u8Counter = 4; u8Counter <= 7; u8Counter++)
    11dc:	cf 5f       	subi	r28, 0xFF	; 255
    11de:	c8 30       	cpi	r28, 0x08	; 8
    11e0:	c1 f7       	brne	.-16     	; 0x11d2 <DIO_vidSetHighNibbleMode+0xc>
    {
        DIO_vidSetPinMode(enuPortNum, u8Counter, enuPinDirection);
    }
}
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	08 95       	ret

000011ea <DIO_vidWriteHighNibble>:
		/*Function Description: void function take two input and return void
								write in EEPROM									*/
		/************************************************************************/
void DIO_vidWriteHighNibble(_enuGPIOx enuPortNum, u8 u8Value)
{
    u8Value &= 0xF0;
    11ea:	60 7f       	andi	r22, 0xF0	; 240
    switch (enuPortNum)
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	69 f0       	breq	.+26     	; 0x120a <DIO_vidWriteHighNibble+0x20>
    11f0:	28 f0       	brcs	.+10     	; 0x11fc <DIO_vidWriteHighNibble+0x12>
    11f2:	82 30       	cpi	r24, 0x02	; 2
    11f4:	89 f0       	breq	.+34     	; 0x1218 <DIO_vidWriteHighNibble+0x2e>
    11f6:	83 30       	cpi	r24, 0x03	; 3
    11f8:	b1 f0       	breq	.+44     	; 0x1226 <DIO_vidWriteHighNibble+0x3c>
    11fa:	08 95       	ret
    {
    case GPIOA:
        PORTA &= 0x0F;
    11fc:	8b b3       	in	r24, 0x1b	; 27
    11fe:	8f 70       	andi	r24, 0x0F	; 15
    1200:	8b bb       	out	0x1b, r24	; 27
        PORTA |= u8Value;
    1202:	8b b3       	in	r24, 0x1b	; 27
    1204:	68 2b       	or	r22, r24
    1206:	6b bb       	out	0x1b, r22	; 27
        break;
    1208:	08 95       	ret
    case GPIOB:
        PORTB &= 0x0F;
    120a:	88 b3       	in	r24, 0x18	; 24
    120c:	8f 70       	andi	r24, 0x0F	; 15
    120e:	88 bb       	out	0x18, r24	; 24
        PORTB |= u8Value;
    1210:	88 b3       	in	r24, 0x18	; 24
    1212:	68 2b       	or	r22, r24
    1214:	68 bb       	out	0x18, r22	; 24
        break;
    1216:	08 95       	ret
    case GPIOC:
        PORTC &= 0x0F;
    1218:	85 b3       	in	r24, 0x15	; 21
    121a:	8f 70       	andi	r24, 0x0F	; 15
    121c:	85 bb       	out	0x15, r24	; 21
        PORTC |= u8Value;
    121e:	85 b3       	in	r24, 0x15	; 21
    1220:	68 2b       	or	r22, r24
    1222:	65 bb       	out	0x15, r22	; 21
        break;
    1224:	08 95       	ret
    case GPIOD:
        PORTD &= 0x0F;
    1226:	82 b3       	in	r24, 0x12	; 18
    1228:	8f 70       	andi	r24, 0x0F	; 15
    122a:	82 bb       	out	0x12, r24	; 18
        PORTD |= u8Value;
    122c:	82 b3       	in	r24, 0x12	; 18
    122e:	68 2b       	or	r22, r24
    1230:	62 bb       	out	0x12, r22	; 18
    1232:	08 95       	ret

00001234 <EEPROM_vidWrite>:
		/*Function Description: void function take two input and return void
								write in EEPROM									*/
		/************************************************************************/
void EEPROM_vidWrite(u16 u16Address, u8 u8Data)
{
    EEARL = (u8) u16Address;
    1234:	8e bb       	out	0x1e, r24	; 30
    EEARH = (u8)(u16Address >>8);
    1236:	9f bb       	out	0x1f, r25	; 31
    EEDR = u8Data;
    1238:	6d bb       	out	0x1d, r22	; 29
    EECR = 0x04; // Set EEMWE by 1
    123a:	84 e0       	ldi	r24, 0x04	; 4
    123c:	8c bb       	out	0x1c, r24	; 28
    EECR |= 0x02; // Set EEWE by 1
    123e:	e1 9a       	sbi	0x1c, 1	; 28
    while(GET_BIT(EECR, EEWE) == 1);
    1240:	e1 99       	sbic	0x1c, 1	; 28
    1242:	fe cf       	rjmp	.-4      	; 0x1240 <EEPROM_vidWrite+0xc>
}
    1244:	08 95       	ret

00001246 <EEPROM_u8Read>:
		/*Function Description: u8 function take one input and return u8
								read from EEPROM								*/
		/************************************************************************/
u8 EEPROM_u8Read(u16 u16Address)
{
    EEARL = (u8) u16Address;
    1246:	8e bb       	out	0x1e, r24	; 30
    EEARH = (u8)(u16Address >>8); 
    1248:	9f bb       	out	0x1f, r25	; 31
    SET_BIT(EECR, EERE);
    124a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    124c:	8d b3       	in	r24, 0x1d	; 29
    124e:	08 95       	ret

00001250 <EXTI_vidInit>:
		/*Function Input: two input (interrupt pin, firing source)				*/
		/*Function Description: void function take two input and return void
								initialize external interrupt					*/
		/************************************************************************/
void EXTI_vidInit(_enuSOURCE_OF_INTERUPT enuInterruptNum, _enuFIRING_SOURCE enuFiringSource)
{
    1250:	cf 93       	push	r28
    1252:	c6 2f       	mov	r28, r22
    //1-Enable Global Interrupt
    SET_BIT(SREG, GI);
    1254:	9f b7       	in	r25, 0x3f	; 63
    1256:	90 68       	ori	r25, 0x80	; 128
    1258:	9f bf       	out	0x3f, r25	; 63
    switch (enuInterruptNum)
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	41 f1       	breq	.+80     	; 0x12ae <EXTI_vidInit+0x5e>
    125e:	20 f0       	brcs	.+8      	; 0x1268 <EXTI_vidInit+0x18>
    1260:	82 30       	cpi	r24, 0x02	; 2
    1262:	09 f4       	brne	.+2      	; 0x1266 <EXTI_vidInit+0x16>
    1264:	47 c0       	rjmp	.+142    	; 0x12f4 <EXTI_vidInit+0xa4>
    1266:	59 c0       	rjmp	.+178    	; 0x131a <EXTI_vidInit+0xca>
    {
    case INT0_PIN:
            //2-set pin mode as i/p
            DIO_vidSetPinMode(GPIOD, PIN2, INPUT);
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	62 e0       	ldi	r22, 0x02	; 2
    126c:	83 e0       	ldi	r24, 0x03	; 3
    126e:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
            //3- clear bit
            CLR_BIT(MCUCR, ISC00);
    1272:	85 b7       	in	r24, 0x35	; 53
    1274:	8e 7f       	andi	r24, 0xFE	; 254
    1276:	85 bf       	out	0x35, r24	; 53
            CLR_BIT(MCUCR, ISC01);
    1278:	85 b7       	in	r24, 0x35	; 53
    127a:	8d 7f       	andi	r24, 0xFD	; 253
    127c:	85 bf       	out	0x35, r24	; 53
            //4- select firing source
            if(enuFiringSource == LOGICAL_CHANGE)
    127e:	c1 30       	cpi	r28, 0x01	; 1
    1280:	21 f4       	brne	.+8      	; 0x128a <EXTI_vidInit+0x3a>
            {
                SET_BIT(MCUCR, ISC00);
    1282:	85 b7       	in	r24, 0x35	; 53
    1284:	81 60       	ori	r24, 0x01	; 1
    1286:	85 bf       	out	0x35, r24	; 53
    1288:	0e c0       	rjmp	.+28     	; 0x12a6 <EXTI_vidInit+0x56>
            }
            else if (enuFiringSource == FALLING_EDGE)
    128a:	c2 30       	cpi	r28, 0x02	; 2
    128c:	21 f4       	brne	.+8      	; 0x1296 <EXTI_vidInit+0x46>
            {
                SET_BIT(MCUCR, ISC01);
    128e:	85 b7       	in	r24, 0x35	; 53
    1290:	82 60       	ori	r24, 0x02	; 2
    1292:	85 bf       	out	0x35, r24	; 53
    1294:	08 c0       	rjmp	.+16     	; 0x12a6 <EXTI_vidInit+0x56>
            }
            else if (enuFiringSource == RISING_EDGE)
    1296:	c3 30       	cpi	r28, 0x03	; 3
    1298:	31 f4       	brne	.+12     	; 0x12a6 <EXTI_vidInit+0x56>
            {
                SET_BIT(MCUCR, ISC00);
    129a:	85 b7       	in	r24, 0x35	; 53
    129c:	81 60       	ori	r24, 0x01	; 1
    129e:	85 bf       	out	0x35, r24	; 53
                SET_BIT(MCUCR, ISC01);
    12a0:	85 b7       	in	r24, 0x35	; 53
    12a2:	82 60       	ori	r24, 0x02	; 2
    12a4:	85 bf       	out	0x35, r24	; 53
            }
            else
            {
            }
            //5-enable interrupt
            SET_BIT(GICR, INT0);
    12a6:	8b b7       	in	r24, 0x3b	; 59
    12a8:	80 64       	ori	r24, 0x40	; 64
    12aa:	8b bf       	out	0x3b, r24	; 59
        break;
    12ac:	36 c0       	rjmp	.+108    	; 0x131a <EXTI_vidInit+0xca>
    
    case INT1_PIN:
            //2-set pin mode as i/p
            DIO_vidSetPinMode(GPIOD, PIN3, INPUT);
    12ae:	40 e0       	ldi	r20, 0x00	; 0
    12b0:	63 e0       	ldi	r22, 0x03	; 3
    12b2:	83 e0       	ldi	r24, 0x03	; 3
    12b4:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
            //3- clear bit
            CLR_BIT(MCUCR, ISC10);
    12b8:	85 b7       	in	r24, 0x35	; 53
    12ba:	8b 7f       	andi	r24, 0xFB	; 251
    12bc:	85 bf       	out	0x35, r24	; 53
            CLR_BIT(MCUCR, ISC11);
    12be:	85 b7       	in	r24, 0x35	; 53
    12c0:	87 7f       	andi	r24, 0xF7	; 247
    12c2:	85 bf       	out	0x35, r24	; 53
            //4- select firing source
            if(enuFiringSource == LOGICAL_CHANGE)
    12c4:	c1 30       	cpi	r28, 0x01	; 1
    12c6:	21 f4       	brne	.+8      	; 0x12d0 <EXTI_vidInit+0x80>
            {
                SET_BIT(MCUCR, ISC10);
    12c8:	85 b7       	in	r24, 0x35	; 53
    12ca:	84 60       	ori	r24, 0x04	; 4
    12cc:	85 bf       	out	0x35, r24	; 53
    12ce:	0e c0       	rjmp	.+28     	; 0x12ec <EXTI_vidInit+0x9c>
            }
            else if (enuFiringSource == FALLING_EDGE)
    12d0:	c2 30       	cpi	r28, 0x02	; 2
    12d2:	21 f4       	brne	.+8      	; 0x12dc <EXTI_vidInit+0x8c>
            {
                SET_BIT(MCUCR, ISC11);
    12d4:	85 b7       	in	r24, 0x35	; 53
    12d6:	88 60       	ori	r24, 0x08	; 8
    12d8:	85 bf       	out	0x35, r24	; 53
    12da:	08 c0       	rjmp	.+16     	; 0x12ec <EXTI_vidInit+0x9c>
            }
            else if (enuFiringSource == RISING_EDGE)
    12dc:	c3 30       	cpi	r28, 0x03	; 3
    12de:	31 f4       	brne	.+12     	; 0x12ec <EXTI_vidInit+0x9c>
            {
                SET_BIT(MCUCR, ISC10);
    12e0:	85 b7       	in	r24, 0x35	; 53
    12e2:	84 60       	ori	r24, 0x04	; 4
    12e4:	85 bf       	out	0x35, r24	; 53
                SET_BIT(MCUCR, ISC11);
    12e6:	85 b7       	in	r24, 0x35	; 53
    12e8:	88 60       	ori	r24, 0x08	; 8
    12ea:	85 bf       	out	0x35, r24	; 53
            }
            else
            {
            }
            //5-enable interrupt
            SET_BIT(GICR, INT1);
    12ec:	8b b7       	in	r24, 0x3b	; 59
    12ee:	80 68       	ori	r24, 0x80	; 128
    12f0:	8b bf       	out	0x3b, r24	; 59
        break;
    12f2:	13 c0       	rjmp	.+38     	; 0x131a <EXTI_vidInit+0xca>
        case INT2_PIN:
            //2-set pin mode as i/p
            DIO_vidSetPinMode(GPIOB, PIN2, INPUT);
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	62 e0       	ldi	r22, 0x02	; 2
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
            //4- select firing source
            if (enuFiringSource == FALLING_EDGE)
    12fe:	c2 30       	cpi	r28, 0x02	; 2
    1300:	21 f4       	brne	.+8      	; 0x130a <EXTI_vidInit+0xba>
            {
                CLR_BIT(MCUCSR, ISC2);
    1302:	84 b7       	in	r24, 0x34	; 52
    1304:	8f 7b       	andi	r24, 0xBF	; 191
    1306:	84 bf       	out	0x34, r24	; 52
    1308:	05 c0       	rjmp	.+10     	; 0x1314 <EXTI_vidInit+0xc4>
            }
            else if (enuFiringSource == RISING_EDGE)
    130a:	c3 30       	cpi	r28, 0x03	; 3
    130c:	19 f4       	brne	.+6      	; 0x1314 <EXTI_vidInit+0xc4>
            {
                SET_BIT(MCUCSR, ISC2);
    130e:	84 b7       	in	r24, 0x34	; 52
    1310:	80 64       	ori	r24, 0x40	; 64
    1312:	84 bf       	out	0x34, r24	; 52
            }
            else
            {
            }
            //5-enable interrupt
            SET_BIT(GICR, INT2);
    1314:	8b b7       	in	r24, 0x3b	; 59
    1316:	80 62       	ori	r24, 0x20	; 32
    1318:	8b bf       	out	0x3b, r24	; 59
        break;
    default:
        break;
    }
}
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <EXTI_vidSetCB>:
		/*Function Description: void function take two input and return void
								call back function when interrupt				*/
		/************************************************************************/
void EXTI_vidSetCB(_enuSOURCE_OF_INTERUPT enuInterruptNum, void (*PtrFunCB)(void))
{
    if(enuInterruptNum == INT0_PIN)
    131e:	81 11       	cpse	r24, r1
    1320:	05 c0       	rjmp	.+10     	; 0x132c <EXTI_vidSetCB+0xe>
    {
        LOC_PtrFunCBINT0 = PtrFunCB;
    1322:	70 93 3b 07 	sts	0x073B, r23	; 0x80073b <LOC_PtrFunCBINT0+0x1>
    1326:	60 93 3a 07 	sts	0x073A, r22	; 0x80073a <LOC_PtrFunCBINT0>
    132a:	08 95       	ret
    }
    else if(enuInterruptNum == INT1_PIN)
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	29 f4       	brne	.+10     	; 0x133a <EXTI_vidSetCB+0x1c>
    {
        LOC_PtrFunCBINT1 = PtrFunCB;
    1330:	70 93 3d 07 	sts	0x073D, r23	; 0x80073d <LOC_PtrFunCBINT1+0x1>
    1334:	60 93 3c 07 	sts	0x073C, r22	; 0x80073c <LOC_PtrFunCBINT1>
    1338:	08 95       	ret
    }
    else
    {
        LOC_PtrFunCBINT2 = PtrFunCB;
    133a:	70 93 39 07 	sts	0x0739, r23	; 0x800739 <LOC_PtrFunCBINT2+0x1>
    133e:	60 93 38 07 	sts	0x0738, r22	; 0x800738 <LOC_PtrFunCBINT2>
    1342:	08 95       	ret

00001344 <__vector_1>:
		/*Function Name: ISR													*/
		/*Function Input: one input (function)									*/
		/*Function Description: function that call when using interrupt pin zero*/
		/************************************************************************/
ISR(INT0_vect)
{
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	2f 93       	push	r18
    1350:	3f 93       	push	r19
    1352:	4f 93       	push	r20
    1354:	5f 93       	push	r21
    1356:	6f 93       	push	r22
    1358:	7f 93       	push	r23
    135a:	8f 93       	push	r24
    135c:	9f 93       	push	r25
    135e:	af 93       	push	r26
    1360:	bf 93       	push	r27
    1362:	ef 93       	push	r30
    1364:	ff 93       	push	r31
    (*LOC_PtrFunCBINT0)();
    1366:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <LOC_PtrFunCBINT0>
    136a:	f0 91 3b 07 	lds	r31, 0x073B	; 0x80073b <LOC_PtrFunCBINT0+0x1>
    136e:	09 95       	icall
}
    1370:	ff 91       	pop	r31
    1372:	ef 91       	pop	r30
    1374:	bf 91       	pop	r27
    1376:	af 91       	pop	r26
    1378:	9f 91       	pop	r25
    137a:	8f 91       	pop	r24
    137c:	7f 91       	pop	r23
    137e:	6f 91       	pop	r22
    1380:	5f 91       	pop	r21
    1382:	4f 91       	pop	r20
    1384:	3f 91       	pop	r19
    1386:	2f 91       	pop	r18
    1388:	0f 90       	pop	r0
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	0f 90       	pop	r0
    138e:	1f 90       	pop	r1
    1390:	18 95       	reti

00001392 <__vector_2>:
		/*Function Name: ISR													*/
		/*Function Input: one input (function)									*/
		/*Function Description: function that call when using interrupt pin one	*/
		/************************************************************************/
ISR(INT1_vect)
{
    1392:	1f 92       	push	r1
    1394:	0f 92       	push	r0
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	0f 92       	push	r0
    139a:	11 24       	eor	r1, r1
    139c:	2f 93       	push	r18
    139e:	3f 93       	push	r19
    13a0:	4f 93       	push	r20
    13a2:	5f 93       	push	r21
    13a4:	6f 93       	push	r22
    13a6:	7f 93       	push	r23
    13a8:	8f 93       	push	r24
    13aa:	9f 93       	push	r25
    13ac:	af 93       	push	r26
    13ae:	bf 93       	push	r27
    13b0:	ef 93       	push	r30
    13b2:	ff 93       	push	r31
    (*LOC_PtrFunCBINT1)();
    13b4:	e0 91 3c 07 	lds	r30, 0x073C	; 0x80073c <LOC_PtrFunCBINT1>
    13b8:	f0 91 3d 07 	lds	r31, 0x073D	; 0x80073d <LOC_PtrFunCBINT1+0x1>
    13bc:	09 95       	icall
}
    13be:	ff 91       	pop	r31
    13c0:	ef 91       	pop	r30
    13c2:	bf 91       	pop	r27
    13c4:	af 91       	pop	r26
    13c6:	9f 91       	pop	r25
    13c8:	8f 91       	pop	r24
    13ca:	7f 91       	pop	r23
    13cc:	6f 91       	pop	r22
    13ce:	5f 91       	pop	r21
    13d0:	4f 91       	pop	r20
    13d2:	3f 91       	pop	r19
    13d4:	2f 91       	pop	r18
    13d6:	0f 90       	pop	r0
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	0f 90       	pop	r0
    13dc:	1f 90       	pop	r1
    13de:	18 95       	reti

000013e0 <__vector_3>:
		/*Function Name: ISR													*/
		/*Function Input: one input (function)									*/
		/*Function Description: function that call when using interrupt pin two	*/
		/************************************************************************/
ISR(INT2_vect)
{
    13e0:	1f 92       	push	r1
    13e2:	0f 92       	push	r0
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	0f 92       	push	r0
    13e8:	11 24       	eor	r1, r1
    13ea:	2f 93       	push	r18
    13ec:	3f 93       	push	r19
    13ee:	4f 93       	push	r20
    13f0:	5f 93       	push	r21
    13f2:	6f 93       	push	r22
    13f4:	7f 93       	push	r23
    13f6:	8f 93       	push	r24
    13f8:	9f 93       	push	r25
    13fa:	af 93       	push	r26
    13fc:	bf 93       	push	r27
    13fe:	ef 93       	push	r30
    1400:	ff 93       	push	r31
    (*LOC_PtrFunCBINT2)(); 
    1402:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <LOC_PtrFunCBINT2>
    1406:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <LOC_PtrFunCBINT2+0x1>
    140a:	09 95       	icall
}
    140c:	ff 91       	pop	r31
    140e:	ef 91       	pop	r30
    1410:	bf 91       	pop	r27
    1412:	af 91       	pop	r26
    1414:	9f 91       	pop	r25
    1416:	8f 91       	pop	r24
    1418:	7f 91       	pop	r23
    141a:	6f 91       	pop	r22
    141c:	5f 91       	pop	r21
    141e:	4f 91       	pop	r20
    1420:	3f 91       	pop	r19
    1422:	2f 91       	pop	r18
    1424:	0f 90       	pop	r0
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	0f 90       	pop	r0
    142a:	1f 90       	pop	r1
    142c:	18 95       	reti

0000142e <KPD_vidInit>:
		/*Function Input: two input (PortNum, InputNibble)						*/
		/*Function Description: void function take two input and return void
								initialize keypad								*/
		/************************************************************************/
void KPD_vidInit(_enuGPIOx enuPortNum, _enuNIBBLEx enuInputNibble)
{
    142e:	cf 93       	push	r28
    1430:	c8 2f       	mov	r28, r24
    if(enuInputNibble == LOW_NIBBLE)
    1432:	61 11       	cpse	r22, r1
    1434:	0b c0       	rjmp	.+22     	; 0x144c <KPD_vidInit+0x1e>
    {
        DIO_vidSetLowNibbleMode(enuPortNum, INPUT); // Set Column Input
    1436:	0e 94 ac 08 	call	0x1158	; 0x1158 <DIO_vidSetLowNibbleMode>
        DIO_vidSetHighNibbleMode(enuPortNum, OUTPUT); // Set ROW as Output
    143a:	61 e0       	ldi	r22, 0x01	; 1
    143c:	8c 2f       	mov	r24, r28
    143e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_vidSetHighNibbleMode>
        DIO_vidWriteLowNibble(enuPortNum, 0x0F); // Enable Internal Pull Up
    1442:	6f e0       	ldi	r22, 0x0F	; 15
    1444:	8c 2f       	mov	r24, r28
    1446:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_vidWriteLowNibble>
    144a:	0b c0       	rjmp	.+22     	; 0x1462 <KPD_vidInit+0x34>
    }
    else
    {
        DIO_vidSetHighNibbleMode(enuPortNum, INPUT); // Set Column Input
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_vidSetHighNibbleMode>
        DIO_vidSetLowNibbleMode(enuPortNum, OUTPUT); // Set ROW as Output
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	8c 2f       	mov	r24, r28
    1456:	0e 94 ac 08 	call	0x1158	; 0x1158 <DIO_vidSetLowNibbleMode>
        DIO_vidWriteHighNibble(enuPortNum, 0xF0); // Enable Internal Pull Up
    145a:	60 ef       	ldi	r22, 0xF0	; 240
    145c:	8c 2f       	mov	r24, r28
    145e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_vidWriteHighNibble>
    }
}
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

00001466 <KPD_u8GetPressedKey>:
		/*Function Input: two input (PortNum, InputNibble)						*/
		/*Function Description: u8 function take two input and return u8
								get value of keypad	pressed key					*/
		/************************************************************************/
u8 KPD_u8GetPressedKey(_enuGPIOx enuPortNum, _enuNIBBLEx enuInputNibble)
{
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	60 97       	sbiw	r28, 0x10	; 16
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	08 2f       	mov	r16, r24
    u8 KeysArr[4][4]={{'7','8','9','A'},{'4','5','6','B'},{'1','2','3','C'},{'E','0','M','D'}};
    1482:	80 e1       	ldi	r24, 0x10	; 16
    1484:	e0 e6       	ldi	r30, 0x60	; 96
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	de 01       	movw	r26, r28
    148a:	11 96       	adiw	r26, 0x01	; 1
    148c:	01 90       	ld	r0, Z+
    148e:	0d 92       	st	X+, r0
    1490:	8a 95       	dec	r24
    1492:	e1 f7       	brne	.-8      	; 0x148c <KPD_u8GetPressedKey+0x26>
    u8 u8Rows;
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
    if(enuInputNibble == LOW_NIBBLE)
    1494:	61 11       	cpse	r22, r1
    1496:	16 c0       	rjmp	.+44     	; 0x14c4 <KPD_u8GetPressedKey+0x5e>
    1498:	f1 2c       	mov	r15, r1
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteHighNibble(enuPortNum, 0xF0);
    149a:	60 ef       	ldi	r22, 0xF0	; 240
    149c:	80 2f       	mov	r24, r16
    149e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_vidWriteHighNibble>
            DIO_vidWritePin(enuPortNum, (u8Rows+4), LOW);
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	64 e0       	ldi	r22, 0x04	; 4
    14a6:	6f 0d       	add	r22, r15
    14a8:	80 2f       	mov	r24, r16
    14aa:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
            for(u8Column = 0; u8Column <= 3; u8Column++)
    14ae:	10 e0       	ldi	r17, 0x00	; 0
            {
                enuReadValue = DIO_enuReadPin(enuPortNum, u8Column);
    14b0:	61 2f       	mov	r22, r17
    14b2:	80 2f       	mov	r24, r16
    14b4:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_enuReadPin>
                if(LOW == enuReadValue)
    14b8:	88 23       	and	r24, r24
    14ba:	d1 f0       	breq	.+52     	; 0x14f0 <KPD_u8GetPressedKey+0x8a>
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteHighNibble(enuPortNum, 0xF0);
            DIO_vidWritePin(enuPortNum, (u8Rows+4), LOW);
            for(u8Column = 0; u8Column <= 3; u8Column++)
    14bc:	1f 5f       	subi	r17, 0xFF	; 255
    14be:	14 30       	cpi	r17, 0x04	; 4
    14c0:	b9 f7       	brne	.-18     	; 0x14b0 <KPD_u8GetPressedKey+0x4a>
    14c2:	23 c0       	rjmp	.+70     	; 0x150a <KPD_u8GetPressedKey+0xa4>
    14c4:	f1 2c       	mov	r15, r1
    }
    else
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteLowNibble(enuPortNum, 0x0F);
    14c6:	6f e0       	ldi	r22, 0x0F	; 15
    14c8:	80 2f       	mov	r24, r16
    14ca:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_vidWriteLowNibble>
            DIO_vidWritePin(enuPortNum, (u8Rows), LOW);
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	6f 2d       	mov	r22, r15
    14d2:	80 2f       	mov	r24, r16
    14d4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
            for(u8Column = 0; u8Column <= 3; u8Column++)
    14d8:	10 e0       	ldi	r17, 0x00	; 0
            {
                enuReadValue = DIO_enuReadPin(enuPortNum, (u8Column+4));
    14da:	64 e0       	ldi	r22, 0x04	; 4
    14dc:	61 0f       	add	r22, r17
    14de:	80 2f       	mov	r24, r16
    14e0:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_enuReadPin>
                if(LOW == enuReadValue)
    14e4:	88 23       	and	r24, r24
    14e6:	b9 f0       	breq	.+46     	; 0x1516 <KPD_u8GetPressedKey+0xb0>
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteLowNibble(enuPortNum, 0x0F);
            DIO_vidWritePin(enuPortNum, (u8Rows), LOW);
            for(u8Column = 0; u8Column <= 3; u8Column++)
    14e8:	1f 5f       	subi	r17, 0xFF	; 255
    14ea:	14 30       	cpi	r17, 0x04	; 4
    14ec:	b1 f7       	brne	.-20     	; 0x14da <KPD_u8GetPressedKey+0x74>
    14ee:	20 c0       	rjmp	.+64     	; 0x1530 <KPD_u8GetPressedKey+0xca>
                {
                }
            }
            if (LOW == enuReadValue)
            {
                u8ReturnedValue = KeysArr[u8Rows][u8Column];
    14f0:	e1 e0       	ldi	r30, 0x01	; 1
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	ec 0f       	add	r30, r28
    14f6:	fd 1f       	adc	r31, r29
    14f8:	84 e0       	ldi	r24, 0x04	; 4
    14fa:	f8 9e       	mul	r15, r24
    14fc:	e0 0d       	add	r30, r0
    14fe:	f1 1d       	adc	r31, r1
    1500:	11 24       	eor	r1, r1
    1502:	e1 0f       	add	r30, r17
    1504:	f1 1d       	adc	r31, r1
    1506:	80 81       	ld	r24, Z
                break;
    1508:	18 c0       	rjmp	.+48     	; 0x153a <KPD_u8GetPressedKey+0xd4>
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
    if(enuInputNibble == LOW_NIBBLE)
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
    150a:	f3 94       	inc	r15
    150c:	84 e0       	ldi	r24, 0x04	; 4
    150e:	f8 12       	cpse	r15, r24
    1510:	c4 cf       	rjmp	.-120    	; 0x149a <KPD_u8GetPressedKey+0x34>
{
    u8 KeysArr[4][4]={{'7','8','9','A'},{'4','5','6','B'},{'1','2','3','C'},{'E','0','M','D'}};
    u8 u8Rows;
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
    1512:	8f ef       	ldi	r24, 0xFF	; 255
    1514:	12 c0       	rjmp	.+36     	; 0x153a <KPD_u8GetPressedKey+0xd4>
                {
                }
            }
            if (LOW == enuReadValue)
            {
                u8ReturnedValue = KeysArr[u8Rows][u8Column];
    1516:	e1 e0       	ldi	r30, 0x01	; 1
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	ec 0f       	add	r30, r28
    151c:	fd 1f       	adc	r31, r29
    151e:	84 e0       	ldi	r24, 0x04	; 4
    1520:	f8 9e       	mul	r15, r24
    1522:	e0 0d       	add	r30, r0
    1524:	f1 1d       	adc	r31, r1
    1526:	11 24       	eor	r1, r1
    1528:	e1 0f       	add	r30, r17
    152a:	f1 1d       	adc	r31, r1
    152c:	80 81       	ld	r24, Z
                break;
    152e:	05 c0       	rjmp	.+10     	; 0x153a <KPD_u8GetPressedKey+0xd4>
            }
        }
    }
    else
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
    1530:	f3 94       	inc	r15
    1532:	84 e0       	ldi	r24, 0x04	; 4
    1534:	f8 12       	cpse	r15, r24
    1536:	c7 cf       	rjmp	.-114    	; 0x14c6 <KPD_u8GetPressedKey+0x60>
{
    u8 KeysArr[4][4]={{'7','8','9','A'},{'4','5','6','B'},{'1','2','3','C'},{'E','0','M','D'}};
    u8 u8Rows;
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
    1538:	8f ef       	ldi	r24, 0xFF	; 255
            {
            }
        }
    }
    return u8ReturnedValue;
    153a:	60 96       	adiw	r28, 0x10	; 16
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	ff 90       	pop	r15
    1550:	08 95       	ret

00001552 <LCD_vidSendEnablePulse>:
		/*Function Description: void function take void input and return void
								send enable pulse to  LCD						*/
		/************************************************************************/
static void LCD_vidSendEnablePulse(void)
{
    DIO_vidWritePin(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    1552:	41 e0       	ldi	r20, 0x01	; 1
    1554:	63 e0       	ldi	r22, 0x03	; 3
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
    155c:	8f e9       	ldi	r24, 0x9F	; 159
    155e:	9f e0       	ldi	r25, 0x0F	; 15
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	f1 f7       	brne	.-4      	; 0x1560 <LCD_vidSendEnablePulse+0xe>
    1564:	00 c0       	rjmp	.+0      	; 0x1566 <LCD_vidSendEnablePulse+0x14>
    1566:	00 00       	nop
    _delay_ms(2);
    DIO_vidWritePin(LCD_EN_PORT, LCD_EN_PIN, LOW);
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	63 e0       	ldi	r22, 0x03	; 3
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
    1572:	08 95       	ret

00001574 <LCD_vidSendCmd>:
		/*Function Input: one input (CMD)										*/
		/*Function Description: void function take one input and return void
								send command to LCD								*/
		/************************************************************************/
static void LCD_vidSendCmd(u8 u8Cmd)
{
    1574:	cf 93       	push	r28
    1576:	c8 2f       	mov	r28, r24
    DIO_vidWritePin(LCD_RW_PORT, LCD_RW_PIN, LOW); // Set Write Operation
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
    DIO_vidWritePin(LCD_RS_PORT, LCD_RS_PIN, LOW); // Select Command Register
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
            LCD_vidSendEnablePulse();
			_delay_ms(2);
            DIO_vidWriteLowNibble(LCD_DATA_PORT, (u8Cmd));
            LCD_vidSendEnablePulse();
        #else
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Cmd));
    158c:	6c 2f       	mov	r22, r28
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
    1594:	0e 94 a9 0a 	call	0x1552	; 0x1552 <LCD_vidSendEnablePulse>
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Cmd<<4));
    1598:	6c 2f       	mov	r22, r28
    159a:	62 95       	swap	r22
    159c:	60 7f       	andi	r22, 0xF0	; 240
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
    15a4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <LCD_vidSendEnablePulse>
        #endif
    #endif
}
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <LCD_vidInit>:
    15ac:	2f ef       	ldi	r18, 0xFF	; 255
    15ae:	81 ee       	ldi	r24, 0xE1	; 225
    15b0:	94 e0       	ldi	r25, 0x04	; 4
    15b2:	21 50       	subi	r18, 0x01	; 1
    15b4:	80 40       	sbci	r24, 0x00	; 0
    15b6:	90 40       	sbci	r25, 0x00	; 0
    15b8:	e1 f7       	brne	.-8      	; 0x15b2 <LCD_vidInit+0x6>
    15ba:	00 c0       	rjmp	.+0      	; 0x15bc <LCD_vidInit+0x10>
    15bc:	00 00       	nop
								initialize LCD									*/
		/************************************************************************/
void LCD_vidInit(void)
{
    _delay_ms(200);
    DIO_vidSetPinMode(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    15be:	41 e0       	ldi	r20, 0x01	; 1
    15c0:	61 e0       	ldi	r22, 0x01	; 1
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
    DIO_vidSetPinMode(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    15c8:	41 e0       	ldi	r20, 0x01	; 1
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
    DIO_vidSetPinMode(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    15d2:	41 e0       	ldi	r20, 0x01	; 1
    15d4:	63 e0       	ldi	r22, 0x03	; 3
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
        _delay_ms(1);
    #else
        #if  NIBBLE_MODE  == LOW_NIBBLE
            DIO_vidSetLowNibbleMode(LCD_DATA_PORT, OUTPUT);
        #else
            DIO_vidSetHighNibbleMode(LCD_DATA_PORT, OUTPUT);
    15dc:	61 e0       	ldi	r22, 0x01	; 1
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_vidSetHighNibbleMode>
        #endif 
       LCD_vidSendCmd(LCD_RETURN_HOME);
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_vidSendCmd>
    15ea:	8f e2       	ldi	r24, 0x2F	; 47
    15ec:	95 e7       	ldi	r25, 0x75	; 117
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <LCD_vidInit+0x42>
    15f2:	00 c0       	rjmp	.+0      	; 0x15f4 <LCD_vidInit+0x48>
    15f4:	00 00       	nop
        _delay_ms(15);
		LCD_vidSendCmd(LCD_FUNCTION_4BIT_2LINES);
    15f6:	88 e2       	ldi	r24, 0x28	; 40
    15f8:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_vidSendCmd>
    15fc:	8f ec       	ldi	r24, 0xCF	; 207
    15fe:	97 e0       	ldi	r25, 0x07	; 7
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <LCD_vidInit+0x54>
    1604:	00 c0       	rjmp	.+0      	; 0x1606 <LCD_vidInit+0x5a>
    1606:	00 00       	nop
        _delay_ms(1);
    #endif
    LCD_vidSendCmd(LCD_DISP_ON_CURSOR_ON);
    1608:	8e e0       	ldi	r24, 0x0E	; 14
    160a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_vidSendCmd>
    160e:	8f ec       	ldi	r24, 0xCF	; 207
    1610:	97 e0       	ldi	r25, 0x07	; 7
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <LCD_vidInit+0x66>
    1616:	00 c0       	rjmp	.+0      	; 0x1618 <LCD_vidInit+0x6c>
    1618:	00 00       	nop
    _delay_ms(1);
    LCD_vidSendCmd(LCD_CLEAR_SCREEN);
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_vidSendCmd>
    1620:	8f e1       	ldi	r24, 0x1F	; 31
    1622:	9e e4       	ldi	r25, 0x4E	; 78
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	f1 f7       	brne	.-4      	; 0x1624 <LCD_vidInit+0x78>
    1628:	00 c0       	rjmp	.+0      	; 0x162a <LCD_vidInit+0x7e>
    162a:	00 00       	nop
    _delay_ms(10);
    LCD_vidSendCmd(LCD_ENTRY_MODE);
    162c:	86 e0       	ldi	r24, 0x06	; 6
    162e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_vidSendCmd>
    1632:	08 95       	ret

00001634 <LCD_vidDisplayCharacter>:
		/*Function Input: one input (char)										*/
		/*Function Description: void function take one input and return void
								display character on LCD						*/
		/************************************************************************/
void LCD_vidDisplayCharacter(u8 u8Char)
{
    1634:	cf 93       	push	r28
    1636:	c8 2f       	mov	r28, r24
    DIO_vidWritePin(LCD_RW_PORT, LCD_RW_PIN, LOW); // Set Write Operation
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
    DIO_vidWritePin(LCD_RS_PORT, LCD_RS_PIN, HIGH); // Select Data Register
    1642:	41 e0       	ldi	r20, 0x01	; 1
    1644:	61 e0       	ldi	r22, 0x01	; 1
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
            DIO_vidWriteLowNibble(LCD_DATA_PORT, (u8Char>>4));
            LCD_vidSendEnablePulse();
            DIO_vidWriteLowNibble(LCD_DATA_PORT, (u8Char));
            LCD_vidSendEnablePulse();
        #else
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Char));
    164c:	6c 2f       	mov	r22, r28
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
    1654:	0e 94 a9 0a 	call	0x1552	; 0x1552 <LCD_vidSendEnablePulse>
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Char<<4));
    1658:	6c 2f       	mov	r22, r28
    165a:	62 95       	swap	r22
    165c:	60 7f       	andi	r22, 0xF0	; 240
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
    1664:	0e 94 a9 0a 	call	0x1552	; 0x1552 <LCD_vidSendEnablePulse>
        #endif
    #endif
}
    1668:	cf 91       	pop	r28
    166a:	08 95       	ret

0000166c <LCD_vidDisplayString>:
		/*Function Input: one input (pointer of string)							*/
		/*Function Description: void function take one input and return void
								display string on LCD							*/
		/************************************************************************/
void LCD_vidDisplayString(u8 *u8PtrString)
{
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	ec 01       	movw	r28, r24
    while(*u8PtrString != '\0')
    1672:	88 81       	ld	r24, Y
    1674:	88 23       	and	r24, r24
    1676:	31 f0       	breq	.+12     	; 0x1684 <LCD_vidDisplayString+0x18>
    1678:	21 96       	adiw	r28, 0x01	; 1
    {
        LCD_vidDisplayCharacter(*u8PtrString);
    167a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <LCD_vidDisplayCharacter>
		/*Function Description: void function take one input and return void
								display string on LCD							*/
		/************************************************************************/
void LCD_vidDisplayString(u8 *u8PtrString)
{
    while(*u8PtrString != '\0')
    167e:	89 91       	ld	r24, Y+
    1680:	81 11       	cpse	r24, r1
    1682:	fb cf       	rjmp	.-10     	; 0x167a <LCD_vidDisplayString+0xe>
    {
        LCD_vidDisplayCharacter(*u8PtrString);
        u8PtrString++;
    }
}
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	08 95       	ret

0000168a <LCD_vidDisplayNumber>:
		/*Function Input: one input (number)									*/
		/*Function Description: void function take one input and return void
								Display Number on LCD							*/
		/************************************************************************/
void LCD_vidDisplayNumber(u32 u32Number)
{
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	27 97       	sbiw	r28, 0x07	; 7
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
	u8 u8arr[7];
	sprintf(u8arr, "%d", u32Number); 
    16a2:	9f 93       	push	r25
    16a4:	8f 93       	push	r24
    16a6:	7f 93       	push	r23
    16a8:	6f 93       	push	r22
    16aa:	84 e8       	ldi	r24, 0x84	; 132
    16ac:	95 e0       	ldi	r25, 0x05	; 5
    16ae:	9f 93       	push	r25
    16b0:	8f 93       	push	r24
    16b2:	8e 01       	movw	r16, r28
    16b4:	0f 5f       	subi	r16, 0xFF	; 255
    16b6:	1f 4f       	sbci	r17, 0xFF	; 255
    16b8:	1f 93       	push	r17
    16ba:	0f 93       	push	r16
    16bc:	0e 94 2c 12 	call	0x2458	; 0x2458 <sprintf>
	LCD_vidDisplayString(u8arr);
    16c0:	c8 01       	movw	r24, r16
    16c2:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
}
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	27 96       	adiw	r28, 0x07	; 7
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	08 95       	ret

000016e6 <LCD_vidClearScreen>:
		/*Function Description: void function take void input and return void
								clear LCD										*/
		/************************************************************************/
void LCD_vidClearScreen(void)
{
	LCD_vidSendCmd(LCD_CLEAR_SCREEN);
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_vidSendCmd>
    16ec:	8f e1       	ldi	r24, 0x1F	; 31
    16ee:	9e e4       	ldi	r25, 0x4E	; 78
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <LCD_vidClearScreen+0xa>
    16f4:	00 c0       	rjmp	.+0      	; 0x16f6 <LCD_vidClearScreen+0x10>
    16f6:	00 00       	nop
    16f8:	08 95       	ret

000016fa <LCD_vidMoveCursor>:
								move LCD cursor									*/
		/************************************************************************/
void LCD_vidMoveCursor(u8 u8Line, u8 u8Position)
{
	u8 u8PositionCmd;
	if(u8Line == 1)
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	19 f4       	brne	.+6      	; 0x1704 <LCD_vidMoveCursor+0xa>
	{
		u8PositionCmd = 0x80 + (u8Position-1);
    16fe:	8f e7       	ldi	r24, 0x7F	; 127
    1700:	86 0f       	add	r24, r22
    1702:	0c c0       	rjmp	.+24     	; 0x171c <LCD_vidMoveCursor+0x22>
	}
	else if(u8Line == 2)
    1704:	82 30       	cpi	r24, 0x02	; 2
    1706:	19 f4       	brne	.+6      	; 0x170e <LCD_vidMoveCursor+0x14>
	{
		u8PositionCmd = 0xC0 + (u8Position-1);	
    1708:	8f eb       	ldi	r24, 0xBF	; 191
    170a:	86 0f       	add	r24, r22
    170c:	07 c0       	rjmp	.+14     	; 0x171c <LCD_vidMoveCursor+0x22>
	}
	else if(u8Line == 3)
    170e:	83 30       	cpi	r24, 0x03	; 3
    1710:	19 f4       	brne	.+6      	; 0x1718 <LCD_vidMoveCursor+0x1e>
	{
		u8PositionCmd = 0x90 + (u8Position-1);	
    1712:	8f e8       	ldi	r24, 0x8F	; 143
    1714:	86 0f       	add	r24, r22
    1716:	02 c0       	rjmp	.+4      	; 0x171c <LCD_vidMoveCursor+0x22>
	}
	else 
	{
		u8PositionCmd = 0xD0 + (u8Position-1);
    1718:	8f ec       	ldi	r24, 0xCF	; 207
    171a:	86 0f       	add	r24, r22
	}
	LCD_vidSendCmd(u8PositionCmd);
    171c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_vidSendCmd>
    1720:	08 95       	ret

00001722 <LED_vidInit>:
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void LED_vidInit(_enuGPIOx enuPortNum, _enuPINx enuPinNum)
{
    DIO_vidSetPinMode(enuPortNum, enuPinNum, OUTPUT);   
    1722:	41 e0       	ldi	r20, 0x01	; 1
    1724:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
    1728:	08 95       	ret

0000172a <LED_vidTurnOn>:
		/************************************************************************/
		/*													                    */
		/************************************************************************/
void LED_vidTurnOn(_enuGPIOx enuPortNum, _enuPINx enuPinNum)
{
    DIO_vidWritePin(enuPortNum, enuPinNum, HIGH);
    172a:	41 e0       	ldi	r20, 0x01	; 1
    172c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
    1730:	08 95       	ret

00001732 <LED_vidTurnOff>:
		/************************************************************************/
		/*													                    */
		/************************************************************************/
void LED_vidTurnOff(_enuGPIOx enuPortNum, _enuPINx enuPinNum)
{
    DIO_vidWritePin(enuPortNum, enuPinNum, LOW);
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
    1738:	08 95       	ret

0000173a <LM35_vidInit>:
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void LM35_vidInit(_enuADCChannels enuADCChannel)
{
    ADC_vidInit(enuADCChannel);
    173a:	0e 94 92 00 	call	0x124	; 0x124 <ADC_vidInit>
    173e:	08 95       	ret

00001740 <LM35_u8Read>:
		/************************************************************************/
u8 LM35_u8Read(void)
{
    u8 u8Temperature;
    u16 u16Value;
    u16Value = ADC_u16Read();
    1740:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <ADC_u16Read>
    u8Temperature = (u8)((float)u16Value * 0.25f);
    return u8Temperature;
    1744:	bc 01       	movw	r22, r24
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 09 11 	call	0x2212	; 0x2212 <__floatunsisf>
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e8       	ldi	r20, 0x80	; 128
    1754:	5e e3       	ldi	r21, 0x3E	; 62
    1756:	0e 94 97 11 	call	0x232e	; 0x232e <__mulsf3>
    175a:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__fixunssfsi>
    175e:	86 2f       	mov	r24, r22
}
    1760:	08 95       	ret

00001762 <fun>:
		/*Function Description: void function take void and return void
								start system with control in emergency			*/
		/************************************************************************/
void fun(void)			
{
	USART_vidSendByte('I');					// send data to slave
    1762:	89 e4       	ldi	r24, 0x49	; 73
    1764:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
	USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
    1768:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	start();								// call function that start system using keypad
    176c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <start>
    1770:	08 95       	ret

00001772 <devices>:
		/*Function Description: void function take void and return void                                                
								display devices status on LCD screen			*/
		/************************************************************************/
void devices(void)
{
	LCD_vidClearScreen();					// clear LCD screen
    1772:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
	LCD_vidMoveCursor(1,1);					// move cursor
    1776:	61 e0       	ldi	r22, 0x01	; 1
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString("R1: OFF");		// display string on LCD
    177e:	88 e0       	ldi	r24, 0x08	; 8
    1780:	91 e0       	ldi	r25, 0x01	; 1
    1782:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(1,8);					// move cursor
    1786:	68 e0       	ldi	r22, 0x08	; 8
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString(" R2: OFF");		// display string on LCD
    178e:	89 e1       	ldi	r24, 0x19	; 25
    1790:	91 e0       	ldi	r25, 0x01	; 1
    1792:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);					// move cursor
    1796:	61 e0       	ldi	r22, 0x01	; 1
    1798:	82 e0       	ldi	r24, 0x02	; 2
    179a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString("R3: OFF");		// display string on LCD
    179e:	8a e2       	ldi	r24, 0x2A	; 42
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,8);					// move cursor
    17a6:	68 e0       	ldi	r22, 0x08	; 8
    17a8:	82 e0       	ldi	r24, 0x02	; 2
    17aa:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString(" R4: OFF");		// display string on LCD
    17ae:	8b e3       	ldi	r24, 0x3B	; 59
    17b0:	91 e0       	ldi	r25, 0x01	; 1
    17b2:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);					// move cursor
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	83 e0       	ldi	r24, 0x03	; 3
    17ba:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString("R5: OFF");		// display string on LCD
    17be:	8c e4       	ldi	r24, 0x4C	; 76
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,8);					// move cursor
    17c6:	68 e0       	ldi	r22, 0x08	; 8
    17c8:	83 e0       	ldi	r24, 0x03	; 3
    17ca:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString(" R6: OFF");		// display string on LCD
    17ce:	8d e5       	ldi	r24, 0x5D	; 93
    17d0:	91 e0       	ldi	r25, 0x01	; 1
    17d2:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);					// move cursor
    17d6:	61 e0       	ldi	r22, 0x01	; 1
    17d8:	84 e0       	ldi	r24, 0x04	; 4
    17da:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString("Air:OFF ");		// display string on LCD
    17de:	8e e6       	ldi	r24, 0x6E	; 110
    17e0:	93 e0       	ldi	r25, 0x03	; 3
    17e2:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,9);					// move cursor
    17e6:	69 e0       	ldi	r22, 0x09	; 9
    17e8:	84 e0       	ldi	r24, 0x04	; 4
    17ea:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString("AL: OFF");		// display string on LCD
    17ee:	80 e6       	ldi	r24, 0x60	; 96
    17f0:	92 e0       	ldi	r25, 0x02	; 2
    17f2:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
    17f6:	08 95       	ret

000017f8 <start_control>:
		/*Function Description: void function take void and return void
								start system with control						*/
		/************************************************************************/
void start_control()
{
	LCD_vidMoveCursor(1,1);					// move LCD cursor
    17f8:	61 e0       	ldi	r22, 0x01	; 1
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString(" Welcome to ODC ");// display message on screen
    1800:	81 e9       	ldi	r24, 0x91	; 145
    1802:	95 e0       	ldi	r25, 0x05	; 5
    1804:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);					// move LCD cursor
    1808:	61 e0       	ldi	r22, 0x01	; 1
    180a:	82 e0       	ldi	r24, 0x02	; 2
    180c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString("   smart home ");	// display message on screen
    1810:	82 ea       	ldi	r24, 0xA2	; 162
    1812:	95 e0       	ldi	r25, 0x05	; 5
    1814:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidClearScreen();					// clear LCD screen
    1818:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
	LCD_vidMoveCursor(1,2);					// move cursor
    181c:	62 e0       	ldi	r22, 0x02	; 2
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString(" connected ");	// display message on LCD
    1824:	81 eb       	ldi	r24, 0xB1	; 177
    1826:	95 e0       	ldi	r25, 0x05	; 5
    1828:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,2);					// move cursor
    182c:	62 e0       	ldi	r22, 0x02	; 2
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString(" remotely ");		// display message on LCD
    1834:	8d eb       	ldi	r24, 0xBD	; 189
    1836:	95 e0       	ldi	r25, 0x05	; 5
    1838:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,2);					// move cursor
    183c:	62 e0       	ldi	r22, 0x02	; 2
    183e:	83 e0       	ldi	r24, 0x03	; 3
    1840:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString(" Successfully ");	// display message on LCD
    1844:	8b e0       	ldi	r24, 0x0B	; 11
    1846:	94 e0       	ldi	r25, 0x04	; 4
    1848:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
    184c:	2f e7       	ldi	r18, 0x7F	; 127
    184e:	89 ea       	ldi	r24, 0xA9	; 169
    1850:	93 e0       	ldi	r25, 0x03	; 3
    1852:	21 50       	subi	r18, 0x01	; 1
    1854:	80 40       	sbci	r24, 0x00	; 0
    1856:	90 40       	sbci	r25, 0x00	; 0
    1858:	e1 f7       	brne	.-8      	; 0x1852 <start_control+0x5a>
    185a:	00 c0       	rjmp	.+0      	; 0x185c <start_control+0x64>
    185c:	00 00       	nop
	_delay_ms(150);							// wait for 150 m second
	devices();								// call function that display devices status 
    185e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <devices>
	USART_vidSendByte('R');					// send data to slave
    1862:	82 e5       	ldi	r24, 0x52	; 82
    1864:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
	USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
    1868:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	USART_vidSendByte('I');					// send data to slave
    186c:	89 e4       	ldi	r24, 0x49	; 73
    186e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
	USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
    1872:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <USART_vidEnableTXInterrupt>
	
	Bluetooth_Control();					// control system remotely 
    1876:	0e 94 56 05 	call	0xaac	; 0xaac <Bluetooth_Control>
    187a:	08 95       	ret

0000187c <main>:
		/************************************************************************/
		/*                       main function		                            */
		/************************************************************************/
int main(void)
{
	LM35_vidInit(ADC_CH0);					// initialize LM35 (temp sensor)
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	0e 94 9d 0b 	call	0x173a	; 0x173a <LM35_vidInit>
	USART_vidInit(9600);					// initialize UART protocol with baud rate 9600
    1882:	60 e8       	ldi	r22, 0x80	; 128
    1884:	75 e2       	ldi	r23, 0x25	; 37
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 18 10 	call	0x2030	; 0x2030 <USART_vidInit>
	LCD_vidInit();							// initialize LCD
    188e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <LCD_vidInit>
	KPD_vidInit(GPIOC, HIGH_NIBBLE);		// initialize KPD
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	0e 94 17 0a 	call	0x142e	; 0x142e <KPD_vidInit>
	Servo_Init();							// initialize servo motor
    189a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Servo_Init>
	LED_vidInit(GPIOD, PIN3);				// initialize LED at port D pin 3
    189e:	63 e0       	ldi	r22, 0x03	; 3
    18a0:	83 e0       	ldi	r24, 0x03	; 3
    18a2:	0e 94 91 0b 	call	0x1722	; 0x1722 <LED_vidInit>
	LED_vidInit(GPIOD, PIN4);				// initialize LED at port D pin 4
    18a6:	64 e0       	ldi	r22, 0x04	; 4
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	0e 94 91 0b 	call	0x1722	; 0x1722 <LED_vidInit>
	LED_vidInit(GPIOB, PIN5);				// initialize LED at port B pin 5
    18ae:	65 e0       	ldi	r22, 0x05	; 5
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	0e 94 91 0b 	call	0x1722	; 0x1722 <LED_vidInit>
	LED_vidInit(GPIOD, PIN2);				// initialize LED at port D pin 2
    18b6:	62 e0       	ldi	r22, 0x02	; 2
    18b8:	83 e0       	ldi	r24, 0x03	; 3
    18ba:	0e 94 91 0b 	call	0x1722	; 0x1722 <LED_vidInit>
	LED_vidInit(GPIOD, PIN6);				// initialize LED at port D pin 6
    18be:	66 e0       	ldi	r22, 0x06	; 6
    18c0:	83 e0       	ldi	r24, 0x03	; 3
    18c2:	0e 94 91 0b 	call	0x1722	; 0x1722 <LED_vidInit>
	DIO_vidSetPinMode(GPIOD, PIN7, OUTPUT);	// initialize pin 7 at port D as output
    18c6:	41 e0       	ldi	r20, 0x01	; 1
    18c8:	67 e0       	ldi	r22, 0x07	; 7
    18ca:	83 e0       	ldi	r24, 0x03	; 3
    18cc:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
    SWT_vidInti(GPIOB, PIN2);				// initialize switch on port B pin2
    18d0:	62 e0       	ldi	r22, 0x02	; 2
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	0e 94 14 10 	call	0x2028	; 0x2028 <SWT_vidInti>
    EXTI_vidInit(INT2_PIN, RISING_EDGE);	// initialize external interrupt in interrupt pin2 with low level
    18d8:	63 e0       	ldi	r22, 0x03	; 3
    18da:	82 e0       	ldi	r24, 0x02	; 2
    18dc:	0e 94 28 09 	call	0x1250	; 0x1250 <EXTI_vidInit>
    EXTI_vidSetCB(INT2_PIN, &fun);			// external interrupt set callback function that call function that control start
    18e0:	61 eb       	ldi	r22, 0xB1	; 177
    18e2:	7b e0       	ldi	r23, 0x0B	; 11
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	0e 94 8f 09 	call	0x131e	; 0x131e <EXTI_vidSetCB>
	start_control();						// start the system
    18ea:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <start_control>
    18ee:	ff cf       	rjmp	.-2      	; 0x18ee <main+0x72>

000018f0 <Servo_Init>:
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void Servo_Init(void)
{
	DDRD |= (1<<PD5);								/* Initialise OC1A pin as output */
    18f0:	8d 9a       	sbi	0x11, 5	; 17
	TCNT1 = 0;										/* Set timer1 count zero */
    18f2:	1d bc       	out	0x2d, r1	; 45
    18f4:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;									/* Set TOP count for timer1 in ICR1 register */
    18f6:	83 ec       	ldi	r24, 0xC3	; 195
    18f8:	99 e0       	ldi	r25, 0x09	; 9
    18fa:	97 bd       	out	0x27, r25	; 39
    18fc:	86 bd       	out	0x26, r24	; 38
	TCCR1A = (1<<WGM11)|(1<<COM1A1);				/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, prescaler=64, timer=125kHz */
    18fe:	82 e8       	ldi	r24, 0x82	; 130
    1900:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
    1902:	8b e1       	ldi	r24, 0x1B	; 27
    1904:	8e bd       	out	0x2e, r24	; 46
    1906:	08 95       	ret

00001908 <Servo_Clockwise>:
}
void Servo_Clockwise(u8 angle)
{
	if(angle>Max_Angle)
    1908:	8b 35       	cpi	r24, 0x5B	; 91
    190a:	b0 f4       	brcc	.+44     	; 0x1938 <Servo_Clockwise+0x30>
	{
		angle=Max_Angle;
	}
	else
	{
		OCR1A = (1.2912*angle)+Position_OCR1A;  //Servo rotates in clockwise direction, min angle=0 max angle=90
    190c:	68 2f       	mov	r22, r24
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 0b 11 	call	0x2216	; 0x2216 <__floatsisf>
    1918:	2b e0       	ldi	r18, 0x0B	; 11
    191a:	36 e4       	ldi	r19, 0x46	; 70
    191c:	45 ea       	ldi	r20, 0xA5	; 165
    191e:	5f e3       	ldi	r21, 0x3F	; 63
    1920:	0e 94 97 11 	call	0x232e	; 0x232e <__mulsf3>
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	46 e3       	ldi	r20, 0x36	; 54
    192a:	53 e4       	ldi	r21, 0x43	; 67
    192c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__addsf3>
    1930:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__fixunssfsi>
    1934:	7b bd       	out	0x2b, r23	; 43
    1936:	6a bd       	out	0x2a, r22	; 42
    1938:	08 95       	ret

0000193a <Servo_Counterclockwise>:

}

void Servo_Counterclockwise(u8 angle)
{
	if(angle>Max_Angle)
    193a:	8b 35       	cpi	r24, 0x5B	; 91
    193c:	b0 f4       	brcc	.+44     	; 0x196a <Servo_Counterclockwise+0x30>
	{
		angle=Max_Angle;
	}
	else
	{
		OCR1A = (-1.2912*angle)+Position_OCR1A;  //Servo rotates in counterclockwise direction, min angle=-90 max angle=0
    193e:	68 2f       	mov	r22, r24
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 0b 11 	call	0x2216	; 0x2216 <__floatsisf>
    194a:	2b e0       	ldi	r18, 0x0B	; 11
    194c:	36 e4       	ldi	r19, 0x46	; 70
    194e:	45 ea       	ldi	r20, 0xA5	; 165
    1950:	5f eb       	ldi	r21, 0xBF	; 191
    1952:	0e 94 97 11 	call	0x232e	; 0x232e <__mulsf3>
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	46 e3       	ldi	r20, 0x36	; 54
    195c:	53 e4       	ldi	r21, 0x43	; 67
    195e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__addsf3>
    1962:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__fixunssfsi>
    1966:	7b bd       	out	0x2b, r23	; 43
    1968:	6a bd       	out	0x2a, r22	; 42
    196a:	08 95       	ret

0000196c <Scan_pass>:
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM 
	{
		pass[i] = 'F';									// encrypt pass entered before store in EEPROM by(XOR pass with KEY) 
		EEPROM_vidWrite(Pass_Address + i, pass[i]);		// save pass in EEPROM
	}
}
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	02 e2       	ldi	r16, 0x22	; 34
    1974:	17 e0       	ldi	r17, 0x07	; 7
    1976:	c3 e0       	ldi	r28, 0x03	; 3
    1978:	61 e0       	ldi	r22, 0x01	; 1
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	0e 94 33 0a 	call	0x1466	; 0x1466 <KPD_u8GetPressedKey>
    1980:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
    1984:	2f ef       	ldi	r18, 0xFF	; 255
    1986:	81 ee       	ldi	r24, 0xE1	; 225
    1988:	94 e0       	ldi	r25, 0x04	; 4
    198a:	21 50       	subi	r18, 0x01	; 1
    198c:	80 40       	sbci	r24, 0x00	; 0
    198e:	90 40       	sbci	r25, 0x00	; 0
    1990:	e1 f7       	brne	.-8      	; 0x198a <Scan_pass+0x1e>
    1992:	00 c0       	rjmp	.+0      	; 0x1994 <Scan_pass+0x28>
    1994:	00 00       	nop
    1996:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
    199a:	8f 3f       	cpi	r24, 0xFF	; 255
    199c:	69 f3       	breq	.-38     	; 0x1978 <Scan_pass+0xc>
    199e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <LCD_vidDisplayCharacter>
    19a2:	ef e7       	ldi	r30, 0x7F	; 127
    19a4:	f9 ea       	ldi	r31, 0xA9	; 169
    19a6:	23 e0       	ldi	r18, 0x03	; 3
    19a8:	e1 50       	subi	r30, 0x01	; 1
    19aa:	f0 40       	sbci	r31, 0x00	; 0
    19ac:	20 40       	sbci	r18, 0x00	; 0
    19ae:	e1 f7       	brne	.-8      	; 0x19a8 <Scan_pass+0x3c>
    19b0:	00 c0       	rjmp	.+0      	; 0x19b2 <Scan_pass+0x46>
    19b2:	00 00       	nop
    19b4:	6c 2f       	mov	r22, r28
    19b6:	84 e0       	ldi	r24, 0x04	; 4
    19b8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
    19bc:	8a e2       	ldi	r24, 0x2A	; 42
    19be:	0e 94 1a 0b 	call	0x1634	; 0x1634 <LCD_vidDisplayCharacter>
    19c2:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
    19c6:	f8 01       	movw	r30, r16
    19c8:	81 93       	st	Z+, r24
    19ca:	8f 01       	movw	r16, r30
    19cc:	cf 5f       	subi	r28, 0xFF	; 255
    19ce:	c7 30       	cpi	r28, 0x07	; 7
    19d0:	99 f6       	brne	.-90     	; 0x1978 <Scan_pass+0xc>
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	08 95       	ret

000019da <Scan_user>:
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	ca e2       	ldi	r28, 0x2A	; 42
    19e4:	d7 e0       	ldi	r29, 0x07	; 7
    19e6:	0e e2       	ldi	r16, 0x2E	; 46
    19e8:	17 e0       	ldi	r17, 0x07	; 7
    19ea:	61 e0       	ldi	r22, 0x01	; 1
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	0e 94 33 0a 	call	0x1466	; 0x1466 <KPD_u8GetPressedKey>
    19f2:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
    19f6:	2f ef       	ldi	r18, 0xFF	; 255
    19f8:	81 ee       	ldi	r24, 0xE1	; 225
    19fa:	94 e0       	ldi	r25, 0x04	; 4
    19fc:	21 50       	subi	r18, 0x01	; 1
    19fe:	80 40       	sbci	r24, 0x00	; 0
    1a00:	90 40       	sbci	r25, 0x00	; 0
    1a02:	e1 f7       	brne	.-8      	; 0x19fc <Scan_user+0x22>
    1a04:	00 c0       	rjmp	.+0      	; 0x1a06 <Scan_user+0x2c>
    1a06:	00 00       	nop
    1a08:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
    1a0c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a0e:	69 f3       	breq	.-38     	; 0x19ea <Scan_user+0x10>
    1a10:	0e 94 1a 0b 	call	0x1634	; 0x1634 <LCD_vidDisplayCharacter>
    1a14:	2f e7       	ldi	r18, 0x7F	; 127
    1a16:	89 ea       	ldi	r24, 0xA9	; 169
    1a18:	93 e0       	ldi	r25, 0x03	; 3
    1a1a:	21 50       	subi	r18, 0x01	; 1
    1a1c:	80 40       	sbci	r24, 0x00	; 0
    1a1e:	90 40       	sbci	r25, 0x00	; 0
    1a20:	e1 f7       	brne	.-8      	; 0x1a1a <Scan_user+0x40>
    1a22:	00 c0       	rjmp	.+0      	; 0x1a24 <Scan_user+0x4a>
    1a24:	00 00       	nop
    1a26:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
    1a2a:	89 93       	st	Y+, r24
    1a2c:	c0 17       	cp	r28, r16
    1a2e:	d1 07       	cpc	r29, r17
    1a30:	e1 f6       	brne	.-72     	; 0x19ea <Scan_user+0x10>
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	08 95       	ret

00001a3c <write_EEPROM>:
    1a3c:	cf 92       	push	r12
    1a3e:	df 92       	push	r13
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	f8 2e       	mov	r15, r24
    1a4e:	ca e2       	ldi	r28, 0x2A	; 42
    1a50:	d7 e0       	ldi	r29, 0x07	; 7
    1a52:	08 2f       	mov	r16, r24
    1a54:	00 0f       	add	r16, r16
    1a56:	00 0f       	add	r16, r16
    1a58:	00 0f       	add	r16, r16
    1a5a:	00 5a       	subi	r16, 0xA0	; 160
    1a5c:	10 e0       	ldi	r17, 0x00	; 0
    1a5e:	0f 2e       	mov	r0, r31
    1a60:	fe e2       	ldi	r31, 0x2E	; 46
    1a62:	cf 2e       	mov	r12, r31
    1a64:	f7 e0       	ldi	r31, 0x07	; 7
    1a66:	df 2e       	mov	r13, r31
    1a68:	f0 2d       	mov	r31, r0
    1a6a:	0f 2e       	mov	r0, r31
    1a6c:	fb ea       	ldi	r31, 0xAB	; 171
    1a6e:	ef 2e       	mov	r14, r31
    1a70:	f0 2d       	mov	r31, r0
    1a72:	68 81       	ld	r22, Y
    1a74:	6e 25       	eor	r22, r14
    1a76:	69 93       	st	Y+, r22
    1a78:	c8 01       	movw	r24, r16
    1a7a:	0e 94 1a 09 	call	0x1234	; 0x1234 <EEPROM_vidWrite>
    1a7e:	0f 5f       	subi	r16, 0xFF	; 255
    1a80:	1f 4f       	sbci	r17, 0xFF	; 255
    1a82:	cc 15       	cp	r28, r12
    1a84:	dd 05       	cpc	r29, r13
    1a86:	a9 f7       	brne	.-22     	; 0x1a72 <write_EEPROM+0x36>
    1a88:	02 e2       	ldi	r16, 0x22	; 34
    1a8a:	17 e0       	ldi	r17, 0x07	; 7
    1a8c:	cf 2d       	mov	r28, r15
    1a8e:	cc 0f       	add	r28, r28
    1a90:	cc 0f       	add	r28, r28
    1a92:	d0 e0       	ldi	r29, 0x00	; 0
    1a94:	0f 2e       	mov	r0, r31
    1a96:	f6 e2       	ldi	r31, 0x26	; 38
    1a98:	cf 2e       	mov	r12, r31
    1a9a:	f7 e0       	ldi	r31, 0x07	; 7
    1a9c:	df 2e       	mov	r13, r31
    1a9e:	f0 2d       	mov	r31, r0
    1aa0:	0f 2e       	mov	r0, r31
    1aa2:	fb ea       	ldi	r31, 0xAB	; 171
    1aa4:	ff 2e       	mov	r15, r31
    1aa6:	f0 2d       	mov	r31, r0
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	60 81       	ld	r22, Z
    1aac:	6f 25       	eor	r22, r15
    1aae:	61 93       	st	Z+, r22
    1ab0:	8f 01       	movw	r16, r30
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	0e 94 1a 09 	call	0x1234	; 0x1234 <EEPROM_vidWrite>
    1ab8:	21 96       	adiw	r28, 0x01	; 1
    1aba:	0c 15       	cp	r16, r12
    1abc:	1d 05       	cpc	r17, r13
    1abe:	a1 f7       	brne	.-24     	; 0x1aa8 <write_EEPROM+0x6c>
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	ff 90       	pop	r15
    1aca:	ef 90       	pop	r14
    1acc:	df 90       	pop	r13
    1ace:	cf 90       	pop	r12
    1ad0:	08 95       	ret

00001ad2 <read_EEPROM>:
		/*Function Input: take one value (from type u8)							*/
		/*Function Description: void function take void and return void                                                 
								read pass from EEPROM							*/
		/************************************************************************/
void read_EEPROM(u8 u8UserId)
{
    1ad2:	cf 92       	push	r12
    1ad4:	df 92       	push	r13
    1ad6:	ef 92       	push	r14
    1ad8:	ff 92       	push	r15
    1ada:	0f 93       	push	r16
    1adc:	1f 93       	push	r17
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	c8 2f       	mov	r28, r24
    1ae4:	08 2f       	mov	r16, r24
    1ae6:	00 0f       	add	r16, r16
    1ae8:	00 0f       	add	r16, r16
    1aea:	00 0f       	add	r16, r16
    1aec:	00 5a       	subi	r16, 0xA0	; 160
    1aee:	10 e0       	ldi	r17, 0x00	; 0
    1af0:	0f 2e       	mov	r0, r31
    1af2:	f6 e2       	ldi	r31, 0x26	; 38
    1af4:	ef 2e       	mov	r14, r31
    1af6:	f7 e0       	ldi	r31, 0x07	; 7
    1af8:	ff 2e       	mov	r15, r31
    1afa:	f0 2d       	mov	r31, r0
    1afc:	0f 2e       	mov	r0, r31
    1afe:	fa e2       	ldi	r31, 0x2A	; 42
    1b00:	cf 2e       	mov	r12, r31
    1b02:	f7 e0       	ldi	r31, 0x07	; 7
    1b04:	df 2e       	mov	r13, r31
    1b06:	f0 2d       	mov	r31, r0
	u8 User_Address = USER_address + (u8UserId * 0x8 );	// calculate the address of user for store his username
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM
	{
		EEPROM_user[i] = EEPROM_u8Read(User_Address + i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array
    1b08:	db ea       	ldi	r29, 0xAB	; 171
    1b0a:	c8 01       	movw	r24, r16
    1b0c:	0e 94 23 09 	call	0x1246	; 0x1246 <EEPROM_u8Read>
    1b10:	8d 27       	eor	r24, r29
    1b12:	f7 01       	movw	r30, r14
    1b14:	81 93       	st	Z+, r24
    1b16:	7f 01       	movw	r14, r30
    1b18:	0f 5f       	subi	r16, 0xFF	; 255
    1b1a:	1f 4f       	sbci	r17, 0xFF	; 255
								read pass from EEPROM							*/
		/************************************************************************/
void read_EEPROM(u8 u8UserId)
{
	u8 User_Address = USER_address + (u8UserId * 0x8 );	// calculate the address of user for store his username
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM
    1b1c:	ec 15       	cp	r30, r12
    1b1e:	fd 05       	cpc	r31, r13
    1b20:	a1 f7       	brne	.-24     	; 0x1b0a <read_EEPROM+0x38>
    1b22:	cc 0f       	add	r28, r28
    1b24:	cc 0f       	add	r28, r28
    1b26:	d0 e0       	ldi	r29, 0x00	; 0
    1b28:	03 e3       	ldi	r16, 0x33	; 51
    1b2a:	17 e0       	ldi	r17, 0x07	; 7
    1b2c:	0f 2e       	mov	r0, r31
    1b2e:	f7 e3       	ldi	r31, 0x37	; 55
    1b30:	cf 2e       	mov	r12, r31
    1b32:	f7 e0       	ldi	r31, 0x07	; 7
    1b34:	df 2e       	mov	r13, r31
    1b36:	f0 2d       	mov	r31, r0
		EEPROM_user[i] = EEPROM_u8Read(User_Address + i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array
	}
	u8 Pass_Address = PASS_address + (u8UserId * 0x4 );	// calculate the address of user for store his pass
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM 
	{
		EEPROM_pass[i] = EEPROM_u8Read(Pass_Address+ i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array 
    1b38:	0f 2e       	mov	r0, r31
    1b3a:	fb ea       	ldi	r31, 0xAB	; 171
    1b3c:	ff 2e       	mov	r15, r31
    1b3e:	f0 2d       	mov	r31, r0
    1b40:	ce 01       	movw	r24, r28
    1b42:	0e 94 23 09 	call	0x1246	; 0x1246 <EEPROM_u8Read>
    1b46:	8f 25       	eor	r24, r15
    1b48:	f8 01       	movw	r30, r16
    1b4a:	81 93       	st	Z+, r24
    1b4c:	8f 01       	movw	r16, r30
    1b4e:	21 96       	adiw	r28, 0x01	; 1
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM
	{
		EEPROM_user[i] = EEPROM_u8Read(User_Address + i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array
	}
	u8 Pass_Address = PASS_address + (u8UserId * 0x4 );	// calculate the address of user for store his pass
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM 
    1b50:	ec 15       	cp	r30, r12
    1b52:	fd 05       	cpc	r31, r13
    1b54:	a9 f7       	brne	.-22     	; 0x1b40 <read_EEPROM+0x6e>
	{
		EEPROM_pass[i] = EEPROM_u8Read(Pass_Address+ i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array 
	}
}
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	ff 90       	pop	r15
    1b60:	ef 90       	pop	r14
    1b62:	df 90       	pop	r13
    1b64:	cf 90       	pop	r12
    1b66:	08 95       	ret

00001b68 <LogOut>:
		/*Function Description: void function take void and return void                                                
								logout from the system and return to start screen*/
		/************************************************************************/
void LogOut()
{	
	LCD_vidClearScreen();								// clear LCD screen
    1b68:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line 
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString(" Logged Out ");				// display message on LCD
    1b74:	88 ec       	ldi	r24, 0xC8	; 200
    1b76:	95 e0       	ldi	r25, 0x05	; 5
    1b78:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    1b7c:	61 e0       	ldi	r22, 0x01	; 1
    1b7e:	83 e0       	ldi	r24, 0x03	; 3
    1b80:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString(" Successfully");				// display message on LCD
    1b84:	85 ed       	ldi	r24, 0xD5	; 213
    1b86:	95 e0       	ldi	r25, 0x05	; 5
    1b88:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
    1b8c:	2f ef       	ldi	r18, 0xFF	; 255
    1b8e:	84 e3       	ldi	r24, 0x34	; 52
    1b90:	9c e0       	ldi	r25, 0x0C	; 12
    1b92:	21 50       	subi	r18, 0x01	; 1
    1b94:	80 40       	sbci	r24, 0x00	; 0
    1b96:	90 40       	sbci	r25, 0x00	; 0
    1b98:	e1 f7       	brne	.-8      	; 0x1b92 <LogOut+0x2a>
    1b9a:	00 c0       	rjmp	.+0      	; 0x1b9c <LogOut+0x34>
    1b9c:	00 00       	nop
	_delay_ms(500);										// wait for 500 m second
	LCD_vidClearScreen();								// clear LCD screen
    1b9e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
	check_user_pass();									// call function that check username & pass for user
    1ba2:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <check_user_pass>
    1ba6:	08 95       	ret

00001ba8 <User_menue>:
		/*Function Description: void function take void and return void                                                
								display user control menu						*/
		/************************************************************************/
void User_menue()
{
	LCD_vidClearScreen();								// clear LCD screen
    1ba8:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
	LCD_vidDisplayString("1.Room Lighting");			// display message on LCD
    1bac:	83 ee       	ldi	r24, 0xE3	; 227
    1bae:	95 e0       	ldi	r25, 0x05	; 5
    1bb0:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
    1bb8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString("2.Air Condition");			// display message on LCD
    1bbc:	83 ef       	ldi	r24, 0xF3	; 243
    1bbe:	95 e0       	ldi	r25, 0x05	; 5
    1bc0:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    1bc4:	61 e0       	ldi	r22, 0x01	; 1
    1bc6:	83 e0       	ldi	r24, 0x03	; 3
    1bc8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString("3.Log Out");					// display message on LCD
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	96 e0       	ldi	r25, 0x06	; 6
    1bd0:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);								// move LCD cursor to fourth line
    1bd4:	61 e0       	ldi	r22, 0x01	; 1
    1bd6:	84 e0       	ldi	r24, 0x04	; 4
    1bd8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString(">> ");						// display message on LCD
    1bdc:	88 e4       	ldi	r24, 0x48	; 72
    1bde:	96 e0       	ldi	r25, 0x06	; 6
    1be0:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
    1be4:	2f e7       	ldi	r18, 0x7F	; 127
    1be6:	89 ea       	ldi	r24, 0xA9	; 169
    1be8:	93 e0       	ldi	r25, 0x03	; 3
    1bea:	21 50       	subi	r18, 0x01	; 1
    1bec:	80 40       	sbci	r24, 0x00	; 0
    1bee:	90 40       	sbci	r25, 0x00	; 0
    1bf0:	e1 f7       	brne	.-8      	; 0x1bea <User_menue+0x42>
    1bf2:	00 c0       	rjmp	.+0      	; 0x1bf4 <User_menue+0x4c>
    1bf4:	00 00       	nop
	_delay_ms(150);										// wait for 150 m second
	choice = u8GetKeyPressed();							// take choice from the user
    1bf6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <u8GetKeyPressed>
    1bfa:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <choice>
    1bfe:	2f e7       	ldi	r18, 0x7F	; 127
    1c00:	89 ea       	ldi	r24, 0xA9	; 169
    1c02:	93 e0       	ldi	r25, 0x03	; 3
    1c04:	21 50       	subi	r18, 0x01	; 1
    1c06:	80 40       	sbci	r24, 0x00	; 0
    1c08:	90 40       	sbci	r25, 0x00	; 0
    1c0a:	e1 f7       	brne	.-8      	; 0x1c04 <User_menue+0x5c>
    1c0c:	00 c0       	rjmp	.+0      	; 0x1c0e <User_menue+0x66>
    1c0e:	00 00       	nop
	_delay_ms(150);										// wait for 150 m second
	switch(choice)										// switch for choice
    1c10:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <choice>
    1c14:	82 33       	cpi	r24, 0x32	; 50
    1c16:	39 f0       	breq	.+14     	; 0x1c26 <User_menue+0x7e>
    1c18:	83 33       	cpi	r24, 0x33	; 51
    1c1a:	41 f0       	breq	.+16     	; 0x1c2c <User_menue+0x84>
    1c1c:	81 33       	cpi	r24, 0x31	; 49
    1c1e:	49 f4       	brne	.+18     	; 0x1c32 <User_menue+0x8a>
	{
		case '1':										// if choice equal 1
			Print();									// call function that display rooms control
    1c20:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <Print>
		break;											// break
    1c24:	08 95       	ret
		case '2' :										// if choice equal 2
			Air_condition();							// call function that control air condition
    1c26:	0e 94 13 01 	call	0x226	; 0x226 <Air_condition>
		break;											// break
    1c2a:	08 95       	ret
		case '3' :										// if choice equal 3
			LogOut();									// call function that logout from the system
    1c2c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LogOut>
		break;											// break
    1c30:	08 95       	ret
		default:										// default case
			LCD_vidClearScreen();						// clear LCD screen
    1c32:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
			LCD_vidDisplayString("Wrong input");		// display message on LCD
    1c36:	88 e7       	ldi	r24, 0x78	; 120
    1c38:	95 e0       	ldi	r25, 0x05	; 5
    1c3a:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
    1c3e:	2f e7       	ldi	r18, 0x7F	; 127
    1c40:	8a e1       	ldi	r24, 0x1A	; 26
    1c42:	96 e0       	ldi	r25, 0x06	; 6
    1c44:	21 50       	subi	r18, 0x01	; 1
    1c46:	80 40       	sbci	r24, 0x00	; 0
    1c48:	90 40       	sbci	r25, 0x00	; 0
    1c4a:	e1 f7       	brne	.-8      	; 0x1c44 <User_menue+0x9c>
    1c4c:	00 c0       	rjmp	.+0      	; 0x1c4e <User_menue+0xa6>
    1c4e:	00 00       	nop
			_delay_ms(250);								// wait for 250 m second
			User_menue();								// call function that display user control menu
    1c50:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <User_menue>
    1c54:	08 95       	ret

00001c56 <Print>:
		/*Function Description: void function take void and return void                                                
								display rooms menu & control it					*/
		/************************************************************************/
void Print()
{
	u8 show_menu = MAIN_MENU;							// set variable to main menu	
    1c56:	d1 e0       	ldi	r29, 0x01	; 1
    1c58:	1f ef       	ldi	r17, 0xFF	; 255
			control_rooms(ROOM5_MENU);					// call function that control room 5 lightning
			show_menu = MAIN_MENU;						// set menu to main menu
			break;										// stop case
			case ROOM6_MENU:							// if room 6 menu
			control_rooms(ROOM6_MENU);					// call function that control room 6 lightning
			show_menu = MAIN_MENU;						// set menu to main menu
    1c5a:	c1 e0       	ldi	r28, 0x01	; 1
{
	u8 show_menu = MAIN_MENU;							// set variable to main menu	
	while(1)											//while loop to Show the menu
	{
		u8ReturnedValue = NOT_PRESSED;					//Set the key pressed by the user to its default value
		switch (show_menu)								// switch form menus
    1c5c:	8d 2f       	mov	r24, r29
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	fc 01       	movw	r30, r24
    1c62:	31 97       	sbiw	r30, 0x01	; 1
    1c64:	e8 30       	cpi	r30, 0x08	; 8
    1c66:	f1 05       	cpc	r31, r1
    1c68:	d8 f7       	brcc	.-10     	; 0x1c60 <Print+0xa>
    1c6a:	e5 59       	subi	r30, 0x95	; 149
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	0c 94 26 12 	jmp	0x244c	; 0x244c <__tablejump2__>
    1c72:	10 93 1f 07 	sts	0x071F, r17	; 0x80071f <u8ReturnedValue>
		{
			case MAIN_MENU:								// if main menu
			do											// do while loop
			{
				LCD_vidClearScreen();					// clear LCD screen
    1c76:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
				LCD_vidDisplayString("1:Room1 2:Room2 ");// display message on LCD screen
    1c7a:	8d e0       	ldi	r24, 0x0D	; 13
    1c7c:	96 e0       	ldi	r25, 0x06	; 6
    1c7e:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				LCD_vidMoveCursor(2,1);					// move LCD cursor to second line
    1c82:	6c 2f       	mov	r22, r28
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString("3:Room3 4:Room4 ");// display message on LCD screen
    1c8a:	8e e1       	ldi	r24, 0x1E	; 30
    1c8c:	96 e0       	ldi	r25, 0x06	; 6
    1c8e:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				LCD_vidMoveCursor(3,1);					// move LCD cursor to third line
    1c92:	6c 2f       	mov	r22, r28
    1c94:	83 e0       	ldi	r24, 0x03	; 3
    1c96:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString("5:Room5 6:Room6");// display message on LCD screen
    1c9a:	8f e2       	ldi	r24, 0x2F	; 47
    1c9c:	96 e0       	ldi	r25, 0x06	; 6
    1c9e:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				LCD_vidMoveCursor(4,1);					// move LCD cursor to fourth line
    1ca2:	6c 2f       	mov	r22, r28
    1ca4:	84 e0       	ldi	r24, 0x04	; 4
    1ca6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
				LCD_vidDisplayString("0:Return >> ");	// display message on LCD screen
    1caa:	8f e3       	ldi	r24, 0x3F	; 63
    1cac:	96 e0       	ldi	r25, 0x06	; 6
    1cae:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
				u8ReturnedValue = u8GetKeyPressed();	// take choice from user 
    1cb2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <u8GetKeyPressed>
    1cb6:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <u8ReturnedValue>
    1cba:	2f ef       	ldi	r18, 0xFF	; 255
    1cbc:	81 ee       	ldi	r24, 0xE1	; 225
    1cbe:	94 e0       	ldi	r25, 0x04	; 4
    1cc0:	21 50       	subi	r18, 0x01	; 1
    1cc2:	80 40       	sbci	r24, 0x00	; 0
    1cc4:	90 40       	sbci	r25, 0x00	; 0
    1cc6:	e1 f7       	brne	.-8      	; 0x1cc0 <Print+0x6a>
    1cc8:	00 c0       	rjmp	.+0      	; 0x1cca <Print+0x74>
    1cca:	00 00       	nop
				_delay_ms(200);							// wait for 200 m second
				if (u8ReturnedValue == '1')				// if choice equal 1
    1ccc:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
    1cd0:	81 33       	cpi	r24, 0x31	; 49
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <Print+0x80>
    1cd4:	57 c0       	rjmp	.+174    	; 0x1d84 <Print+0x12e>
				{
					show_menu = ROOM1_MENU;				// display room 1 menu
				}
				else if (u8ReturnedValue == '2')		// if choice equal 2
    1cd6:	82 33       	cpi	r24, 0x32	; 50
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <Print+0x86>
    1cda:	56 c0       	rjmp	.+172    	; 0x1d88 <Print+0x132>
				{
					show_menu = ROOM2_MENU;				// display room 2 menu
				}
				else if (u8ReturnedValue == '3')		// if choice equal 3
    1cdc:	83 33       	cpi	r24, 0x33	; 51
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <Print+0x8c>
    1ce0:	55 c0       	rjmp	.+170    	; 0x1d8c <Print+0x136>
				{
					show_menu = ROOM3_MENU;				// display room 3 menu
				}
				else if (u8ReturnedValue == '4')		// if choice equal 4
    1ce2:	84 33       	cpi	r24, 0x34	; 52
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <Print+0x92>
    1ce6:	54 c0       	rjmp	.+168    	; 0x1d90 <Print+0x13a>
				{
					show_menu = ROOM4_MENU;				// display room 4 menu
				}
				else if (u8ReturnedValue == '5')		// if choice equal 5
    1ce8:	85 33       	cpi	r24, 0x35	; 53
    1cea:	09 f4       	brne	.+2      	; 0x1cee <Print+0x98>
    1cec:	53 c0       	rjmp	.+166    	; 0x1d94 <Print+0x13e>
				{
					show_menu = ROOM5_MENU;				// display room 5 menu
				}
				else if (u8ReturnedValue == '6')		// if choice equal 6
    1cee:	86 33       	cpi	r24, 0x36	; 54
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <Print+0x9e>
    1cf2:	52 c0       	rjmp	.+164    	; 0x1d98 <Print+0x142>
				{
					show_menu = ROOM6_MENU;				// display room 6 menu
				}
				else if (u8ReturnedValue=='0')			// if choice equal 0
    1cf4:	80 33       	cpi	r24, 0x30	; 48
    1cf6:	19 f4       	brne	.+6      	; 0x1cfe <Print+0xa8>
				{
						User_menue();					// call function that return to user home control
    1cf8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <User_menue>
    1cfc:	12 c0       	rjmp	.+36     	; 0x1d22 <Print+0xcc>
				}
				else if(u8ReturnedValue != NOT_PRESSED)	// if user enter any thing else 
    1cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <Print+0xae>
    1d02:	b9 cf       	rjmp	.-142    	; 0x1c76 <Print+0x20>
				{
					LCD_vidClearScreen();				// clear LCD screen
    1d04:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
					LCD_vidDisplayString("Wrong input");// display message on LCD screen
    1d08:	88 e7       	ldi	r24, 0x78	; 120
    1d0a:	95 e0       	ldi	r25, 0x05	; 5
    1d0c:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
    1d10:	2f ef       	ldi	r18, 0xFF	; 255
    1d12:	81 ee       	ldi	r24, 0xE1	; 225
    1d14:	94 e0       	ldi	r25, 0x04	; 4
    1d16:	21 50       	subi	r18, 0x01	; 1
    1d18:	80 40       	sbci	r24, 0x00	; 0
    1d1a:	90 40       	sbci	r25, 0x00	; 0
    1d1c:	e1 f7       	brne	.-8      	; 0x1d16 <Print+0xc0>
    1d1e:	00 c0       	rjmp	.+0      	; 0x1d20 <Print+0xca>
    1d20:	00 00       	nop
					_delay_ms(200);						// wait for 200m second
				}
			} while  ((u8ReturnedValue < '0') || (u8ReturnedValue > '6') );// loop still work if choice less than 0 or greater than 6
    1d22:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <u8ReturnedValue>
    1d26:	80 53       	subi	r24, 0x30	; 48
    1d28:	87 30       	cpi	r24, 0x07	; 7
    1d2a:	08 f0       	brcs	.+2      	; 0x1d2e <Print+0xd8>
    1d2c:	a4 cf       	rjmp	.-184    	; 0x1c76 <Print+0x20>
    1d2e:	96 cf       	rjmp	.-212    	; 0x1c5c <Print+0x6>
    1d30:	10 93 1f 07 	sts	0x071F, r17	; 0x80071f <u8ReturnedValue>
			break;										// stop case
			case ROOM1_MENU:							// if room 1 menu
			control_rooms(ROOM1_MENU);					// call function that control room 1 lightning
    1d34:	83 e0       	ldi	r24, 0x03	; 3
    1d36:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1d3a:	dc 2f       	mov	r29, r28
			break;										// stop case
    1d3c:	8f cf       	rjmp	.-226    	; 0x1c5c <Print+0x6>
    1d3e:	10 93 1f 07 	sts	0x071F, r17	; 0x80071f <u8ReturnedValue>
			case ROOM2_MENU:							// if room 2 menu
			control_rooms(ROOM2_MENU);					// call function that control room 2 lightning
    1d42:	84 e0       	ldi	r24, 0x04	; 4
    1d44:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1d48:	dc 2f       	mov	r29, r28
			break;										// stop case
    1d4a:	88 cf       	rjmp	.-240    	; 0x1c5c <Print+0x6>
    1d4c:	10 93 1f 07 	sts	0x071F, r17	; 0x80071f <u8ReturnedValue>
			case ROOM3_MENU:							// if room 3 menu
			control_rooms(ROOM3_MENU);					// call function that control room 3 lightning
    1d50:	85 e0       	ldi	r24, 0x05	; 5
    1d52:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1d56:	dc 2f       	mov	r29, r28
			break;										// stop case
    1d58:	81 cf       	rjmp	.-254    	; 0x1c5c <Print+0x6>
    1d5a:	10 93 1f 07 	sts	0x071F, r17	; 0x80071f <u8ReturnedValue>
			case ROOM4_MENU:							// if room 4 menu
			control_rooms(ROOM4_MENU);					// call function that control room 4 lightning
    1d5e:	86 e0       	ldi	r24, 0x06	; 6
    1d60:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1d64:	dc 2f       	mov	r29, r28
			break;										// stop case
    1d66:	7a cf       	rjmp	.-268    	; 0x1c5c <Print+0x6>
    1d68:	10 93 1f 07 	sts	0x071F, r17	; 0x80071f <u8ReturnedValue>
			case ROOM5_MENU:							// if room 5 menu
			control_rooms(ROOM5_MENU);					// call function that control room 5 lightning
    1d6c:	87 e0       	ldi	r24, 0x07	; 7
    1d6e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1d72:	dc 2f       	mov	r29, r28
			break;										// stop case
    1d74:	73 cf       	rjmp	.-282    	; 0x1c5c <Print+0x6>
    1d76:	10 93 1f 07 	sts	0x071F, r17	; 0x80071f <u8ReturnedValue>
			case ROOM6_MENU:							// if room 6 menu
			control_rooms(ROOM6_MENU);					// call function that control room 6 lightning
    1d7a:	88 e0       	ldi	r24, 0x08	; 8
    1d7c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1d80:	dc 2f       	mov	r29, r28
			break;										// stop case
    1d82:	6c cf       	rjmp	.-296    	; 0x1c5c <Print+0x6>
				LCD_vidDisplayString("0:Return >> ");	// display message on LCD screen
				u8ReturnedValue = u8GetKeyPressed();	// take choice from user 
				_delay_ms(200);							// wait for 200 m second
				if (u8ReturnedValue == '1')				// if choice equal 1
				{
					show_menu = ROOM1_MENU;				// display room 1 menu
    1d84:	d3 e0       	ldi	r29, 0x03	; 3
    1d86:	6a cf       	rjmp	.-300    	; 0x1c5c <Print+0x6>
				}
				else if (u8ReturnedValue == '2')		// if choice equal 2
				{
					show_menu = ROOM2_MENU;				// display room 2 menu
    1d88:	d4 e0       	ldi	r29, 0x04	; 4
    1d8a:	68 cf       	rjmp	.-304    	; 0x1c5c <Print+0x6>
				}
				else if (u8ReturnedValue == '3')		// if choice equal 3
				{
					show_menu = ROOM3_MENU;				// display room 3 menu
    1d8c:	d5 e0       	ldi	r29, 0x05	; 5
    1d8e:	66 cf       	rjmp	.-308    	; 0x1c5c <Print+0x6>
				}
				else if (u8ReturnedValue == '4')		// if choice equal 4
				{
					show_menu = ROOM4_MENU;				// display room 4 menu
    1d90:	d6 e0       	ldi	r29, 0x06	; 6
    1d92:	64 cf       	rjmp	.-312    	; 0x1c5c <Print+0x6>
				}
				else if (u8ReturnedValue == '5')		// if choice equal 5
				{
					show_menu = ROOM5_MENU;				// display room 5 menu
    1d94:	d7 e0       	ldi	r29, 0x07	; 7
    1d96:	62 cf       	rjmp	.-316    	; 0x1c5c <Print+0x6>
				}
				else if (u8ReturnedValue == '6')		// if choice equal 6
				{
					show_menu = ROOM6_MENU;				// display room 6 menu
    1d98:	d8 e0       	ldi	r29, 0x08	; 8
    1d9a:	60 cf       	rjmp	.-320    	; 0x1c5c <Print+0x6>

00001d9c <check_user_pass>:
		/*Function Description: void function take void and return void                                                
								check username & pass for user if correct or not*/
		/************************************************************************/
void check_user_pass()
{	
	LCD_vidClearScreen();								// move LCD cursor to first line
    1d9c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
	LCD_vidDisplayString("-- User LOGIN --");			// display message on LCD
    1da0:	8c e4       	ldi	r24, 0x4C	; 76
    1da2:	96 e0       	ldi	r25, 0x06	; 6
    1da4:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1da8:	61 e0       	ldi	r22, 0x01	; 1
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString("ID from (0-9) ");				// display message on LCD
    1db0:	8d e5       	ldi	r24, 0x5D	; 93
    1db2:	96 e0       	ldi	r25, 0x06	; 6
    1db4:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	83 e0       	ldi	r24, 0x03	; 3
    1dbc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString("Enter User ID:");				// display message on LCD
    1dc0:	8c e6       	ldi	r24, 0x6C	; 108
    1dc2:	96 e0       	ldi	r25, 0x06	; 6
    1dc4:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);								// move LCD cursor to fourth line
    1dc8:	61 e0       	ldi	r22, 0x01	; 1
    1dca:	84 e0       	ldi	r24, 0x04	; 4
    1dcc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString(">> ");						// display message on LCD
    1dd0:	88 e4       	ldi	r24, 0x48	; 72
    1dd2:	96 e0       	ldi	r25, 0x06	; 6
    1dd4:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	UserId = u8GetKeyPressed();							// take user id from user
    1dd8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <u8GetKeyPressed>
    1ddc:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <UserId>
	read_EEPROM(UserId);								// read this user id from EEPROM
    1de0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <read_EEPROM>
    1de4:	2f ef       	ldi	r18, 0xFF	; 255
    1de6:	31 ee       	ldi	r19, 0xE1	; 225
    1de8:	84 e0       	ldi	r24, 0x04	; 4
    1dea:	21 50       	subi	r18, 0x01	; 1
    1dec:	30 40       	sbci	r19, 0x00	; 0
    1dee:	80 40       	sbci	r24, 0x00	; 0
    1df0:	e1 f7       	brne	.-8      	; 0x1dea <check_user_pass+0x4e>
    1df2:	00 c0       	rjmp	.+0      	; 0x1df4 <check_user_pass+0x58>
    1df4:	00 00       	nop
	_delay_ms(200);										// wait 200 m second
	LCD_vidClearScreen();								// move LCD cursor to next line
    1df6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
	LCD_vidDisplayString("Enter UserName:");			// display message on LCD
    1dfa:	8b e7       	ldi	r24, 0x7B	; 123
    1dfc:	96 e0       	ldi	r25, 0x06	; 6
    1dfe:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1e02:	61 e0       	ldi	r22, 0x01	; 1
    1e04:	82 e0       	ldi	r24, 0x02	; 2
    1e06:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString(">>");							// display message on LCD
    1e0a:	8b e8       	ldi	r24, 0x8B	; 139
    1e0c:	96 e0       	ldi	r25, 0x06	; 6
    1e0e:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	Scan_user();										// take username & pass from user
    1e12:	0e 94 ed 0c 	call	0x19da	; 0x19da <Scan_user>
    1e16:	ea e2       	ldi	r30, 0x2A	; 42
    1e18:	f7 e0       	ldi	r31, 0x07	; 7
    1e1a:	a6 e2       	ldi	r26, 0x26	; 38
    1e1c:	b7 e0       	ldi	r27, 0x07	; 7
    1e1e:	2e e2       	ldi	r18, 0x2E	; 46
    1e20:	37 e0       	ldi	r19, 0x07	; 7
    1e22:	40 e0       	ldi	r20, 0x00	; 0
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
	{
		if (user[i] == EEPROM_user[i])					// check if two value are equal or not
    1e24:	91 91       	ld	r25, Z+
    1e26:	8d 91       	ld	r24, X+
    1e28:	98 13       	cpse	r25, r24
    1e2a:	01 c0       	rjmp	.+2      	; 0x1e2e <check_user_pass+0x92>
		{
			check_user++;								// if that increase the check variable by one
    1e2c:	4f 5f       	subi	r20, 0xFF	; 255
	LCD_vidDisplayString("Enter UserName:");			// display message on LCD
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
	LCD_vidDisplayString(">>");							// display message on LCD
	Scan_user();										// take username & pass from user
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
    1e2e:	e2 17       	cp	r30, r18
    1e30:	f3 07       	cpc	r31, r19
    1e32:	c1 f7       	brne	.-16     	; 0x1e24 <check_user_pass+0x88>
    1e34:	40 93 21 07 	sts	0x0721, r20	; 0x800721 <check_user>
		}
		else											// if not
		{
		}
	}
	LCD_vidMoveCursor(3,1);								// move LCD cursor to first line
    1e38:	61 e0       	ldi	r22, 0x01	; 1
    1e3a:	83 e0       	ldi	r24, 0x03	; 3
    1e3c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString("Enter Password:");			// display message on LCD
    1e40:	8e e8       	ldi	r24, 0x8E	; 142
    1e42:	96 e0       	ldi	r25, 0x06	; 6
    1e44:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	LCD_vidMoveCursor(4, 1);							// move LCD cursor to next line
    1e48:	61 e0       	ldi	r22, 0x01	; 1
    1e4a:	84 e0       	ldi	r24, 0x04	; 4
    1e4c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
	LCD_vidDisplayString(">>");							// display message on LCD
    1e50:	8b e8       	ldi	r24, 0x8B	; 139
    1e52:	96 e0       	ldi	r25, 0x06	; 6
    1e54:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
	Scan_pass();										// take pass from user
    1e58:	0e 94 b6 0c 	call	0x196c	; 0x196c <Scan_pass>
    1e5c:	e2 e2       	ldi	r30, 0x22	; 34
    1e5e:	f7 e0       	ldi	r31, 0x07	; 7
    1e60:	a3 e3       	ldi	r26, 0x33	; 51
    1e62:	b7 e0       	ldi	r27, 0x07	; 7
    1e64:	26 e2       	ldi	r18, 0x26	; 38
    1e66:	37 e0       	ldi	r19, 0x07	; 7
    1e68:	40 e0       	ldi	r20, 0x00	; 0
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
	{
		if (pass[i] == EEPROM_pass[i])					// check if two value are equal or not
    1e6a:	91 91       	ld	r25, Z+
    1e6c:	8d 91       	ld	r24, X+
    1e6e:	98 13       	cpse	r25, r24
    1e70:	01 c0       	rjmp	.+2      	; 0x1e74 <check_user_pass+0xd8>
		{
			check++;									// if that increase the check variable by one
    1e72:	4f 5f       	subi	r20, 0xFF	; 255
	LCD_vidDisplayString("Enter Password:");			// display message on LCD
	LCD_vidMoveCursor(4, 1);							// move LCD cursor to next line
	LCD_vidDisplayString(">>");							// display message on LCD
	Scan_pass();										// take pass from user
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
    1e74:	e2 17       	cp	r30, r18
    1e76:	f3 07       	cpc	r31, r19
    1e78:	c1 f7       	brne	.-16     	; 0x1e6a <check_user_pass+0xce>
    1e7a:	40 93 32 07 	sts	0x0732, r20	; 0x800732 <check>
		}
		else                                            // if not
		{
		}
	}
	LCD_vidClearScreen();								// clear LCD screen
    1e7e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
	if(check == 4 && check_user == 4)					// check if check variable equal 4 or not (correct pass)
    1e82:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <check>
    1e86:	84 30       	cpi	r24, 0x04	; 4
    1e88:	91 f5       	brne	.+100    	; 0x1eee <check_user_pass+0x152>
    1e8a:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <check_user>
    1e8e:	84 30       	cpi	r24, 0x04	; 4
    1e90:	71 f5       	brne	.+92     	; 0x1eee <check_user_pass+0x152>
	{		
		LED_vidTurnOn(GPIOD, PIN4);						// turn on user mode led
    1e92:	64 e0       	ldi	r22, 0x04	; 4
    1e94:	83 e0       	ldi	r24, 0x03	; 3
    1e96:	0e 94 95 0b 	call	0x172a	; 0x172a <LED_vidTurnOn>
		LED_vidTurnOff(GPIOD,PIN3);						// turn off admin mode led
    1e9a:	63 e0       	ldi	r22, 0x03	; 3
    1e9c:	83 e0       	ldi	r24, 0x03	; 3
    1e9e:	0e 94 99 0b 	call	0x1732	; 0x1732 <LED_vidTurnOff>
		LED_vidTurnOff(GPIOB,PIN5);						// turn off block mode led
    1ea2:	65 e0       	ldi	r22, 0x05	; 5
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	0e 94 99 0b 	call	0x1732	; 0x1732 <LED_vidTurnOff>
		LCD_vidDisplayString("Correct Password");		// display message on LCD
    1eaa:	8e e9       	ldi	r24, 0x9E	; 158
    1eac:	96 e0       	ldi	r25, 0x06	; 6
    1eae:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,1);							// move LCD cursor to second line
    1eb2:	61 e0       	ldi	r22, 0x01	; 1
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
    1eb6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
		LCD_vidDisplayString("Login ");					// display message on screen
    1eba:	8f ea       	ldi	r24, 0xAF	; 175
    1ebc:	96 e0       	ldi	r25, 0x06	; 6
    1ebe:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		LCD_vidMoveCursor(3,1);							// move LCD cursor to third line
    1ec2:	61 e0       	ldi	r22, 0x01	; 1
    1ec4:	83 e0       	ldi	r24, 0x03	; 3
    1ec6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
		LCD_vidDisplayString("Successfully");			// display message on screen
    1eca:	86 ed       	ldi	r24, 0xD6	; 214
    1ecc:	95 e0       	ldi	r25, 0x05	; 5
    1ece:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
    1ed2:	9f e7       	ldi	r25, 0x7F	; 127
    1ed4:	2a e1       	ldi	r18, 0x1A	; 26
    1ed6:	36 e0       	ldi	r19, 0x06	; 6
    1ed8:	91 50       	subi	r25, 0x01	; 1
    1eda:	20 40       	sbci	r18, 0x00	; 0
    1edc:	30 40       	sbci	r19, 0x00	; 0
    1ede:	e1 f7       	brne	.-8      	; 0x1ed8 <check_user_pass+0x13c>
    1ee0:	00 c0       	rjmp	.+0      	; 0x1ee2 <check_user_pass+0x146>
    1ee2:	00 00       	nop
		_delay_ms(250);									// delay 250m second to see message
		wrong_pass_count = 0;							// reset wrong_pass_count variable by reinitialize by 0
    1ee4:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <__data_end>
		User_menue(); 									// call function that display user control menu
    1ee8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <User_menue>
    1eec:	25 c0       	rjmp	.+74     	; 0x1f38 <check_user_pass+0x19c>
	}
	else												// if not
	{
		wrong_pass_count++;								// increase wrong_pass_count variable by one
    1eee:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <__data_end>
    1ef2:	8f 5f       	subi	r24, 0xFF	; 255
    1ef4:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <__data_end>
		LCD_vidDisplayString("Wrong password");			// display message on LCD
    1ef8:	86 eb       	ldi	r24, 0xB6	; 182
    1efa:	96 e0       	ldi	r25, 0x06	; 6
    1efc:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		LCD_vidMoveCursor(2, 1);						// move LCD cursor to second line
    1f00:	61 e0       	ldi	r22, 0x01	; 1
    1f02:	82 e0       	ldi	r24, 0x02	; 2
    1f04:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
		LCD_vidDisplayString("or user");				// display message on LCD
    1f08:	85 ec       	ldi	r24, 0xC5	; 197
    1f0a:	96 e0       	ldi	r25, 0x06	; 6
    1f0c:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		LCD_vidMoveCursor(3, 1);						// move LCD cursor to next line
    1f10:	61 e0       	ldi	r22, 0x01	; 1
    1f12:	83 e0       	ldi	r24, 0x03	; 3
    1f14:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
		LCD_vidDisplayString("Rem times:");				// display message on LCD
    1f18:	8d ec       	ldi	r24, 0xCD	; 205
    1f1a:	96 e0       	ldi	r25, 0x06	; 6
    1f1c:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		LCD_vidDisplayNumber(3-wrong_pass_count);		// display number of reaming tries
    1f20:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <__data_end>
    1f24:	63 e0       	ldi	r22, 0x03	; 3
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	68 1b       	sub	r22, r24
    1f2a:	71 09       	sbc	r23, r1
    1f2c:	07 2e       	mov	r0, r23
    1f2e:	00 0c       	add	r0, r0
    1f30:	88 0b       	sbc	r24, r24
    1f32:	99 0b       	sbc	r25, r25
    1f34:	0e 94 45 0b 	call	0x168a	; 0x168a <LCD_vidDisplayNumber>
	}
	if (wrong_pass_count == 3)							// check if user exceed maximum number of tries or not
    1f38:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <__data_end>
    1f3c:	83 30       	cpi	r24, 0x03	; 3
    1f3e:	c1 f5       	brne	.+112    	; 0x1fb0 <check_user_pass+0x214>
	{
		wrong_pass_count = 0;							// set wrong pass counter to 0
    1f40:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <__data_end>
		LCD_vidClearScreen();							// clear LCD screen
    1f44:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
		LCD_vidDisplayString("Locked Mode!!");			// display message on LCD
    1f48:	88 ed       	ldi	r24, 0xD8	; 216
    1f4a:	96 e0       	ldi	r25, 0x06	; 6
    1f4c:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,1);
    1f50:	61 e0       	ldi	r22, 0x01	; 1
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
		LCD_vidDisplayString("try again ");
    1f58:	86 ee       	ldi	r24, 0xE6	; 230
    1f5a:	96 e0       	ldi	r25, 0x06	; 6
    1f5c:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		LCD_vidMoveCursor(3,1);
    1f60:	61 e0       	ldi	r22, 0x01	; 1
    1f62:	83 e0       	ldi	r24, 0x03	; 3
    1f64:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
		LCD_vidDisplayString("after 20 second ");
    1f68:	87 e4       	ldi	r24, 0x47	; 71
    1f6a:	92 e0       	ldi	r25, 0x02	; 2
    1f6c:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		
		LED_vidTurnOn(GPIOB, PIN5);						// turn on block mode led
    1f70:	65 e0       	ldi	r22, 0x05	; 5
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	0e 94 95 0b 	call	0x172a	; 0x172a <LED_vidTurnOn>
		LED_vidTurnOff(GPIOD,PIN4);						// turn off user mode led
    1f78:	64 e0       	ldi	r22, 0x04	; 4
    1f7a:	83 e0       	ldi	r24, 0x03	; 3
    1f7c:	0e 94 99 0b 	call	0x1732	; 0x1732 <LED_vidTurnOff>
		LED_vidTurnOff(GPIOD,PIN3);						// turn off admin mode led
    1f80:	63 e0       	ldi	r22, 0x03	; 3
    1f82:	83 e0       	ldi	r24, 0x03	; 3
    1f84:	0e 94 99 0b 	call	0x1732	; 0x1732 <LED_vidTurnOff>
		DIO_vidWritePin(GPIOD,PIN7,HIGH);				// output hight on pin to turn on buzzer
    1f88:	41 e0       	ldi	r20, 0x01	; 1
    1f8a:	67 e0       	ldi	r22, 0x07	; 7
    1f8c:	83 e0       	ldi	r24, 0x03	; 3
    1f8e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
    1f92:	8a ea       	ldi	r24, 0xAA	; 170
    1f94:	96 ee       	ldi	r25, 0xE6	; 230
    1f96:	26 e9       	ldi	r18, 0x96	; 150
    1f98:	31 e0       	ldi	r19, 0x01	; 1
    1f9a:	81 50       	subi	r24, 0x01	; 1
    1f9c:	90 40       	sbci	r25, 0x00	; 0
    1f9e:	20 40       	sbci	r18, 0x00	; 0
    1fa0:	30 40       	sbci	r19, 0x00	; 0
    1fa2:	d9 f7       	brne	.-10     	; 0x1f9a <check_user_pass+0x1fe>
    1fa4:	00 00       	nop
		_delay_ms(20000);								// wait for 20 second
		DIO_vidWritePin(GPIOD,PIN7,LOW);				// output hight on pin to turn off buzzer
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	67 e0       	ldi	r22, 0x07	; 7
    1faa:	83 e0       	ldi	r24, 0x03	; 3
    1fac:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_vidWritePin>
	}
		check_user_pass();
    1fb0:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <check_user_pass>
    1fb4:	8f ef       	ldi	r24, 0xFF	; 255
    1fb6:	90 e7       	ldi	r25, 0x70	; 112
    1fb8:	22 e0       	ldi	r18, 0x02	; 2
    1fba:	81 50       	subi	r24, 0x01	; 1
    1fbc:	90 40       	sbci	r25, 0x00	; 0
    1fbe:	20 40       	sbci	r18, 0x00	; 0
    1fc0:	e1 f7       	brne	.-8      	; 0x1fba <check_user_pass+0x21e>
    1fc2:	00 c0       	rjmp	.+0      	; 0x1fc4 <check_user_pass+0x228>
    1fc4:	00 00       	nop
    1fc6:	08 95       	ret

00001fc8 <start>:
		/*Function Description: void function take void and return void
		                        set pass if not set or read pass if already set	*/
		/************************************************************************/
void start()
{
	LCD_vidClearScreen();	
    1fc8:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_vidClearScreen>
	pass_check = EEPROM_u8Read(PASS_address_check);		// check if pass set or not by reading value in PASS_address_check
    1fcc:	80 e5       	ldi	r24, 0x50	; 80
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	0e 94 23 09 	call	0x1246	; 0x1246 <EEPROM_u8Read>
    1fd4:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <pass_check>
	if (pass_check != 0)								// check if value of pass_check equal to 0 or not 
    1fd8:	88 23       	and	r24, r24
    1fda:	b1 f0       	breq	.+44     	; 0x2008 <start+0x40>
	{
		LCD_vidDisplayString("-- Sorry --");			// display message on LCD
    1fdc:	81 ef       	ldi	r24, 0xF1	; 241
    1fde:	96 e0       	ldi	r25, 0x06	; 6
    1fe0:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,1);							// move cursor of LCD to second line
    1fe4:	61 e0       	ldi	r22, 0x01	; 1
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_vidMoveCursor>
		LCD_vidDisplayString("Set Admin First");		// display message on LCD
    1fec:	8d ef       	ldi	r24, 0xFD	; 253
    1fee:	96 e0       	ldi	r25, 0x06	; 6
    1ff0:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
    1ff4:	2f e7       	ldi	r18, 0x7F	; 127
    1ff6:	89 ea       	ldi	r24, 0xA9	; 169
    1ff8:	93 e0       	ldi	r25, 0x03	; 3
    1ffa:	21 50       	subi	r18, 0x01	; 1
    1ffc:	80 40       	sbci	r24, 0x00	; 0
    1ffe:	90 40       	sbci	r25, 0x00	; 0
    2000:	e1 f7       	brne	.-8      	; 0x1ffa <start+0x32>
    2002:	00 c0       	rjmp	.+0      	; 0x2004 <start+0x3c>
    2004:	00 00       	nop
    2006:	08 95       	ret
		_delay_ms(150);									// wait for 150 m second
	}
	else												// if not
	{  
		LCD_vidDisplayString("-- User Login --");		// display message on LCD screen
    2008:	8d e0       	ldi	r24, 0x0D	; 13
    200a:	97 e0       	ldi	r25, 0x07	; 7
    200c:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_vidDisplayString>
    2010:	2f e7       	ldi	r18, 0x7F	; 127
    2012:	89 ea       	ldi	r24, 0xA9	; 169
    2014:	93 e0       	ldi	r25, 0x03	; 3
    2016:	21 50       	subi	r18, 0x01	; 1
    2018:	80 40       	sbci	r24, 0x00	; 0
    201a:	90 40       	sbci	r25, 0x00	; 0
    201c:	e1 f7       	brne	.-8      	; 0x2016 <start+0x4e>
    201e:	00 c0       	rjmp	.+0      	; 0x2020 <start+0x58>
    2020:	00 00       	nop
		_delay_ms(150);									// wait for 150 m second
			check_user_pass();							// call function that check user username & pass
    2022:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <check_user_pass>
    2026:	08 95       	ret

00002028 <SWT_vidInti>:
		/************************************************************************/
		/*																	    */
		/************************************************************************/
void SWT_vidInti(_enuGPIOx enuPortNum, _enuPINx enuPinNum)
{
    DIO_vidSetPinMode(enuPortNum, enuPinNum, INPUT);
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_vidSetPinMode>
    202e:	08 95       	ret

00002030 <USART_vidInit>:
		/************************************************************************/
		/*																		*/
		/************************************************************************/
void USART_vidSetCBUDRE(void(*copy_CB)(void))
{
    CB_UDR = copy_CB;
    2030:	20 b5       	in	r18, 0x20	; 32
    2032:	2f 77       	andi	r18, 0x7F	; 127
    2034:	20 bd       	out	0x20, r18	; 32
    2036:	20 b5       	in	r18, 0x20	; 32
    2038:	2f 7b       	andi	r18, 0xBF	; 191
    203a:	20 bd       	out	0x20, r18	; 32
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	aa 1f       	adc	r26, r26
    2046:	bb 1f       	adc	r27, r27
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	aa 1f       	adc	r26, r26
    204e:	bb 1f       	adc	r27, r27
    2050:	9c 01       	movw	r18, r24
    2052:	ad 01       	movw	r20, r26
    2054:	22 0f       	add	r18, r18
    2056:	33 1f       	adc	r19, r19
    2058:	44 1f       	adc	r20, r20
    205a:	55 1f       	adc	r21, r21
    205c:	22 0f       	add	r18, r18
    205e:	33 1f       	adc	r19, r19
    2060:	44 1f       	adc	r20, r20
    2062:	55 1f       	adc	r21, r21
    2064:	60 e0       	ldi	r22, 0x00	; 0
    2066:	72 e1       	ldi	r23, 0x12	; 18
    2068:	8a e7       	ldi	r24, 0x7A	; 122
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 94 04 12 	call	0x2408	; 0x2408 <__udivmodsi4>
    2070:	21 50       	subi	r18, 0x01	; 1
    2072:	31 09       	sbc	r19, r1
    2074:	80 b5       	in	r24, 0x20	; 32
    2076:	82 60       	ori	r24, 0x02	; 2
    2078:	80 bd       	out	0x20, r24	; 32
    207a:	80 b5       	in	r24, 0x20	; 32
    207c:	84 60       	ori	r24, 0x04	; 4
    207e:	80 bd       	out	0x20, r24	; 32
    2080:	52 98       	cbi	0x0a, 2	; 10
    2082:	80 b5       	in	r24, 0x20	; 32
    2084:	8f 7e       	andi	r24, 0xEF	; 239
    2086:	80 bd       	out	0x20, r24	; 32
    2088:	80 b5       	in	r24, 0x20	; 32
    208a:	8f 7d       	andi	r24, 0xDF	; 223
    208c:	80 bd       	out	0x20, r24	; 32
    208e:	80 b5       	in	r24, 0x20	; 32
    2090:	88 60       	ori	r24, 0x08	; 8
    2092:	80 bd       	out	0x20, r24	; 32
    2094:	53 9a       	sbi	0x0a, 3	; 10
    2096:	54 9a       	sbi	0x0a, 4	; 10
    2098:	80 b5       	in	r24, 0x20	; 32
    209a:	80 68       	ori	r24, 0x80	; 128
    209c:	80 bd       	out	0x20, r24	; 32
    209e:	30 bd       	out	0x20, r19	; 32
    20a0:	29 b9       	out	0x09, r18	; 9
    20a2:	08 95       	ret

000020a4 <USART_vidSendByte>:
    20a4:	5d 9b       	sbis	0x0b, 5	; 11
    20a6:	fe cf       	rjmp	.-4      	; 0x20a4 <USART_vidSendByte>
    20a8:	8c b9       	out	0x0c, r24	; 12
    20aa:	08 95       	ret

000020ac <USART_u8RecieveByte>:
    20ac:	5f 9b       	sbis	0x0b, 7	; 11
    20ae:	fe cf       	rjmp	.-4      	; 0x20ac <USART_u8RecieveByte>
    20b0:	8c b1       	in	r24, 0x0c	; 12
    20b2:	08 95       	ret

000020b4 <USART_vidEnableTXInterrupt>:
    20b4:	56 9a       	sbi	0x0a, 6	; 10
    20b6:	08 95       	ret

000020b8 <USART_vidEnableRXInterrupt>:
    20b8:	57 9a       	sbi	0x0a, 7	; 10
    20ba:	08 95       	ret

000020bc <USART_vidSendString>:
}
		/************************************************************************/
		/*																		*/
		/************************************************************************/
void USART_vidSendString(u8 *copy_ptrString)
{
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	ec 01       	movw	r28, r24
    while((*copy_ptrString) != '\0')
    20c2:	88 81       	ld	r24, Y
    20c4:	88 23       	and	r24, r24
    20c6:	31 f0       	breq	.+12     	; 0x20d4 <USART_vidSendString+0x18>
    20c8:	21 96       	adiw	r28, 0x01	; 1
    {
        USART_vidSendByte(*copy_ptrString);
    20ca:	0e 94 52 10 	call	0x20a4	; 0x20a4 <USART_vidSendByte>
		/************************************************************************/
		/*																		*/
		/************************************************************************/
void USART_vidSendString(u8 *copy_ptrString)
{
    while((*copy_ptrString) != '\0')
    20ce:	89 91       	ld	r24, Y+
    20d0:	81 11       	cpse	r24, r1
    20d2:	fb cf       	rjmp	.-10     	; 0x20ca <USART_vidSendString+0xe>
    {
        USART_vidSendByte(*copy_ptrString);
        copy_ptrString++;
    }
}
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	08 95       	ret

000020da <__subsf3>:
    20da:	50 58       	subi	r21, 0x80	; 128

000020dc <__addsf3>:
    20dc:	bb 27       	eor	r27, r27
    20de:	aa 27       	eor	r26, r26
    20e0:	0e 94 85 10 	call	0x210a	; 0x210a <__addsf3x>
    20e4:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__fp_round>
    20e8:	0e 94 4f 11 	call	0x229e	; 0x229e <__fp_pscA>
    20ec:	38 f0       	brcs	.+14     	; 0x20fc <__addsf3+0x20>
    20ee:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fp_pscB>
    20f2:	20 f0       	brcs	.+8      	; 0x20fc <__addsf3+0x20>
    20f4:	39 f4       	brne	.+14     	; 0x2104 <__addsf3+0x28>
    20f6:	9f 3f       	cpi	r25, 0xFF	; 255
    20f8:	19 f4       	brne	.+6      	; 0x2100 <__addsf3+0x24>
    20fa:	26 f4       	brtc	.+8      	; 0x2104 <__addsf3+0x28>
    20fc:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__fp_nan>
    2100:	0e f4       	brtc	.+2      	; 0x2104 <__addsf3+0x28>
    2102:	e0 95       	com	r30
    2104:	e7 fb       	bst	r30, 7
    2106:	0c 94 46 11 	jmp	0x228c	; 0x228c <__fp_inf>

0000210a <__addsf3x>:
    210a:	e9 2f       	mov	r30, r25
    210c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__fp_split3>
    2110:	58 f3       	brcs	.-42     	; 0x20e8 <__addsf3+0xc>
    2112:	ba 17       	cp	r27, r26
    2114:	62 07       	cpc	r22, r18
    2116:	73 07       	cpc	r23, r19
    2118:	84 07       	cpc	r24, r20
    211a:	95 07       	cpc	r25, r21
    211c:	20 f0       	brcs	.+8      	; 0x2126 <__addsf3x+0x1c>
    211e:	79 f4       	brne	.+30     	; 0x213e <__addsf3x+0x34>
    2120:	a6 f5       	brtc	.+104    	; 0x218a <__addsf3x+0x80>
    2122:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__fp_zero>
    2126:	0e f4       	brtc	.+2      	; 0x212a <__addsf3x+0x20>
    2128:	e0 95       	com	r30
    212a:	0b 2e       	mov	r0, r27
    212c:	ba 2f       	mov	r27, r26
    212e:	a0 2d       	mov	r26, r0
    2130:	0b 01       	movw	r0, r22
    2132:	b9 01       	movw	r22, r18
    2134:	90 01       	movw	r18, r0
    2136:	0c 01       	movw	r0, r24
    2138:	ca 01       	movw	r24, r20
    213a:	a0 01       	movw	r20, r0
    213c:	11 24       	eor	r1, r1
    213e:	ff 27       	eor	r31, r31
    2140:	59 1b       	sub	r21, r25
    2142:	99 f0       	breq	.+38     	; 0x216a <__addsf3x+0x60>
    2144:	59 3f       	cpi	r21, 0xF9	; 249
    2146:	50 f4       	brcc	.+20     	; 0x215c <__addsf3x+0x52>
    2148:	50 3e       	cpi	r21, 0xE0	; 224
    214a:	68 f1       	brcs	.+90     	; 0x21a6 <__addsf3x+0x9c>
    214c:	1a 16       	cp	r1, r26
    214e:	f0 40       	sbci	r31, 0x00	; 0
    2150:	a2 2f       	mov	r26, r18
    2152:	23 2f       	mov	r18, r19
    2154:	34 2f       	mov	r19, r20
    2156:	44 27       	eor	r20, r20
    2158:	58 5f       	subi	r21, 0xF8	; 248
    215a:	f3 cf       	rjmp	.-26     	; 0x2142 <__addsf3x+0x38>
    215c:	46 95       	lsr	r20
    215e:	37 95       	ror	r19
    2160:	27 95       	ror	r18
    2162:	a7 95       	ror	r26
    2164:	f0 40       	sbci	r31, 0x00	; 0
    2166:	53 95       	inc	r21
    2168:	c9 f7       	brne	.-14     	; 0x215c <__addsf3x+0x52>
    216a:	7e f4       	brtc	.+30     	; 0x218a <__addsf3x+0x80>
    216c:	1f 16       	cp	r1, r31
    216e:	ba 0b       	sbc	r27, r26
    2170:	62 0b       	sbc	r22, r18
    2172:	73 0b       	sbc	r23, r19
    2174:	84 0b       	sbc	r24, r20
    2176:	ba f0       	brmi	.+46     	; 0x21a6 <__addsf3x+0x9c>
    2178:	91 50       	subi	r25, 0x01	; 1
    217a:	a1 f0       	breq	.+40     	; 0x21a4 <__addsf3x+0x9a>
    217c:	ff 0f       	add	r31, r31
    217e:	bb 1f       	adc	r27, r27
    2180:	66 1f       	adc	r22, r22
    2182:	77 1f       	adc	r23, r23
    2184:	88 1f       	adc	r24, r24
    2186:	c2 f7       	brpl	.-16     	; 0x2178 <__addsf3x+0x6e>
    2188:	0e c0       	rjmp	.+28     	; 0x21a6 <__addsf3x+0x9c>
    218a:	ba 0f       	add	r27, r26
    218c:	62 1f       	adc	r22, r18
    218e:	73 1f       	adc	r23, r19
    2190:	84 1f       	adc	r24, r20
    2192:	48 f4       	brcc	.+18     	; 0x21a6 <__addsf3x+0x9c>
    2194:	87 95       	ror	r24
    2196:	77 95       	ror	r23
    2198:	67 95       	ror	r22
    219a:	b7 95       	ror	r27
    219c:	f7 95       	ror	r31
    219e:	9e 3f       	cpi	r25, 0xFE	; 254
    21a0:	08 f0       	brcs	.+2      	; 0x21a4 <__addsf3x+0x9a>
    21a2:	b0 cf       	rjmp	.-160    	; 0x2104 <__addsf3+0x28>
    21a4:	93 95       	inc	r25
    21a6:	88 0f       	add	r24, r24
    21a8:	08 f0       	brcs	.+2      	; 0x21ac <__addsf3x+0xa2>
    21aa:	99 27       	eor	r25, r25
    21ac:	ee 0f       	add	r30, r30
    21ae:	97 95       	ror	r25
    21b0:	87 95       	ror	r24
    21b2:	08 95       	ret

000021b4 <__fixunssfsi>:
    21b4:	0e 94 76 11 	call	0x22ec	; 0x22ec <__fp_splitA>
    21b8:	88 f0       	brcs	.+34     	; 0x21dc <__fixunssfsi+0x28>
    21ba:	9f 57       	subi	r25, 0x7F	; 127
    21bc:	98 f0       	brcs	.+38     	; 0x21e4 <__fixunssfsi+0x30>
    21be:	b9 2f       	mov	r27, r25
    21c0:	99 27       	eor	r25, r25
    21c2:	b7 51       	subi	r27, 0x17	; 23
    21c4:	b0 f0       	brcs	.+44     	; 0x21f2 <__fixunssfsi+0x3e>
    21c6:	e1 f0       	breq	.+56     	; 0x2200 <__fixunssfsi+0x4c>
    21c8:	66 0f       	add	r22, r22
    21ca:	77 1f       	adc	r23, r23
    21cc:	88 1f       	adc	r24, r24
    21ce:	99 1f       	adc	r25, r25
    21d0:	1a f0       	brmi	.+6      	; 0x21d8 <__fixunssfsi+0x24>
    21d2:	ba 95       	dec	r27
    21d4:	c9 f7       	brne	.-14     	; 0x21c8 <__fixunssfsi+0x14>
    21d6:	14 c0       	rjmp	.+40     	; 0x2200 <__fixunssfsi+0x4c>
    21d8:	b1 30       	cpi	r27, 0x01	; 1
    21da:	91 f0       	breq	.+36     	; 0x2200 <__fixunssfsi+0x4c>
    21dc:	0e 94 90 11 	call	0x2320	; 0x2320 <__fp_zero>
    21e0:	b1 e0       	ldi	r27, 0x01	; 1
    21e2:	08 95       	ret
    21e4:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__fp_zero>
    21e8:	67 2f       	mov	r22, r23
    21ea:	78 2f       	mov	r23, r24
    21ec:	88 27       	eor	r24, r24
    21ee:	b8 5f       	subi	r27, 0xF8	; 248
    21f0:	39 f0       	breq	.+14     	; 0x2200 <__fixunssfsi+0x4c>
    21f2:	b9 3f       	cpi	r27, 0xF9	; 249
    21f4:	cc f3       	brlt	.-14     	; 0x21e8 <__fixunssfsi+0x34>
    21f6:	86 95       	lsr	r24
    21f8:	77 95       	ror	r23
    21fa:	67 95       	ror	r22
    21fc:	b3 95       	inc	r27
    21fe:	d9 f7       	brne	.-10     	; 0x21f6 <__fixunssfsi+0x42>
    2200:	3e f4       	brtc	.+14     	; 0x2210 <__fixunssfsi+0x5c>
    2202:	90 95       	com	r25
    2204:	80 95       	com	r24
    2206:	70 95       	com	r23
    2208:	61 95       	neg	r22
    220a:	7f 4f       	sbci	r23, 0xFF	; 255
    220c:	8f 4f       	sbci	r24, 0xFF	; 255
    220e:	9f 4f       	sbci	r25, 0xFF	; 255
    2210:	08 95       	ret

00002212 <__floatunsisf>:
    2212:	e8 94       	clt
    2214:	09 c0       	rjmp	.+18     	; 0x2228 <__floatsisf+0x12>

00002216 <__floatsisf>:
    2216:	97 fb       	bst	r25, 7
    2218:	3e f4       	brtc	.+14     	; 0x2228 <__floatsisf+0x12>
    221a:	90 95       	com	r25
    221c:	80 95       	com	r24
    221e:	70 95       	com	r23
    2220:	61 95       	neg	r22
    2222:	7f 4f       	sbci	r23, 0xFF	; 255
    2224:	8f 4f       	sbci	r24, 0xFF	; 255
    2226:	9f 4f       	sbci	r25, 0xFF	; 255
    2228:	99 23       	and	r25, r25
    222a:	a9 f0       	breq	.+42     	; 0x2256 <__floatsisf+0x40>
    222c:	f9 2f       	mov	r31, r25
    222e:	96 e9       	ldi	r25, 0x96	; 150
    2230:	bb 27       	eor	r27, r27
    2232:	93 95       	inc	r25
    2234:	f6 95       	lsr	r31
    2236:	87 95       	ror	r24
    2238:	77 95       	ror	r23
    223a:	67 95       	ror	r22
    223c:	b7 95       	ror	r27
    223e:	f1 11       	cpse	r31, r1
    2240:	f8 cf       	rjmp	.-16     	; 0x2232 <__floatsisf+0x1c>
    2242:	fa f4       	brpl	.+62     	; 0x2282 <__floatsisf+0x6c>
    2244:	bb 0f       	add	r27, r27
    2246:	11 f4       	brne	.+4      	; 0x224c <__floatsisf+0x36>
    2248:	60 ff       	sbrs	r22, 0
    224a:	1b c0       	rjmp	.+54     	; 0x2282 <__floatsisf+0x6c>
    224c:	6f 5f       	subi	r22, 0xFF	; 255
    224e:	7f 4f       	sbci	r23, 0xFF	; 255
    2250:	8f 4f       	sbci	r24, 0xFF	; 255
    2252:	9f 4f       	sbci	r25, 0xFF	; 255
    2254:	16 c0       	rjmp	.+44     	; 0x2282 <__floatsisf+0x6c>
    2256:	88 23       	and	r24, r24
    2258:	11 f0       	breq	.+4      	; 0x225e <__floatsisf+0x48>
    225a:	96 e9       	ldi	r25, 0x96	; 150
    225c:	11 c0       	rjmp	.+34     	; 0x2280 <__floatsisf+0x6a>
    225e:	77 23       	and	r23, r23
    2260:	21 f0       	breq	.+8      	; 0x226a <__floatsisf+0x54>
    2262:	9e e8       	ldi	r25, 0x8E	; 142
    2264:	87 2f       	mov	r24, r23
    2266:	76 2f       	mov	r23, r22
    2268:	05 c0       	rjmp	.+10     	; 0x2274 <__floatsisf+0x5e>
    226a:	66 23       	and	r22, r22
    226c:	71 f0       	breq	.+28     	; 0x228a <__floatsisf+0x74>
    226e:	96 e8       	ldi	r25, 0x86	; 134
    2270:	86 2f       	mov	r24, r22
    2272:	70 e0       	ldi	r23, 0x00	; 0
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	2a f0       	brmi	.+10     	; 0x2282 <__floatsisf+0x6c>
    2278:	9a 95       	dec	r25
    227a:	66 0f       	add	r22, r22
    227c:	77 1f       	adc	r23, r23
    227e:	88 1f       	adc	r24, r24
    2280:	da f7       	brpl	.-10     	; 0x2278 <__floatsisf+0x62>
    2282:	88 0f       	add	r24, r24
    2284:	96 95       	lsr	r25
    2286:	87 95       	ror	r24
    2288:	97 f9       	bld	r25, 7
    228a:	08 95       	ret

0000228c <__fp_inf>:
    228c:	97 f9       	bld	r25, 7
    228e:	9f 67       	ori	r25, 0x7F	; 127
    2290:	80 e8       	ldi	r24, 0x80	; 128
    2292:	70 e0       	ldi	r23, 0x00	; 0
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	08 95       	ret

00002298 <__fp_nan>:
    2298:	9f ef       	ldi	r25, 0xFF	; 255
    229a:	80 ec       	ldi	r24, 0xC0	; 192
    229c:	08 95       	ret

0000229e <__fp_pscA>:
    229e:	00 24       	eor	r0, r0
    22a0:	0a 94       	dec	r0
    22a2:	16 16       	cp	r1, r22
    22a4:	17 06       	cpc	r1, r23
    22a6:	18 06       	cpc	r1, r24
    22a8:	09 06       	cpc	r0, r25
    22aa:	08 95       	ret

000022ac <__fp_pscB>:
    22ac:	00 24       	eor	r0, r0
    22ae:	0a 94       	dec	r0
    22b0:	12 16       	cp	r1, r18
    22b2:	13 06       	cpc	r1, r19
    22b4:	14 06       	cpc	r1, r20
    22b6:	05 06       	cpc	r0, r21
    22b8:	08 95       	ret

000022ba <__fp_round>:
    22ba:	09 2e       	mov	r0, r25
    22bc:	03 94       	inc	r0
    22be:	00 0c       	add	r0, r0
    22c0:	11 f4       	brne	.+4      	; 0x22c6 <__fp_round+0xc>
    22c2:	88 23       	and	r24, r24
    22c4:	52 f0       	brmi	.+20     	; 0x22da <__fp_round+0x20>
    22c6:	bb 0f       	add	r27, r27
    22c8:	40 f4       	brcc	.+16     	; 0x22da <__fp_round+0x20>
    22ca:	bf 2b       	or	r27, r31
    22cc:	11 f4       	brne	.+4      	; 0x22d2 <__fp_round+0x18>
    22ce:	60 ff       	sbrs	r22, 0
    22d0:	04 c0       	rjmp	.+8      	; 0x22da <__fp_round+0x20>
    22d2:	6f 5f       	subi	r22, 0xFF	; 255
    22d4:	7f 4f       	sbci	r23, 0xFF	; 255
    22d6:	8f 4f       	sbci	r24, 0xFF	; 255
    22d8:	9f 4f       	sbci	r25, 0xFF	; 255
    22da:	08 95       	ret

000022dc <__fp_split3>:
    22dc:	57 fd       	sbrc	r21, 7
    22de:	90 58       	subi	r25, 0x80	; 128
    22e0:	44 0f       	add	r20, r20
    22e2:	55 1f       	adc	r21, r21
    22e4:	59 f0       	breq	.+22     	; 0x22fc <__fp_splitA+0x10>
    22e6:	5f 3f       	cpi	r21, 0xFF	; 255
    22e8:	71 f0       	breq	.+28     	; 0x2306 <__fp_splitA+0x1a>
    22ea:	47 95       	ror	r20

000022ec <__fp_splitA>:
    22ec:	88 0f       	add	r24, r24
    22ee:	97 fb       	bst	r25, 7
    22f0:	99 1f       	adc	r25, r25
    22f2:	61 f0       	breq	.+24     	; 0x230c <__fp_splitA+0x20>
    22f4:	9f 3f       	cpi	r25, 0xFF	; 255
    22f6:	79 f0       	breq	.+30     	; 0x2316 <__fp_splitA+0x2a>
    22f8:	87 95       	ror	r24
    22fa:	08 95       	ret
    22fc:	12 16       	cp	r1, r18
    22fe:	13 06       	cpc	r1, r19
    2300:	14 06       	cpc	r1, r20
    2302:	55 1f       	adc	r21, r21
    2304:	f2 cf       	rjmp	.-28     	; 0x22ea <__fp_split3+0xe>
    2306:	46 95       	lsr	r20
    2308:	f1 df       	rcall	.-30     	; 0x22ec <__fp_splitA>
    230a:	08 c0       	rjmp	.+16     	; 0x231c <__fp_splitA+0x30>
    230c:	16 16       	cp	r1, r22
    230e:	17 06       	cpc	r1, r23
    2310:	18 06       	cpc	r1, r24
    2312:	99 1f       	adc	r25, r25
    2314:	f1 cf       	rjmp	.-30     	; 0x22f8 <__fp_splitA+0xc>
    2316:	86 95       	lsr	r24
    2318:	71 05       	cpc	r23, r1
    231a:	61 05       	cpc	r22, r1
    231c:	08 94       	sec
    231e:	08 95       	ret

00002320 <__fp_zero>:
    2320:	e8 94       	clt

00002322 <__fp_szero>:
    2322:	bb 27       	eor	r27, r27
    2324:	66 27       	eor	r22, r22
    2326:	77 27       	eor	r23, r23
    2328:	cb 01       	movw	r24, r22
    232a:	97 f9       	bld	r25, 7
    232c:	08 95       	ret

0000232e <__mulsf3>:
    232e:	0e 94 aa 11 	call	0x2354	; 0x2354 <__mulsf3x>
    2332:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__fp_round>
    2336:	0e 94 4f 11 	call	0x229e	; 0x229e <__fp_pscA>
    233a:	38 f0       	brcs	.+14     	; 0x234a <__mulsf3+0x1c>
    233c:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fp_pscB>
    2340:	20 f0       	brcs	.+8      	; 0x234a <__mulsf3+0x1c>
    2342:	95 23       	and	r25, r21
    2344:	11 f0       	breq	.+4      	; 0x234a <__mulsf3+0x1c>
    2346:	0c 94 46 11 	jmp	0x228c	; 0x228c <__fp_inf>
    234a:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__fp_nan>
    234e:	11 24       	eor	r1, r1
    2350:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__fp_szero>

00002354 <__mulsf3x>:
    2354:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__fp_split3>
    2358:	70 f3       	brcs	.-36     	; 0x2336 <__mulsf3+0x8>

0000235a <__mulsf3_pse>:
    235a:	95 9f       	mul	r25, r21
    235c:	c1 f3       	breq	.-16     	; 0x234e <__mulsf3+0x20>
    235e:	95 0f       	add	r25, r21
    2360:	50 e0       	ldi	r21, 0x00	; 0
    2362:	55 1f       	adc	r21, r21
    2364:	62 9f       	mul	r22, r18
    2366:	f0 01       	movw	r30, r0
    2368:	72 9f       	mul	r23, r18
    236a:	bb 27       	eor	r27, r27
    236c:	f0 0d       	add	r31, r0
    236e:	b1 1d       	adc	r27, r1
    2370:	63 9f       	mul	r22, r19
    2372:	aa 27       	eor	r26, r26
    2374:	f0 0d       	add	r31, r0
    2376:	b1 1d       	adc	r27, r1
    2378:	aa 1f       	adc	r26, r26
    237a:	64 9f       	mul	r22, r20
    237c:	66 27       	eor	r22, r22
    237e:	b0 0d       	add	r27, r0
    2380:	a1 1d       	adc	r26, r1
    2382:	66 1f       	adc	r22, r22
    2384:	82 9f       	mul	r24, r18
    2386:	22 27       	eor	r18, r18
    2388:	b0 0d       	add	r27, r0
    238a:	a1 1d       	adc	r26, r1
    238c:	62 1f       	adc	r22, r18
    238e:	73 9f       	mul	r23, r19
    2390:	b0 0d       	add	r27, r0
    2392:	a1 1d       	adc	r26, r1
    2394:	62 1f       	adc	r22, r18
    2396:	83 9f       	mul	r24, r19
    2398:	a0 0d       	add	r26, r0
    239a:	61 1d       	adc	r22, r1
    239c:	22 1f       	adc	r18, r18
    239e:	74 9f       	mul	r23, r20
    23a0:	33 27       	eor	r19, r19
    23a2:	a0 0d       	add	r26, r0
    23a4:	61 1d       	adc	r22, r1
    23a6:	23 1f       	adc	r18, r19
    23a8:	84 9f       	mul	r24, r20
    23aa:	60 0d       	add	r22, r0
    23ac:	21 1d       	adc	r18, r1
    23ae:	82 2f       	mov	r24, r18
    23b0:	76 2f       	mov	r23, r22
    23b2:	6a 2f       	mov	r22, r26
    23b4:	11 24       	eor	r1, r1
    23b6:	9f 57       	subi	r25, 0x7F	; 127
    23b8:	50 40       	sbci	r21, 0x00	; 0
    23ba:	9a f0       	brmi	.+38     	; 0x23e2 <__mulsf3_pse+0x88>
    23bc:	f1 f0       	breq	.+60     	; 0x23fa <__mulsf3_pse+0xa0>
    23be:	88 23       	and	r24, r24
    23c0:	4a f0       	brmi	.+18     	; 0x23d4 <__mulsf3_pse+0x7a>
    23c2:	ee 0f       	add	r30, r30
    23c4:	ff 1f       	adc	r31, r31
    23c6:	bb 1f       	adc	r27, r27
    23c8:	66 1f       	adc	r22, r22
    23ca:	77 1f       	adc	r23, r23
    23cc:	88 1f       	adc	r24, r24
    23ce:	91 50       	subi	r25, 0x01	; 1
    23d0:	50 40       	sbci	r21, 0x00	; 0
    23d2:	a9 f7       	brne	.-22     	; 0x23be <__mulsf3_pse+0x64>
    23d4:	9e 3f       	cpi	r25, 0xFE	; 254
    23d6:	51 05       	cpc	r21, r1
    23d8:	80 f0       	brcs	.+32     	; 0x23fa <__mulsf3_pse+0xa0>
    23da:	0c 94 46 11 	jmp	0x228c	; 0x228c <__fp_inf>
    23de:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__fp_szero>
    23e2:	5f 3f       	cpi	r21, 0xFF	; 255
    23e4:	e4 f3       	brlt	.-8      	; 0x23de <__mulsf3_pse+0x84>
    23e6:	98 3e       	cpi	r25, 0xE8	; 232
    23e8:	d4 f3       	brlt	.-12     	; 0x23de <__mulsf3_pse+0x84>
    23ea:	86 95       	lsr	r24
    23ec:	77 95       	ror	r23
    23ee:	67 95       	ror	r22
    23f0:	b7 95       	ror	r27
    23f2:	f7 95       	ror	r31
    23f4:	e7 95       	ror	r30
    23f6:	9f 5f       	subi	r25, 0xFF	; 255
    23f8:	c1 f7       	brne	.-16     	; 0x23ea <__mulsf3_pse+0x90>
    23fa:	fe 2b       	or	r31, r30
    23fc:	88 0f       	add	r24, r24
    23fe:	91 1d       	adc	r25, r1
    2400:	96 95       	lsr	r25
    2402:	87 95       	ror	r24
    2404:	97 f9       	bld	r25, 7
    2406:	08 95       	ret

00002408 <__udivmodsi4>:
    2408:	a1 e2       	ldi	r26, 0x21	; 33
    240a:	1a 2e       	mov	r1, r26
    240c:	aa 1b       	sub	r26, r26
    240e:	bb 1b       	sub	r27, r27
    2410:	fd 01       	movw	r30, r26
    2412:	0d c0       	rjmp	.+26     	; 0x242e <__udivmodsi4_ep>

00002414 <__udivmodsi4_loop>:
    2414:	aa 1f       	adc	r26, r26
    2416:	bb 1f       	adc	r27, r27
    2418:	ee 1f       	adc	r30, r30
    241a:	ff 1f       	adc	r31, r31
    241c:	a2 17       	cp	r26, r18
    241e:	b3 07       	cpc	r27, r19
    2420:	e4 07       	cpc	r30, r20
    2422:	f5 07       	cpc	r31, r21
    2424:	20 f0       	brcs	.+8      	; 0x242e <__udivmodsi4_ep>
    2426:	a2 1b       	sub	r26, r18
    2428:	b3 0b       	sbc	r27, r19
    242a:	e4 0b       	sbc	r30, r20
    242c:	f5 0b       	sbc	r31, r21

0000242e <__udivmodsi4_ep>:
    242e:	66 1f       	adc	r22, r22
    2430:	77 1f       	adc	r23, r23
    2432:	88 1f       	adc	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	1a 94       	dec	r1
    2438:	69 f7       	brne	.-38     	; 0x2414 <__udivmodsi4_loop>
    243a:	60 95       	com	r22
    243c:	70 95       	com	r23
    243e:	80 95       	com	r24
    2440:	90 95       	com	r25
    2442:	9b 01       	movw	r18, r22
    2444:	ac 01       	movw	r20, r24
    2446:	bd 01       	movw	r22, r26
    2448:	cf 01       	movw	r24, r30
    244a:	08 95       	ret

0000244c <__tablejump2__>:
    244c:	ee 0f       	add	r30, r30
    244e:	ff 1f       	adc	r31, r31
    2450:	05 90       	lpm	r0, Z+
    2452:	f4 91       	lpm	r31, Z
    2454:	e0 2d       	mov	r30, r0
    2456:	09 94       	ijmp

00002458 <sprintf>:
    2458:	ae e0       	ldi	r26, 0x0E	; 14
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	e2 e3       	ldi	r30, 0x32	; 50
    245e:	f2 e1       	ldi	r31, 0x12	; 18
    2460:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__prologue_saves__+0x1c>
    2464:	0d 89       	ldd	r16, Y+21	; 0x15
    2466:	1e 89       	ldd	r17, Y+22	; 0x16
    2468:	86 e0       	ldi	r24, 0x06	; 6
    246a:	8c 83       	std	Y+4, r24	; 0x04
    246c:	1a 83       	std	Y+2, r17	; 0x02
    246e:	09 83       	std	Y+1, r16	; 0x01
    2470:	8f ef       	ldi	r24, 0xFF	; 255
    2472:	9f e7       	ldi	r25, 0x7F	; 127
    2474:	9e 83       	std	Y+6, r25	; 0x06
    2476:	8d 83       	std	Y+5, r24	; 0x05
    2478:	ae 01       	movw	r20, r28
    247a:	47 5e       	subi	r20, 0xE7	; 231
    247c:	5f 4f       	sbci	r21, 0xFF	; 255
    247e:	6f 89       	ldd	r22, Y+23	; 0x17
    2480:	78 8d       	ldd	r23, Y+24	; 0x18
    2482:	ce 01       	movw	r24, r28
    2484:	01 96       	adiw	r24, 0x01	; 1
    2486:	0e 94 4e 12 	call	0x249c	; 0x249c <vfprintf>
    248a:	ef 81       	ldd	r30, Y+7	; 0x07
    248c:	f8 85       	ldd	r31, Y+8	; 0x08
    248e:	e0 0f       	add	r30, r16
    2490:	f1 1f       	adc	r31, r17
    2492:	10 82       	st	Z, r1
    2494:	2e 96       	adiw	r28, 0x0e	; 14
    2496:	e4 e0       	ldi	r30, 0x04	; 4
    2498:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__epilogue_restores__+0x1c>

0000249c <vfprintf>:
    249c:	ab e0       	ldi	r26, 0x0B	; 11
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e4 e5       	ldi	r30, 0x54	; 84
    24a2:	f2 e1       	ldi	r31, 0x12	; 18
    24a4:	0c 94 df 14 	jmp	0x29be	; 0x29be <__prologue_saves__>
    24a8:	6c 01       	movw	r12, r24
    24aa:	7b 01       	movw	r14, r22
    24ac:	8a 01       	movw	r16, r20
    24ae:	fc 01       	movw	r30, r24
    24b0:	17 82       	std	Z+7, r1	; 0x07
    24b2:	16 82       	std	Z+6, r1	; 0x06
    24b4:	83 81       	ldd	r24, Z+3	; 0x03
    24b6:	81 ff       	sbrs	r24, 1
    24b8:	cc c1       	rjmp	.+920    	; 0x2852 <vfprintf+0x3b6>
    24ba:	ce 01       	movw	r24, r28
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	3c 01       	movw	r6, r24
    24c0:	f6 01       	movw	r30, r12
    24c2:	93 81       	ldd	r25, Z+3	; 0x03
    24c4:	f7 01       	movw	r30, r14
    24c6:	93 fd       	sbrc	r25, 3
    24c8:	85 91       	lpm	r24, Z+
    24ca:	93 ff       	sbrs	r25, 3
    24cc:	81 91       	ld	r24, Z+
    24ce:	7f 01       	movw	r14, r30
    24d0:	88 23       	and	r24, r24
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <vfprintf+0x3a>
    24d4:	ba c1       	rjmp	.+884    	; 0x284a <vfprintf+0x3ae>
    24d6:	85 32       	cpi	r24, 0x25	; 37
    24d8:	39 f4       	brne	.+14     	; 0x24e8 <vfprintf+0x4c>
    24da:	93 fd       	sbrc	r25, 3
    24dc:	85 91       	lpm	r24, Z+
    24de:	93 ff       	sbrs	r25, 3
    24e0:	81 91       	ld	r24, Z+
    24e2:	7f 01       	movw	r14, r30
    24e4:	85 32       	cpi	r24, 0x25	; 37
    24e6:	29 f4       	brne	.+10     	; 0x24f2 <vfprintf+0x56>
    24e8:	b6 01       	movw	r22, r12
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	0e 94 45 14 	call	0x288a	; 0x288a <fputc>
    24f0:	e7 cf       	rjmp	.-50     	; 0x24c0 <vfprintf+0x24>
    24f2:	91 2c       	mov	r9, r1
    24f4:	21 2c       	mov	r2, r1
    24f6:	31 2c       	mov	r3, r1
    24f8:	ff e1       	ldi	r31, 0x1F	; 31
    24fa:	f3 15       	cp	r31, r3
    24fc:	d8 f0       	brcs	.+54     	; 0x2534 <vfprintf+0x98>
    24fe:	8b 32       	cpi	r24, 0x2B	; 43
    2500:	79 f0       	breq	.+30     	; 0x2520 <vfprintf+0x84>
    2502:	38 f4       	brcc	.+14     	; 0x2512 <vfprintf+0x76>
    2504:	80 32       	cpi	r24, 0x20	; 32
    2506:	79 f0       	breq	.+30     	; 0x2526 <vfprintf+0x8a>
    2508:	83 32       	cpi	r24, 0x23	; 35
    250a:	a1 f4       	brne	.+40     	; 0x2534 <vfprintf+0x98>
    250c:	23 2d       	mov	r18, r3
    250e:	20 61       	ori	r18, 0x10	; 16
    2510:	1d c0       	rjmp	.+58     	; 0x254c <vfprintf+0xb0>
    2512:	8d 32       	cpi	r24, 0x2D	; 45
    2514:	61 f0       	breq	.+24     	; 0x252e <vfprintf+0x92>
    2516:	80 33       	cpi	r24, 0x30	; 48
    2518:	69 f4       	brne	.+26     	; 0x2534 <vfprintf+0x98>
    251a:	23 2d       	mov	r18, r3
    251c:	21 60       	ori	r18, 0x01	; 1
    251e:	16 c0       	rjmp	.+44     	; 0x254c <vfprintf+0xb0>
    2520:	83 2d       	mov	r24, r3
    2522:	82 60       	ori	r24, 0x02	; 2
    2524:	38 2e       	mov	r3, r24
    2526:	e3 2d       	mov	r30, r3
    2528:	e4 60       	ori	r30, 0x04	; 4
    252a:	3e 2e       	mov	r3, r30
    252c:	2a c0       	rjmp	.+84     	; 0x2582 <vfprintf+0xe6>
    252e:	f3 2d       	mov	r31, r3
    2530:	f8 60       	ori	r31, 0x08	; 8
    2532:	1d c0       	rjmp	.+58     	; 0x256e <vfprintf+0xd2>
    2534:	37 fc       	sbrc	r3, 7
    2536:	2d c0       	rjmp	.+90     	; 0x2592 <vfprintf+0xf6>
    2538:	20 ed       	ldi	r18, 0xD0	; 208
    253a:	28 0f       	add	r18, r24
    253c:	2a 30       	cpi	r18, 0x0A	; 10
    253e:	40 f0       	brcs	.+16     	; 0x2550 <vfprintf+0xb4>
    2540:	8e 32       	cpi	r24, 0x2E	; 46
    2542:	b9 f4       	brne	.+46     	; 0x2572 <vfprintf+0xd6>
    2544:	36 fc       	sbrc	r3, 6
    2546:	81 c1       	rjmp	.+770    	; 0x284a <vfprintf+0x3ae>
    2548:	23 2d       	mov	r18, r3
    254a:	20 64       	ori	r18, 0x40	; 64
    254c:	32 2e       	mov	r3, r18
    254e:	19 c0       	rjmp	.+50     	; 0x2582 <vfprintf+0xe6>
    2550:	36 fe       	sbrs	r3, 6
    2552:	06 c0       	rjmp	.+12     	; 0x2560 <vfprintf+0xc4>
    2554:	8a e0       	ldi	r24, 0x0A	; 10
    2556:	98 9e       	mul	r9, r24
    2558:	20 0d       	add	r18, r0
    255a:	11 24       	eor	r1, r1
    255c:	92 2e       	mov	r9, r18
    255e:	11 c0       	rjmp	.+34     	; 0x2582 <vfprintf+0xe6>
    2560:	ea e0       	ldi	r30, 0x0A	; 10
    2562:	2e 9e       	mul	r2, r30
    2564:	20 0d       	add	r18, r0
    2566:	11 24       	eor	r1, r1
    2568:	22 2e       	mov	r2, r18
    256a:	f3 2d       	mov	r31, r3
    256c:	f0 62       	ori	r31, 0x20	; 32
    256e:	3f 2e       	mov	r3, r31
    2570:	08 c0       	rjmp	.+16     	; 0x2582 <vfprintf+0xe6>
    2572:	8c 36       	cpi	r24, 0x6C	; 108
    2574:	21 f4       	brne	.+8      	; 0x257e <vfprintf+0xe2>
    2576:	83 2d       	mov	r24, r3
    2578:	80 68       	ori	r24, 0x80	; 128
    257a:	38 2e       	mov	r3, r24
    257c:	02 c0       	rjmp	.+4      	; 0x2582 <vfprintf+0xe6>
    257e:	88 36       	cpi	r24, 0x68	; 104
    2580:	41 f4       	brne	.+16     	; 0x2592 <vfprintf+0xf6>
    2582:	f7 01       	movw	r30, r14
    2584:	93 fd       	sbrc	r25, 3
    2586:	85 91       	lpm	r24, Z+
    2588:	93 ff       	sbrs	r25, 3
    258a:	81 91       	ld	r24, Z+
    258c:	7f 01       	movw	r14, r30
    258e:	81 11       	cpse	r24, r1
    2590:	b3 cf       	rjmp	.-154    	; 0x24f8 <vfprintf+0x5c>
    2592:	98 2f       	mov	r25, r24
    2594:	9f 7d       	andi	r25, 0xDF	; 223
    2596:	95 54       	subi	r25, 0x45	; 69
    2598:	93 30       	cpi	r25, 0x03	; 3
    259a:	28 f4       	brcc	.+10     	; 0x25a6 <vfprintf+0x10a>
    259c:	0c 5f       	subi	r16, 0xFC	; 252
    259e:	1f 4f       	sbci	r17, 0xFF	; 255
    25a0:	9f e3       	ldi	r25, 0x3F	; 63
    25a2:	99 83       	std	Y+1, r25	; 0x01
    25a4:	0d c0       	rjmp	.+26     	; 0x25c0 <vfprintf+0x124>
    25a6:	83 36       	cpi	r24, 0x63	; 99
    25a8:	31 f0       	breq	.+12     	; 0x25b6 <vfprintf+0x11a>
    25aa:	83 37       	cpi	r24, 0x73	; 115
    25ac:	71 f0       	breq	.+28     	; 0x25ca <vfprintf+0x12e>
    25ae:	83 35       	cpi	r24, 0x53	; 83
    25b0:	09 f0       	breq	.+2      	; 0x25b4 <vfprintf+0x118>
    25b2:	59 c0       	rjmp	.+178    	; 0x2666 <vfprintf+0x1ca>
    25b4:	21 c0       	rjmp	.+66     	; 0x25f8 <vfprintf+0x15c>
    25b6:	f8 01       	movw	r30, r16
    25b8:	80 81       	ld	r24, Z
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	0e 5f       	subi	r16, 0xFE	; 254
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	88 24       	eor	r8, r8
    25c2:	83 94       	inc	r8
    25c4:	91 2c       	mov	r9, r1
    25c6:	53 01       	movw	r10, r6
    25c8:	13 c0       	rjmp	.+38     	; 0x25f0 <vfprintf+0x154>
    25ca:	28 01       	movw	r4, r16
    25cc:	f2 e0       	ldi	r31, 0x02	; 2
    25ce:	4f 0e       	add	r4, r31
    25d0:	51 1c       	adc	r5, r1
    25d2:	f8 01       	movw	r30, r16
    25d4:	a0 80       	ld	r10, Z
    25d6:	b1 80       	ldd	r11, Z+1	; 0x01
    25d8:	36 fe       	sbrs	r3, 6
    25da:	03 c0       	rjmp	.+6      	; 0x25e2 <vfprintf+0x146>
    25dc:	69 2d       	mov	r22, r9
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <vfprintf+0x14a>
    25e2:	6f ef       	ldi	r22, 0xFF	; 255
    25e4:	7f ef       	ldi	r23, 0xFF	; 255
    25e6:	c5 01       	movw	r24, r10
    25e8:	0e 94 3a 14 	call	0x2874	; 0x2874 <strnlen>
    25ec:	4c 01       	movw	r8, r24
    25ee:	82 01       	movw	r16, r4
    25f0:	f3 2d       	mov	r31, r3
    25f2:	ff 77       	andi	r31, 0x7F	; 127
    25f4:	3f 2e       	mov	r3, r31
    25f6:	16 c0       	rjmp	.+44     	; 0x2624 <vfprintf+0x188>
    25f8:	28 01       	movw	r4, r16
    25fa:	22 e0       	ldi	r18, 0x02	; 2
    25fc:	42 0e       	add	r4, r18
    25fe:	51 1c       	adc	r5, r1
    2600:	f8 01       	movw	r30, r16
    2602:	a0 80       	ld	r10, Z
    2604:	b1 80       	ldd	r11, Z+1	; 0x01
    2606:	36 fe       	sbrs	r3, 6
    2608:	03 c0       	rjmp	.+6      	; 0x2610 <vfprintf+0x174>
    260a:	69 2d       	mov	r22, r9
    260c:	70 e0       	ldi	r23, 0x00	; 0
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <vfprintf+0x178>
    2610:	6f ef       	ldi	r22, 0xFF	; 255
    2612:	7f ef       	ldi	r23, 0xFF	; 255
    2614:	c5 01       	movw	r24, r10
    2616:	0e 94 2f 14 	call	0x285e	; 0x285e <strnlen_P>
    261a:	4c 01       	movw	r8, r24
    261c:	f3 2d       	mov	r31, r3
    261e:	f0 68       	ori	r31, 0x80	; 128
    2620:	3f 2e       	mov	r3, r31
    2622:	82 01       	movw	r16, r4
    2624:	33 fc       	sbrc	r3, 3
    2626:	1b c0       	rjmp	.+54     	; 0x265e <vfprintf+0x1c2>
    2628:	82 2d       	mov	r24, r2
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	88 16       	cp	r8, r24
    262e:	99 06       	cpc	r9, r25
    2630:	b0 f4       	brcc	.+44     	; 0x265e <vfprintf+0x1c2>
    2632:	b6 01       	movw	r22, r12
    2634:	80 e2       	ldi	r24, 0x20	; 32
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 45 14 	call	0x288a	; 0x288a <fputc>
    263c:	2a 94       	dec	r2
    263e:	f4 cf       	rjmp	.-24     	; 0x2628 <vfprintf+0x18c>
    2640:	f5 01       	movw	r30, r10
    2642:	37 fc       	sbrc	r3, 7
    2644:	85 91       	lpm	r24, Z+
    2646:	37 fe       	sbrs	r3, 7
    2648:	81 91       	ld	r24, Z+
    264a:	5f 01       	movw	r10, r30
    264c:	b6 01       	movw	r22, r12
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0e 94 45 14 	call	0x288a	; 0x288a <fputc>
    2654:	21 10       	cpse	r2, r1
    2656:	2a 94       	dec	r2
    2658:	21 e0       	ldi	r18, 0x01	; 1
    265a:	82 1a       	sub	r8, r18
    265c:	91 08       	sbc	r9, r1
    265e:	81 14       	cp	r8, r1
    2660:	91 04       	cpc	r9, r1
    2662:	71 f7       	brne	.-36     	; 0x2640 <vfprintf+0x1a4>
    2664:	e8 c0       	rjmp	.+464    	; 0x2836 <vfprintf+0x39a>
    2666:	84 36       	cpi	r24, 0x64	; 100
    2668:	11 f0       	breq	.+4      	; 0x266e <vfprintf+0x1d2>
    266a:	89 36       	cpi	r24, 0x69	; 105
    266c:	41 f5       	brne	.+80     	; 0x26be <vfprintf+0x222>
    266e:	f8 01       	movw	r30, r16
    2670:	37 fe       	sbrs	r3, 7
    2672:	07 c0       	rjmp	.+14     	; 0x2682 <vfprintf+0x1e6>
    2674:	60 81       	ld	r22, Z
    2676:	71 81       	ldd	r23, Z+1	; 0x01
    2678:	82 81       	ldd	r24, Z+2	; 0x02
    267a:	93 81       	ldd	r25, Z+3	; 0x03
    267c:	0c 5f       	subi	r16, 0xFC	; 252
    267e:	1f 4f       	sbci	r17, 0xFF	; 255
    2680:	08 c0       	rjmp	.+16     	; 0x2692 <vfprintf+0x1f6>
    2682:	60 81       	ld	r22, Z
    2684:	71 81       	ldd	r23, Z+1	; 0x01
    2686:	07 2e       	mov	r0, r23
    2688:	00 0c       	add	r0, r0
    268a:	88 0b       	sbc	r24, r24
    268c:	99 0b       	sbc	r25, r25
    268e:	0e 5f       	subi	r16, 0xFE	; 254
    2690:	1f 4f       	sbci	r17, 0xFF	; 255
    2692:	f3 2d       	mov	r31, r3
    2694:	ff 76       	andi	r31, 0x6F	; 111
    2696:	3f 2e       	mov	r3, r31
    2698:	97 ff       	sbrs	r25, 7
    269a:	09 c0       	rjmp	.+18     	; 0x26ae <vfprintf+0x212>
    269c:	90 95       	com	r25
    269e:	80 95       	com	r24
    26a0:	70 95       	com	r23
    26a2:	61 95       	neg	r22
    26a4:	7f 4f       	sbci	r23, 0xFF	; 255
    26a6:	8f 4f       	sbci	r24, 0xFF	; 255
    26a8:	9f 4f       	sbci	r25, 0xFF	; 255
    26aa:	f0 68       	ori	r31, 0x80	; 128
    26ac:	3f 2e       	mov	r3, r31
    26ae:	2a e0       	ldi	r18, 0x0A	; 10
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	a3 01       	movw	r20, r6
    26b4:	0e 94 81 14 	call	0x2902	; 0x2902 <__ultoa_invert>
    26b8:	88 2e       	mov	r8, r24
    26ba:	86 18       	sub	r8, r6
    26bc:	45 c0       	rjmp	.+138    	; 0x2748 <vfprintf+0x2ac>
    26be:	85 37       	cpi	r24, 0x75	; 117
    26c0:	31 f4       	brne	.+12     	; 0x26ce <vfprintf+0x232>
    26c2:	23 2d       	mov	r18, r3
    26c4:	2f 7e       	andi	r18, 0xEF	; 239
    26c6:	b2 2e       	mov	r11, r18
    26c8:	2a e0       	ldi	r18, 0x0A	; 10
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	25 c0       	rjmp	.+74     	; 0x2718 <vfprintf+0x27c>
    26ce:	93 2d       	mov	r25, r3
    26d0:	99 7f       	andi	r25, 0xF9	; 249
    26d2:	b9 2e       	mov	r11, r25
    26d4:	8f 36       	cpi	r24, 0x6F	; 111
    26d6:	c1 f0       	breq	.+48     	; 0x2708 <vfprintf+0x26c>
    26d8:	18 f4       	brcc	.+6      	; 0x26e0 <vfprintf+0x244>
    26da:	88 35       	cpi	r24, 0x58	; 88
    26dc:	79 f0       	breq	.+30     	; 0x26fc <vfprintf+0x260>
    26de:	b5 c0       	rjmp	.+362    	; 0x284a <vfprintf+0x3ae>
    26e0:	80 37       	cpi	r24, 0x70	; 112
    26e2:	19 f0       	breq	.+6      	; 0x26ea <vfprintf+0x24e>
    26e4:	88 37       	cpi	r24, 0x78	; 120
    26e6:	21 f0       	breq	.+8      	; 0x26f0 <vfprintf+0x254>
    26e8:	b0 c0       	rjmp	.+352    	; 0x284a <vfprintf+0x3ae>
    26ea:	e9 2f       	mov	r30, r25
    26ec:	e0 61       	ori	r30, 0x10	; 16
    26ee:	be 2e       	mov	r11, r30
    26f0:	b4 fe       	sbrs	r11, 4
    26f2:	0d c0       	rjmp	.+26     	; 0x270e <vfprintf+0x272>
    26f4:	fb 2d       	mov	r31, r11
    26f6:	f4 60       	ori	r31, 0x04	; 4
    26f8:	bf 2e       	mov	r11, r31
    26fa:	09 c0       	rjmp	.+18     	; 0x270e <vfprintf+0x272>
    26fc:	34 fe       	sbrs	r3, 4
    26fe:	0a c0       	rjmp	.+20     	; 0x2714 <vfprintf+0x278>
    2700:	29 2f       	mov	r18, r25
    2702:	26 60       	ori	r18, 0x06	; 6
    2704:	b2 2e       	mov	r11, r18
    2706:	06 c0       	rjmp	.+12     	; 0x2714 <vfprintf+0x278>
    2708:	28 e0       	ldi	r18, 0x08	; 8
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	05 c0       	rjmp	.+10     	; 0x2718 <vfprintf+0x27c>
    270e:	20 e1       	ldi	r18, 0x10	; 16
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	02 c0       	rjmp	.+4      	; 0x2718 <vfprintf+0x27c>
    2714:	20 e1       	ldi	r18, 0x10	; 16
    2716:	32 e0       	ldi	r19, 0x02	; 2
    2718:	f8 01       	movw	r30, r16
    271a:	b7 fe       	sbrs	r11, 7
    271c:	07 c0       	rjmp	.+14     	; 0x272c <vfprintf+0x290>
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	0c 5f       	subi	r16, 0xFC	; 252
    2728:	1f 4f       	sbci	r17, 0xFF	; 255
    272a:	06 c0       	rjmp	.+12     	; 0x2738 <vfprintf+0x29c>
    272c:	60 81       	ld	r22, Z
    272e:	71 81       	ldd	r23, Z+1	; 0x01
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	0e 5f       	subi	r16, 0xFE	; 254
    2736:	1f 4f       	sbci	r17, 0xFF	; 255
    2738:	a3 01       	movw	r20, r6
    273a:	0e 94 81 14 	call	0x2902	; 0x2902 <__ultoa_invert>
    273e:	88 2e       	mov	r8, r24
    2740:	86 18       	sub	r8, r6
    2742:	fb 2d       	mov	r31, r11
    2744:	ff 77       	andi	r31, 0x7F	; 127
    2746:	3f 2e       	mov	r3, r31
    2748:	36 fe       	sbrs	r3, 6
    274a:	0d c0       	rjmp	.+26     	; 0x2766 <vfprintf+0x2ca>
    274c:	23 2d       	mov	r18, r3
    274e:	2e 7f       	andi	r18, 0xFE	; 254
    2750:	a2 2e       	mov	r10, r18
    2752:	89 14       	cp	r8, r9
    2754:	58 f4       	brcc	.+22     	; 0x276c <vfprintf+0x2d0>
    2756:	34 fe       	sbrs	r3, 4
    2758:	0b c0       	rjmp	.+22     	; 0x2770 <vfprintf+0x2d4>
    275a:	32 fc       	sbrc	r3, 2
    275c:	09 c0       	rjmp	.+18     	; 0x2770 <vfprintf+0x2d4>
    275e:	83 2d       	mov	r24, r3
    2760:	8e 7e       	andi	r24, 0xEE	; 238
    2762:	a8 2e       	mov	r10, r24
    2764:	05 c0       	rjmp	.+10     	; 0x2770 <vfprintf+0x2d4>
    2766:	b8 2c       	mov	r11, r8
    2768:	a3 2c       	mov	r10, r3
    276a:	03 c0       	rjmp	.+6      	; 0x2772 <vfprintf+0x2d6>
    276c:	b8 2c       	mov	r11, r8
    276e:	01 c0       	rjmp	.+2      	; 0x2772 <vfprintf+0x2d6>
    2770:	b9 2c       	mov	r11, r9
    2772:	a4 fe       	sbrs	r10, 4
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <vfprintf+0x2f8>
    2776:	fe 01       	movw	r30, r28
    2778:	e8 0d       	add	r30, r8
    277a:	f1 1d       	adc	r31, r1
    277c:	80 81       	ld	r24, Z
    277e:	80 33       	cpi	r24, 0x30	; 48
    2780:	21 f4       	brne	.+8      	; 0x278a <vfprintf+0x2ee>
    2782:	9a 2d       	mov	r25, r10
    2784:	99 7e       	andi	r25, 0xE9	; 233
    2786:	a9 2e       	mov	r10, r25
    2788:	09 c0       	rjmp	.+18     	; 0x279c <vfprintf+0x300>
    278a:	a2 fe       	sbrs	r10, 2
    278c:	06 c0       	rjmp	.+12     	; 0x279a <vfprintf+0x2fe>
    278e:	b3 94       	inc	r11
    2790:	b3 94       	inc	r11
    2792:	04 c0       	rjmp	.+8      	; 0x279c <vfprintf+0x300>
    2794:	8a 2d       	mov	r24, r10
    2796:	86 78       	andi	r24, 0x86	; 134
    2798:	09 f0       	breq	.+2      	; 0x279c <vfprintf+0x300>
    279a:	b3 94       	inc	r11
    279c:	a3 fc       	sbrc	r10, 3
    279e:	11 c0       	rjmp	.+34     	; 0x27c2 <vfprintf+0x326>
    27a0:	a0 fe       	sbrs	r10, 0
    27a2:	06 c0       	rjmp	.+12     	; 0x27b0 <vfprintf+0x314>
    27a4:	b2 14       	cp	r11, r2
    27a6:	88 f4       	brcc	.+34     	; 0x27ca <vfprintf+0x32e>
    27a8:	28 0c       	add	r2, r8
    27aa:	92 2c       	mov	r9, r2
    27ac:	9b 18       	sub	r9, r11
    27ae:	0e c0       	rjmp	.+28     	; 0x27cc <vfprintf+0x330>
    27b0:	b2 14       	cp	r11, r2
    27b2:	60 f4       	brcc	.+24     	; 0x27cc <vfprintf+0x330>
    27b4:	b6 01       	movw	r22, r12
    27b6:	80 e2       	ldi	r24, 0x20	; 32
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	0e 94 45 14 	call	0x288a	; 0x288a <fputc>
    27be:	b3 94       	inc	r11
    27c0:	f7 cf       	rjmp	.-18     	; 0x27b0 <vfprintf+0x314>
    27c2:	b2 14       	cp	r11, r2
    27c4:	18 f4       	brcc	.+6      	; 0x27cc <vfprintf+0x330>
    27c6:	2b 18       	sub	r2, r11
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <vfprintf+0x332>
    27ca:	98 2c       	mov	r9, r8
    27cc:	21 2c       	mov	r2, r1
    27ce:	a4 fe       	sbrs	r10, 4
    27d0:	10 c0       	rjmp	.+32     	; 0x27f2 <vfprintf+0x356>
    27d2:	b6 01       	movw	r22, r12
    27d4:	80 e3       	ldi	r24, 0x30	; 48
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	0e 94 45 14 	call	0x288a	; 0x288a <fputc>
    27dc:	a2 fe       	sbrs	r10, 2
    27de:	17 c0       	rjmp	.+46     	; 0x280e <vfprintf+0x372>
    27e0:	a1 fc       	sbrc	r10, 1
    27e2:	03 c0       	rjmp	.+6      	; 0x27ea <vfprintf+0x34e>
    27e4:	88 e7       	ldi	r24, 0x78	; 120
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <vfprintf+0x352>
    27ea:	88 e5       	ldi	r24, 0x58	; 88
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	b6 01       	movw	r22, r12
    27f0:	0c c0       	rjmp	.+24     	; 0x280a <vfprintf+0x36e>
    27f2:	8a 2d       	mov	r24, r10
    27f4:	86 78       	andi	r24, 0x86	; 134
    27f6:	59 f0       	breq	.+22     	; 0x280e <vfprintf+0x372>
    27f8:	a1 fe       	sbrs	r10, 1
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <vfprintf+0x364>
    27fc:	8b e2       	ldi	r24, 0x2B	; 43
    27fe:	01 c0       	rjmp	.+2      	; 0x2802 <vfprintf+0x366>
    2800:	80 e2       	ldi	r24, 0x20	; 32
    2802:	a7 fc       	sbrc	r10, 7
    2804:	8d e2       	ldi	r24, 0x2D	; 45
    2806:	b6 01       	movw	r22, r12
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	0e 94 45 14 	call	0x288a	; 0x288a <fputc>
    280e:	89 14       	cp	r8, r9
    2810:	38 f4       	brcc	.+14     	; 0x2820 <vfprintf+0x384>
    2812:	b6 01       	movw	r22, r12
    2814:	80 e3       	ldi	r24, 0x30	; 48
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 94 45 14 	call	0x288a	; 0x288a <fputc>
    281c:	9a 94       	dec	r9
    281e:	f7 cf       	rjmp	.-18     	; 0x280e <vfprintf+0x372>
    2820:	8a 94       	dec	r8
    2822:	f3 01       	movw	r30, r6
    2824:	e8 0d       	add	r30, r8
    2826:	f1 1d       	adc	r31, r1
    2828:	80 81       	ld	r24, Z
    282a:	b6 01       	movw	r22, r12
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	0e 94 45 14 	call	0x288a	; 0x288a <fputc>
    2832:	81 10       	cpse	r8, r1
    2834:	f5 cf       	rjmp	.-22     	; 0x2820 <vfprintf+0x384>
    2836:	22 20       	and	r2, r2
    2838:	09 f4       	brne	.+2      	; 0x283c <vfprintf+0x3a0>
    283a:	42 ce       	rjmp	.-892    	; 0x24c0 <vfprintf+0x24>
    283c:	b6 01       	movw	r22, r12
    283e:	80 e2       	ldi	r24, 0x20	; 32
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	0e 94 45 14 	call	0x288a	; 0x288a <fputc>
    2846:	2a 94       	dec	r2
    2848:	f6 cf       	rjmp	.-20     	; 0x2836 <vfprintf+0x39a>
    284a:	f6 01       	movw	r30, r12
    284c:	86 81       	ldd	r24, Z+6	; 0x06
    284e:	97 81       	ldd	r25, Z+7	; 0x07
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <vfprintf+0x3ba>
    2852:	8f ef       	ldi	r24, 0xFF	; 255
    2854:	9f ef       	ldi	r25, 0xFF	; 255
    2856:	2b 96       	adiw	r28, 0x0b	; 11
    2858:	e2 e1       	ldi	r30, 0x12	; 18
    285a:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__epilogue_restores__>

0000285e <strnlen_P>:
    285e:	fc 01       	movw	r30, r24
    2860:	05 90       	lpm	r0, Z+
    2862:	61 50       	subi	r22, 0x01	; 1
    2864:	70 40       	sbci	r23, 0x00	; 0
    2866:	01 10       	cpse	r0, r1
    2868:	d8 f7       	brcc	.-10     	; 0x2860 <strnlen_P+0x2>
    286a:	80 95       	com	r24
    286c:	90 95       	com	r25
    286e:	8e 0f       	add	r24, r30
    2870:	9f 1f       	adc	r25, r31
    2872:	08 95       	ret

00002874 <strnlen>:
    2874:	fc 01       	movw	r30, r24
    2876:	61 50       	subi	r22, 0x01	; 1
    2878:	70 40       	sbci	r23, 0x00	; 0
    287a:	01 90       	ld	r0, Z+
    287c:	01 10       	cpse	r0, r1
    287e:	d8 f7       	brcc	.-10     	; 0x2876 <strnlen+0x2>
    2880:	80 95       	com	r24
    2882:	90 95       	com	r25
    2884:	8e 0f       	add	r24, r30
    2886:	9f 1f       	adc	r25, r31
    2888:	08 95       	ret

0000288a <fputc>:
    288a:	0f 93       	push	r16
    288c:	1f 93       	push	r17
    288e:	cf 93       	push	r28
    2890:	df 93       	push	r29
    2892:	fb 01       	movw	r30, r22
    2894:	23 81       	ldd	r18, Z+3	; 0x03
    2896:	21 fd       	sbrc	r18, 1
    2898:	03 c0       	rjmp	.+6      	; 0x28a0 <fputc+0x16>
    289a:	8f ef       	ldi	r24, 0xFF	; 255
    289c:	9f ef       	ldi	r25, 0xFF	; 255
    289e:	2c c0       	rjmp	.+88     	; 0x28f8 <fputc+0x6e>
    28a0:	22 ff       	sbrs	r18, 2
    28a2:	16 c0       	rjmp	.+44     	; 0x28d0 <fputc+0x46>
    28a4:	46 81       	ldd	r20, Z+6	; 0x06
    28a6:	57 81       	ldd	r21, Z+7	; 0x07
    28a8:	24 81       	ldd	r18, Z+4	; 0x04
    28aa:	35 81       	ldd	r19, Z+5	; 0x05
    28ac:	42 17       	cp	r20, r18
    28ae:	53 07       	cpc	r21, r19
    28b0:	44 f4       	brge	.+16     	; 0x28c2 <fputc+0x38>
    28b2:	a0 81       	ld	r26, Z
    28b4:	b1 81       	ldd	r27, Z+1	; 0x01
    28b6:	9d 01       	movw	r18, r26
    28b8:	2f 5f       	subi	r18, 0xFF	; 255
    28ba:	3f 4f       	sbci	r19, 0xFF	; 255
    28bc:	31 83       	std	Z+1, r19	; 0x01
    28be:	20 83       	st	Z, r18
    28c0:	8c 93       	st	X, r24
    28c2:	26 81       	ldd	r18, Z+6	; 0x06
    28c4:	37 81       	ldd	r19, Z+7	; 0x07
    28c6:	2f 5f       	subi	r18, 0xFF	; 255
    28c8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ca:	37 83       	std	Z+7, r19	; 0x07
    28cc:	26 83       	std	Z+6, r18	; 0x06
    28ce:	14 c0       	rjmp	.+40     	; 0x28f8 <fputc+0x6e>
    28d0:	8b 01       	movw	r16, r22
    28d2:	ec 01       	movw	r28, r24
    28d4:	fb 01       	movw	r30, r22
    28d6:	00 84       	ldd	r0, Z+8	; 0x08
    28d8:	f1 85       	ldd	r31, Z+9	; 0x09
    28da:	e0 2d       	mov	r30, r0
    28dc:	09 95       	icall
    28de:	89 2b       	or	r24, r25
    28e0:	e1 f6       	brne	.-72     	; 0x289a <fputc+0x10>
    28e2:	d8 01       	movw	r26, r16
    28e4:	16 96       	adiw	r26, 0x06	; 6
    28e6:	8d 91       	ld	r24, X+
    28e8:	9c 91       	ld	r25, X
    28ea:	17 97       	sbiw	r26, 0x07	; 7
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	17 96       	adiw	r26, 0x07	; 7
    28f0:	9c 93       	st	X, r25
    28f2:	8e 93       	st	-X, r24
    28f4:	16 97       	sbiw	r26, 0x06	; 6
    28f6:	ce 01       	movw	r24, r28
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	1f 91       	pop	r17
    28fe:	0f 91       	pop	r16
    2900:	08 95       	ret

00002902 <__ultoa_invert>:
    2902:	fa 01       	movw	r30, r20
    2904:	aa 27       	eor	r26, r26
    2906:	28 30       	cpi	r18, 0x08	; 8
    2908:	51 f1       	breq	.+84     	; 0x295e <__ultoa_invert+0x5c>
    290a:	20 31       	cpi	r18, 0x10	; 16
    290c:	81 f1       	breq	.+96     	; 0x296e <__ultoa_invert+0x6c>
    290e:	e8 94       	clt
    2910:	6f 93       	push	r22
    2912:	6e 7f       	andi	r22, 0xFE	; 254
    2914:	6e 5f       	subi	r22, 0xFE	; 254
    2916:	7f 4f       	sbci	r23, 0xFF	; 255
    2918:	8f 4f       	sbci	r24, 0xFF	; 255
    291a:	9f 4f       	sbci	r25, 0xFF	; 255
    291c:	af 4f       	sbci	r26, 0xFF	; 255
    291e:	b1 e0       	ldi	r27, 0x01	; 1
    2920:	3e d0       	rcall	.+124    	; 0x299e <__ultoa_invert+0x9c>
    2922:	b4 e0       	ldi	r27, 0x04	; 4
    2924:	3c d0       	rcall	.+120    	; 0x299e <__ultoa_invert+0x9c>
    2926:	67 0f       	add	r22, r23
    2928:	78 1f       	adc	r23, r24
    292a:	89 1f       	adc	r24, r25
    292c:	9a 1f       	adc	r25, r26
    292e:	a1 1d       	adc	r26, r1
    2930:	68 0f       	add	r22, r24
    2932:	79 1f       	adc	r23, r25
    2934:	8a 1f       	adc	r24, r26
    2936:	91 1d       	adc	r25, r1
    2938:	a1 1d       	adc	r26, r1
    293a:	6a 0f       	add	r22, r26
    293c:	71 1d       	adc	r23, r1
    293e:	81 1d       	adc	r24, r1
    2940:	91 1d       	adc	r25, r1
    2942:	a1 1d       	adc	r26, r1
    2944:	20 d0       	rcall	.+64     	; 0x2986 <__ultoa_invert+0x84>
    2946:	09 f4       	brne	.+2      	; 0x294a <__ultoa_invert+0x48>
    2948:	68 94       	set
    294a:	3f 91       	pop	r19
    294c:	2a e0       	ldi	r18, 0x0A	; 10
    294e:	26 9f       	mul	r18, r22
    2950:	11 24       	eor	r1, r1
    2952:	30 19       	sub	r19, r0
    2954:	30 5d       	subi	r19, 0xD0	; 208
    2956:	31 93       	st	Z+, r19
    2958:	de f6       	brtc	.-74     	; 0x2910 <__ultoa_invert+0xe>
    295a:	cf 01       	movw	r24, r30
    295c:	08 95       	ret
    295e:	46 2f       	mov	r20, r22
    2960:	47 70       	andi	r20, 0x07	; 7
    2962:	40 5d       	subi	r20, 0xD0	; 208
    2964:	41 93       	st	Z+, r20
    2966:	b3 e0       	ldi	r27, 0x03	; 3
    2968:	0f d0       	rcall	.+30     	; 0x2988 <__ultoa_invert+0x86>
    296a:	c9 f7       	brne	.-14     	; 0x295e <__ultoa_invert+0x5c>
    296c:	f6 cf       	rjmp	.-20     	; 0x295a <__ultoa_invert+0x58>
    296e:	46 2f       	mov	r20, r22
    2970:	4f 70       	andi	r20, 0x0F	; 15
    2972:	40 5d       	subi	r20, 0xD0	; 208
    2974:	4a 33       	cpi	r20, 0x3A	; 58
    2976:	18 f0       	brcs	.+6      	; 0x297e <__ultoa_invert+0x7c>
    2978:	49 5d       	subi	r20, 0xD9	; 217
    297a:	31 fd       	sbrc	r19, 1
    297c:	40 52       	subi	r20, 0x20	; 32
    297e:	41 93       	st	Z+, r20
    2980:	02 d0       	rcall	.+4      	; 0x2986 <__ultoa_invert+0x84>
    2982:	a9 f7       	brne	.-22     	; 0x296e <__ultoa_invert+0x6c>
    2984:	ea cf       	rjmp	.-44     	; 0x295a <__ultoa_invert+0x58>
    2986:	b4 e0       	ldi	r27, 0x04	; 4
    2988:	a6 95       	lsr	r26
    298a:	97 95       	ror	r25
    298c:	87 95       	ror	r24
    298e:	77 95       	ror	r23
    2990:	67 95       	ror	r22
    2992:	ba 95       	dec	r27
    2994:	c9 f7       	brne	.-14     	; 0x2988 <__ultoa_invert+0x86>
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	61 05       	cpc	r22, r1
    299a:	71 05       	cpc	r23, r1
    299c:	08 95       	ret
    299e:	9b 01       	movw	r18, r22
    29a0:	ac 01       	movw	r20, r24
    29a2:	0a 2e       	mov	r0, r26
    29a4:	06 94       	lsr	r0
    29a6:	57 95       	ror	r21
    29a8:	47 95       	ror	r20
    29aa:	37 95       	ror	r19
    29ac:	27 95       	ror	r18
    29ae:	ba 95       	dec	r27
    29b0:	c9 f7       	brne	.-14     	; 0x29a4 <__ultoa_invert+0xa2>
    29b2:	62 0f       	add	r22, r18
    29b4:	73 1f       	adc	r23, r19
    29b6:	84 1f       	adc	r24, r20
    29b8:	95 1f       	adc	r25, r21
    29ba:	a0 1d       	adc	r26, r0
    29bc:	08 95       	ret

000029be <__prologue_saves__>:
    29be:	2f 92       	push	r2
    29c0:	3f 92       	push	r3
    29c2:	4f 92       	push	r4
    29c4:	5f 92       	push	r5
    29c6:	6f 92       	push	r6
    29c8:	7f 92       	push	r7
    29ca:	8f 92       	push	r8
    29cc:	9f 92       	push	r9
    29ce:	af 92       	push	r10
    29d0:	bf 92       	push	r11
    29d2:	cf 92       	push	r12
    29d4:	df 92       	push	r13
    29d6:	ef 92       	push	r14
    29d8:	ff 92       	push	r15
    29da:	0f 93       	push	r16
    29dc:	1f 93       	push	r17
    29de:	cf 93       	push	r28
    29e0:	df 93       	push	r29
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	ca 1b       	sub	r28, r26
    29e8:	db 0b       	sbc	r29, r27
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	09 94       	ijmp

000029f6 <__epilogue_restores__>:
    29f6:	2a 88       	ldd	r2, Y+18	; 0x12
    29f8:	39 88       	ldd	r3, Y+17	; 0x11
    29fa:	48 88       	ldd	r4, Y+16	; 0x10
    29fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    29fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a00:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a02:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a04:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a06:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a08:	b9 84       	ldd	r11, Y+9	; 0x09
    2a0a:	c8 84       	ldd	r12, Y+8	; 0x08
    2a0c:	df 80       	ldd	r13, Y+7	; 0x07
    2a0e:	ee 80       	ldd	r14, Y+6	; 0x06
    2a10:	fd 80       	ldd	r15, Y+5	; 0x05
    2a12:	0c 81       	ldd	r16, Y+4	; 0x04
    2a14:	1b 81       	ldd	r17, Y+3	; 0x03
    2a16:	aa 81       	ldd	r26, Y+2	; 0x02
    2a18:	b9 81       	ldd	r27, Y+1	; 0x01
    2a1a:	ce 0f       	add	r28, r30
    2a1c:	d1 1d       	adc	r29, r1
    2a1e:	0f b6       	in	r0, 0x3f	; 63
    2a20:	f8 94       	cli
    2a22:	de bf       	out	0x3e, r29	; 62
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	ed 01       	movw	r28, r26
    2a2a:	08 95       	ret

00002a2c <_exit>:
    2a2c:	f8 94       	cli

00002a2e <__stop_program>:
    2a2e:	ff cf       	rjmp	.-2      	; 0x2a2e <__stop_program>
