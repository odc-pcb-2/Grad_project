
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000782  00800060  00002dd0  00002e64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008007e2  008007e2  000035e6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000035e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  00003680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006edd  00000000  00000000  00003ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001889  00000000  00000000  0000a98d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003293  00000000  00000000  0000c216  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000888  00000000  00000000  0000f4ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d6d  00000000  00000000  0000fd34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b02  00000000  00000000  00010aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  000135a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	a1 00       	.word	0x00a1	; ????
      56:	a9 00       	.word	0x00a9	; ????
      58:	b0 00       	.word	0x00b0	; ????
      5a:	b7 00       	.word	0x00b7	; ????
      5c:	c0 00       	.word	0x00c0	; ????
      5e:	c7 00       	.word	0x00c7	; ????
      60:	d0 00       	.word	0x00d0	; ????
      62:	d9 00       	.word	0x00d9	; ????
      64:	3f 02       	muls	r19, r31
      66:	ca 02       	muls	r28, r26
      68:	77 02       	muls	r23, r23
      6a:	93 02       	muls	r25, r19
      6c:	5b 02       	muls	r21, r27
      6e:	af 02       	muls	r26, r31
      70:	ca 02       	muls	r28, r26
      72:	ca 02       	muls	r28, r26
      74:	ca 02       	muls	r28, r26
      76:	ca 02       	muls	r28, r26
      78:	ca 02       	muls	r28, r26
      7a:	ca 02       	muls	r28, r26
      7c:	ca 02       	muls	r28, r26
      7e:	ca 02       	muls	r28, r26
      80:	ca 02       	muls	r28, r26
      82:	ca 02       	muls	r28, r26
      84:	ca 02       	muls	r28, r26
      86:	ca 02       	muls	r28, r26
      88:	ca 02       	muls	r28, r26
      8a:	ca 02       	muls	r28, r26
      8c:	ca 02       	muls	r28, r26
      8e:	ca 02       	muls	r28, r26
      90:	ca 02       	muls	r28, r26
      92:	ca 02       	muls	r28, r26
      94:	23 02       	muls	r18, r19
      96:	ca 02       	muls	r28, r26
      98:	ca 02       	muls	r28, r26
      9a:	ca 02       	muls	r28, r26
      9c:	ca 02       	muls	r28, r26
      9e:	ca 02       	muls	r28, r26
      a0:	ca 02       	muls	r28, r26
      a2:	ca 02       	muls	r28, r26
      a4:	4d 02       	muls	r20, r29
      a6:	ca 02       	muls	r28, r26
      a8:	85 02       	muls	r24, r21
      aa:	a1 02       	muls	r26, r17
      ac:	69 02       	muls	r22, r25
      ae:	bd 02       	muls	r27, r29
      b0:	ca 02       	muls	r28, r26
      b2:	ca 02       	muls	r28, r26
      b4:	ca 02       	muls	r28, r26
      b6:	ca 02       	muls	r28, r26
      b8:	ca 02       	muls	r28, r26
      ba:	ca 02       	muls	r28, r26
      bc:	ca 02       	muls	r28, r26
      be:	ca 02       	muls	r28, r26
      c0:	ca 02       	muls	r28, r26
      c2:	ca 02       	muls	r28, r26
      c4:	ca 02       	muls	r28, r26
      c6:	ca 02       	muls	r28, r26
      c8:	ca 02       	muls	r28, r26
      ca:	ca 02       	muls	r28, r26
      cc:	ca 02       	muls	r28, r26
      ce:	ca 02       	muls	r28, r26
      d0:	ca 02       	muls	r28, r26
      d2:	ca 02       	muls	r28, r26
      d4:	31 02       	muls	r19, r17
      d6:	f0 0e       	add	r15, r16
      d8:	e7 0e       	add	r14, r23
      da:	58 0f       	add	r21, r24
      dc:	5f 0f       	add	r21, r31
      de:	66 0f       	add	r22, r22
      e0:	6d 0f       	add	r22, r29
      e2:	74 0f       	add	r23, r20
      e4:	7b 0f       	add	r23, r27

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf e5       	ldi	r28, 0x5F	; 95
      ec:	d8 e0       	ldi	r29, 0x08	; 8
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	17 e0       	ldi	r17, 0x07	; 7
      f4:	a0 e6       	ldi	r26, 0x60	; 96
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e0 ed       	ldi	r30, 0xD0	; 208
      fa:	fd e2       	ldi	r31, 0x2D	; 45
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
      fe:	05 90       	lpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	a2 3e       	cpi	r26, 0xE2	; 226
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
     108:	28 e0       	ldi	r18, 0x08	; 8
     10a:	a2 ee       	ldi	r26, 0xE2	; 226
     10c:	b7 e0       	ldi	r27, 0x07	; 7
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a3 30       	cpi	r26, 0x03	; 3
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <main>
     11c:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <ADC_vidInit>:
#include "ADC_config.h"
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void ADC_vidInit(_enuADCChannels enuADCChannel)
{
     124:	e8 2f       	mov	r30, r24
    ADMUX &= 0xE0;
     126:	87 b1       	in	r24, 0x07	; 7
     128:	80 7e       	andi	r24, 0xE0	; 224
     12a:	87 b9       	out	0x07, r24	; 7
    switch (enuADCChannel)
     12c:	8e 2f       	mov	r24, r30
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	88 30       	cpi	r24, 0x08	; 8
     132:	91 05       	cpc	r25, r1
     134:	08 f0       	brcs	.+2      	; 0x138 <ADC_vidInit+0x14>
     136:	45 c0       	rjmp	.+138    	; 0x1c2 <ADC_vidInit+0x9e>
     138:	fc 01       	movw	r30, r24
     13a:	e6 5d       	subi	r30, 0xD6	; 214
     13c:	ff 4f       	sbci	r31, 0xFF	; 255
     13e:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__tablejump2__>
    {
    case ADC_CH0:
        DIO_vidSetPinMode(GPIOA, PIN0, INPUT);
     142:	40 e0       	ldi	r20, 0x00	; 0
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
        ADMUX |= ADC_CH0;
     14c:	87 b1       	in	r24, 0x07	; 7
     14e:	87 b9       	out	0x07, r24	; 7
        break;
     150:	38 c0       	rjmp	.+112    	; 0x1c2 <ADC_vidInit+0x9e>
    case ADC_CH1:
        DIO_vidSetPinMode(GPIOA, PIN1, INPUT);
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
        ADMUX |= ADC_CH1;
     15c:	38 9a       	sbi	0x07, 0	; 7
        break;
     15e:	31 c0       	rjmp	.+98     	; 0x1c2 <ADC_vidInit+0x9e>
    case ADC_CH2:
        DIO_vidSetPinMode(GPIOA, PIN2, INPUT);
     160:	40 e0       	ldi	r20, 0x00	; 0
     162:	62 e0       	ldi	r22, 0x02	; 2
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
        ADMUX |= ADC_CH2;
     16a:	39 9a       	sbi	0x07, 1	; 7
        break;
     16c:	2a c0       	rjmp	.+84     	; 0x1c2 <ADC_vidInit+0x9e>
    case ADC_CH3:
        DIO_vidSetPinMode(GPIOA, PIN3, INPUT);
     16e:	40 e0       	ldi	r20, 0x00	; 0
     170:	63 e0       	ldi	r22, 0x03	; 3
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
        ADMUX |= ADC_CH3;
     178:	87 b1       	in	r24, 0x07	; 7
     17a:	83 60       	ori	r24, 0x03	; 3
     17c:	87 b9       	out	0x07, r24	; 7
        break;
     17e:	21 c0       	rjmp	.+66     	; 0x1c2 <ADC_vidInit+0x9e>
    case ADC_CH4:
        DIO_vidSetPinMode(GPIOA, PIN4, INPUT);
     180:	40 e0       	ldi	r20, 0x00	; 0
     182:	64 e0       	ldi	r22, 0x04	; 4
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
        ADMUX |= ADC_CH4;
     18a:	3a 9a       	sbi	0x07, 2	; 7
        break;
     18c:	1a c0       	rjmp	.+52     	; 0x1c2 <ADC_vidInit+0x9e>
    case ADC_CH5:
        DIO_vidSetPinMode(GPIOA, PIN5, INPUT);
     18e:	40 e0       	ldi	r20, 0x00	; 0
     190:	65 e0       	ldi	r22, 0x05	; 5
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
        ADMUX |= ADC_CH5;
     198:	87 b1       	in	r24, 0x07	; 7
     19a:	85 60       	ori	r24, 0x05	; 5
     19c:	87 b9       	out	0x07, r24	; 7
        break;
     19e:	11 c0       	rjmp	.+34     	; 0x1c2 <ADC_vidInit+0x9e>
    case ADC_CH6:
        DIO_vidSetPinMode(GPIOA, PIN6, INPUT);
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	66 e0       	ldi	r22, 0x06	; 6
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
        ADMUX |= ADC_CH6;
     1aa:	87 b1       	in	r24, 0x07	; 7
     1ac:	86 60       	ori	r24, 0x06	; 6
     1ae:	87 b9       	out	0x07, r24	; 7
        break;
     1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <ADC_vidInit+0x9e>
    case ADC_CH7:
        DIO_vidSetPinMode(GPIOA, PIN7, INPUT);
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	67 e0       	ldi	r22, 0x07	; 7
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
        ADMUX |= ADC_CH7;
     1bc:	87 b1       	in	r24, 0x07	; 7
     1be:	87 60       	ori	r24, 0x07	; 7
     1c0:	87 b9       	out	0x07, r24	; 7
        break;
    default:
        break;
    }
    ADCSRA &= 0xF8;
     1c2:	86 b1       	in	r24, 0x06	; 6
     1c4:	88 7f       	andi	r24, 0xF8	; 248
     1c6:	86 b9       	out	0x06, r24	; 6
    ADCSRA |= ADC_PSC;
     1c8:	86 b1       	in	r24, 0x06	; 6
     1ca:	83 60       	ori	r24, 0x03	; 3
     1cc:	86 b9       	out	0x06, r24	; 6
    #elif   ADC_PSC == 3
    #elif   ADC_PSC == 4
    #elif   ADC_PSC == 5
    #else
    #endif*/
    ADMUX  &= 0xF8;
     1ce:	87 b1       	in	r24, 0x07	; 7
     1d0:	88 7f       	andi	r24, 0xF8	; 248
     1d2:	87 b9       	out	0x07, r24	; 7
    ADMUX  |= (ADC_VREF << 6);
     1d4:	87 b1       	in	r24, 0x07	; 7
     1d6:	80 6c       	ori	r24, 0xC0	; 192
     1d8:	87 b9       	out	0x07, r24	; 7

    #if ADC_STORE == 0
        CLR_BIT(ADMUX, ADLAR);
     1da:	3d 98       	cbi	0x07, 5	; 7
    #else
        SET_BIT(ADMUX, ADLAR);
    #endif

    SET_BIT(ADCSRA, ADATE);
     1dc:	35 9a       	sbi	0x06, 5	; 6
    SET_BIT(ADCSRA, ADEN);
     1de:	37 9a       	sbi	0x06, 7	; 6
     1e0:	08 95       	ret

000001e2 <ADC_u16Read>:
		/*                                                                      */
		/************************************************************************/
u16 ADC_u16Read(void)
{
    u16 u16ReturnedValue;
    SET_BIT(ADCSRA, ADSC);
     1e2:	36 9a       	sbi	0x06, 6	; 6
    while(GET_BIT(ADCSRA, ADIF) == 0);
     1e4:	34 9b       	sbis	0x06, 4	; 6
     1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <ADC_u16Read+0x2>
    SET_BIT(ADCSRA, ADIF);
     1e8:	34 9a       	sbi	0x06, 4	; 6
    u16ReturnedValue  = (u16)ADCL;
     1ea:	84 b1       	in	r24, 0x04	; 4
    u16ReturnedValue |= (u16)(ADCH<<8);
     1ec:	25 b1       	in	r18, 0x05	; 5
    return u16ReturnedValue;
     1ee:	90 e0       	ldi	r25, 0x00	; 0
}
     1f0:	92 2b       	or	r25, r18
     1f2:	08 95       	ret

000001f4 <Home_control_Menue>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function display admin control menu		*/
		/************************************************************************/
void Home_control_Menue()
{
	LCD_vidClearScreen();						// clear LCD screen
     1f4:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
	LCD_vidDisplayString("1.Open door");		// display message on LCD
     1f8:	80 e7       	ldi	r24, 0x70	; 112
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);						// move LCD cursor to line 2
     200:	61 e0       	ldi	r22, 0x01	; 1
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("2.Room Lighting");	// display message on LCD
     20c:	8c e7       	ldi	r24, 0x7C	; 124
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);						// move LCD cursor to line 3
     214:	61 e0       	ldi	r22, 0x01	; 1
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	83 e0       	ldi	r24, 0x03	; 3
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("3.Air condition");	// display message on LCD
     220:	8c e8       	ldi	r24, 0x8C	; 140
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);						// move LCD cursor to line 4
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	84 e0       	ldi	r24, 0x04	; 4
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("4.Return");			// display message on LCD
     234:	8c e9       	ldi	r24, 0x9C	; 156
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidDisplayString(" >> ");				// display message on LCD
     23c:	86 e0       	ldi	r24, 0x06	; 6
     23e:	97 e0       	ldi	r25, 0x07	; 7
     240:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	u8choice = u8GetKeyPressed();				// take choice and store it u8choice variable
     244:	0e 94 52 06 	call	0xca4	; 0xca4 <u8GetKeyPressed>
     248:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <u8choice>
	switch(u8choice)							// switch for u8choice variable
     24c:	82 33       	cpi	r24, 0x32	; 50
     24e:	61 f0       	breq	.+24     	; 0x268 <Home_control_Menue+0x74>
     250:	18 f4       	brcc	.+6      	; 0x258 <Home_control_Menue+0x64>
     252:	81 33       	cpi	r24, 0x31	; 49
     254:	31 f0       	breq	.+12     	; 0x262 <Home_control_Menue+0x6e>
     256:	11 c0       	rjmp	.+34     	; 0x27a <Home_control_Menue+0x86>
     258:	83 33       	cpi	r24, 0x33	; 51
     25a:	49 f0       	breq	.+18     	; 0x26e <Home_control_Menue+0x7a>
     25c:	84 33       	cpi	r24, 0x34	; 52
     25e:	51 f0       	breq	.+20     	; 0x274 <Home_control_Menue+0x80>
     260:	0c c0       	rjmp	.+24     	; 0x27a <Home_control_Menue+0x86>
	{
		case '1':								// if input is equal '1'
			Open_Door();						// call function that open the door
     262:	0e 94 76 11 	call	0x22ec	; 0x22ec <Open_Door>
		break;									// break case
     266:	08 95       	ret
		case '2' :								// if input is equal '2'
			Print();							// call function that control rooms	
     268:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <Print>
		break;									// break case
     26c:	08 95       	ret
		case '3':								// if input is equal '3'
			Air_condition();					// call function that control air condition
     26e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Air_condition>
		break;									// break case
     272:	08 95       	ret
		case '4':								// if input is equal '4'
			admin_menue();						// call function that return to home menu
     274:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <admin_menue>
		break;									// break case
     278:	08 95       	ret
		default:								// default case if not one of previous cases
			LCD_vidClearScreen();				// clear LCD screen
     27a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
			LCD_vidDisplayString("Wrong Choice");// display message on LCD
     27e:	85 ea       	ldi	r24, 0xA5	; 165
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     286:	2f ef       	ldi	r18, 0xFF	; 255
     288:	81 ee       	ldi	r24, 0xE1	; 225
     28a:	94 e0       	ldi	r25, 0x04	; 4
     28c:	21 50       	subi	r18, 0x01	; 1
     28e:	80 40       	sbci	r24, 0x00	; 0
     290:	90 40       	sbci	r25, 0x00	; 0
     292:	e1 f7       	brne	.-8      	; 0x28c <Home_control_Menue+0x98>
     294:	00 c0       	rjmp	.+0      	; 0x296 <Home_control_Menue+0xa2>
     296:	00 00       	nop
			_delay_ms(200);
			Home_control_Menue();				// call the same function to reenter choice
     298:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Home_control_Menue>
     29c:	08 95       	ret

0000029e <back>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function that return user to previous menu */
		/************************************************************************/
 void back()
{
	  if(u8ReturnedValue=='0')				// if user choice equal to 0
     29e:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     2a2:	80 33       	cpi	r24, 0x30	; 48
     2a4:	61 f4       	brne	.+24     	; 0x2be <back+0x20>
	  {
		  u8 login = Isadmin();
     2a6:	0e 94 df 0c 	call	0x19be	; 0x19be <Isadmin>
		  if(login == 1)					// if returned value of Isadmin function equal to 1
     2aa:	81 30       	cpi	r24, 0x01	; 1
     2ac:	19 f4       	brne	.+6      	; 0x2b4 <back+0x16>
		  {
			  Home_control_Menue();			// call function that return to admin home control
     2ae:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Home_control_Menue>
     2b2:	08 95       	ret
		  }
		  else if(login == 0) 				// if not 
     2b4:	81 11       	cpse	r24, r1
     2b6:	14 c0       	rjmp	.+40     	; 0x2e0 <back+0x42>
		  {
			  User_menue();					// call function that return to user home control
     2b8:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <User_menue>
     2bc:	08 95       	ret
		  }
	  }
	  else								    // if not 
	  {
		 LCD_vidClearScreen();				// clear LCD screen
     2be:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		 LCD_vidDisplayString("Wrong Choice");// display message on LCD screen
     2c2:	85 ea       	ldi	r24, 0xA5	; 165
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
     2ca:	2f e7       	ldi	r18, 0x7F	; 127
     2cc:	89 ea       	ldi	r24, 0xA9	; 169
     2ce:	93 e0       	ldi	r25, 0x03	; 3
     2d0:	21 50       	subi	r18, 0x01	; 1
     2d2:	80 40       	sbci	r24, 0x00	; 0
     2d4:	90 40       	sbci	r25, 0x00	; 0
     2d6:	e1 f7       	brne	.-8      	; 0x2d0 <back+0x32>
     2d8:	00 c0       	rjmp	.+0      	; 0x2da <back+0x3c>
     2da:	00 00       	nop
		 _delay_ms(150);					// wait for 150 m second
		 Air_condition();					// call function to reenter valid choice
     2dc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Air_condition>
     2e0:	08 95       	ret

000002e2 <Air_condition>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function that control air condition		*/
		/************************************************************************/
void Air_condition()
{
	DC_Motor_vidInit();												// initialize the DC Motor
     2e2:	0e 94 46 07 	call	0xe8c	; 0xe8c <DC_Motor_vidInit>
	u8 temp,pre=1;													// declaration for two variable and initialize them with 1
	LCD_vidInit();													// initialize the LCD 	
     2e6:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <LCD_vidInit>
	LM35_vidInit(ADC_CH0);											// initialize the temperature sensor with channel 0 	
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	0e 94 98 0a 	call	0x1530	; 0x1530 <LM35_vidInit>
	LCD_vidClearScreen();											// clear LCD screen 			
     2f0:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		/*Function Description: void function that control air condition		*/
		/************************************************************************/
void Air_condition()
{
	DC_Motor_vidInit();												// initialize the DC Motor
	u8 temp,pre=1;													// declaration for two variable and initialize them with 1
     2f4:	d1 e0       	ldi	r29, 0x01	; 1
     2f6:	03 c0       	rjmp	.+6      	; 0x2fe <Air_condition+0x1c>
     2f8:	dc 2f       	mov	r29, r28
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <Air_condition+0x1c>
			{
				LCD_vidMoveCursor(1,1);								// move LCD cursor to line one
				LCD_vidDisplayString("Temperature =");				// display message on LCD
				LCD_vidDisplayNumber(temp);							// display temperature on LCD
				LCD_vidDisplayString("C");							// display message on LCD
				pre = temp;											// set previous value with recent read value
     2fc:	dc 2f       	mov	r29, r28
	LCD_vidInit();													// initialize the LCD 	
	LM35_vidInit(ADC_CH0);											// initialize the temperature sensor with channel 0 	
	LCD_vidClearScreen();											// clear LCD screen 			
	while (1)														// infinite while loop
	{
		u8ReturnedValue = KPD_u8GetPressedKey(GPIOC, HIGH_NIBBLE);	// take choice from user
     2fe:	61 e0       	ldi	r22, 0x01	; 1
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	0e 94 2e 09 	call	0x125c	; 0x125c <KPD_u8GetPressedKey>
     306:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
		if(u8ReturnedValue==NOT_PRESSED)							// if user still not enter any thing
     30a:	8f 3f       	cpi	r24, 0xFF	; 255
     30c:	09 f0       	breq	.+2      	; 0x310 <Air_condition+0x2e>
     30e:	60 c0       	rjmp	.+192    	; 0x3d0 <Air_condition+0xee>
		{
			temp = LM35_u8Read();									// read temperature from sensor 			
     310:	0e 94 9b 0a 	call	0x1536	; 0x1536 <LM35_u8Read>
     314:	c8 2f       	mov	r28, r24
			if(temp != pre)											// if temperature is not change (equal to previous one)
     316:	d8 17       	cp	r29, r24
     318:	79 f3       	breq	.-34     	; 0x2f8 <Air_condition+0x16>
			{
				LCD_vidMoveCursor(1,1);								// move LCD cursor to line one
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
				LCD_vidDisplayString("Temperature =");				// display message on LCD
     322:	82 eb       	ldi	r24, 0xB2	; 178
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
				LCD_vidDisplayNumber(temp);							// display temperature on LCD
     32a:	6c 2f       	mov	r22, r28
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 40 0a 	call	0x1480	; 0x1480 <LCD_vidDisplayNumber>
				LCD_vidDisplayString("C");							// display message on LCD
     336:	80 ec       	ldi	r24, 0xC0	; 192
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
				pre = temp;											// set previous value with recent read value
				if(temp >= 28)										// if temperature is grater than or equal to 28
     33e:	cc 31       	cpi	r28, 0x1C	; 28
     340:	10 f1       	brcs	.+68     	; 0x386 <Air_condition+0xa4>
				{
					LED_vidTurnOn(GPIOD,PIN2);						// turn on air condition LED
     342:	62 e0       	ldi	r22, 0x02	; 2
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	83 e0       	ldi	r24, 0x03	; 3
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 90 0a 	call	0x1520	; 0x1520 <LED_vidTurnOn>
					LCD_vidMoveCursor(2,1);							// move cursor to second line
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	82 e0       	ldi	r24, 0x02	; 2
     352:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
					LCD_vidDisplayString("FAN ON ");				// display message on LCD
     356:	82 ec       	ldi	r24, 0xC2	; 194
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
					DC_Motor_vidTurnOn();							// turn on the DC Motor (air condition)
     35e:	0e 94 51 07 	call	0xea2	; 0xea2 <DC_Motor_vidTurnOn>
					LCD_vidMoveCursor(3,1);							// move cursor to third line
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
					LCD_vidDisplayString("Press 0 to Back");		// display message on LCD
     36a:	8a ec       	ldi	r24, 0xCA	; 202
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
					LCD_vidMoveCursor(4,1);							// move cursor to fourth line
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	84 e0       	ldi	r24, 0x04	; 4
     376:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
					LCD_vidDisplayString(">> ");					// display message on LCD
     37a:	87 e0       	ldi	r24, 0x07	; 7
     37c:	97 e0       	ldi	r25, 0x07	; 7
     37e:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			{
				LCD_vidMoveCursor(1,1);								// move LCD cursor to line one
				LCD_vidDisplayString("Temperature =");				// display message on LCD
				LCD_vidDisplayNumber(temp);							// display temperature on LCD
				LCD_vidDisplayString("C");							// display message on LCD
				pre = temp;											// set previous value with recent read value
     382:	dc 2f       	mov	r29, r28
     384:	bc cf       	rjmp	.-136    	; 0x2fe <Air_condition+0x1c>
					LCD_vidMoveCursor(3,1);							// move cursor to third line
					LCD_vidDisplayString("Press 0 to Back");		// display message on LCD
					LCD_vidMoveCursor(4,1);							// move cursor to fourth line
					LCD_vidDisplayString(">> ");					// display message on LCD
				}
				else if(temp <= 21 )								// if temperature is less than or equal to 21
     386:	c6 31       	cpi	r28, 0x16	; 22
     388:	08 f0       	brcs	.+2      	; 0x38c <Air_condition+0xaa>
     38a:	b8 cf       	rjmp	.-144    	; 0x2fc <Air_condition+0x1a>
				{
					LED_vidTurnOff(GPIOD,PIN2);						// turn off air condition LED
     38c:	62 e0       	ldi	r22, 0x02	; 2
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	83 e0       	ldi	r24, 0x03	; 3
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
					LCD_vidMoveCursor(2,1);							// move cursor to second line
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	82 e0       	ldi	r24, 0x02	; 2
     39c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
					LCD_vidDisplayString("FAN OFF ");				// display message on LCD
     3a0:	8a ed       	ldi	r24, 0xDA	; 218
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
					DC_Motor_vidTurnOff();							// turn off the DC Motor (air condition)
     3a8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DC_Motor_vidTurnOff>
					LCD_vidMoveCursor(3,1);							// move cursor to third line
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	83 e0       	ldi	r24, 0x03	; 3
     3b0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
					LCD_vidDisplayString("Press 0 to Back");		// display message on LCD
     3b4:	8a ec       	ldi	r24, 0xCA	; 202
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
					LCD_vidMoveCursor(4,1);							// move cursor to fourth line
     3bc:	61 e0       	ldi	r22, 0x01	; 1
     3be:	84 e0       	ldi	r24, 0x04	; 4
     3c0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
					LCD_vidDisplayString(">> ");					// display message on LCD
     3c4:	87 e0       	ldi	r24, 0x07	; 7
     3c6:	97 e0       	ldi	r25, 0x07	; 7
     3c8:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			{
				LCD_vidMoveCursor(1,1);								// move LCD cursor to line one
				LCD_vidDisplayString("Temperature =");				// display message on LCD
				LCD_vidDisplayNumber(temp);							// display temperature on LCD
				LCD_vidDisplayString("C");							// display message on LCD
				pre = temp;											// set previous value with recent read value
     3cc:	dc 2f       	mov	r29, r28
     3ce:	97 cf       	rjmp	.-210    	; 0x2fe <Air_condition+0x1c>
				}
			}
		}
		else														// if not 
		{
			back();													// back to previous menu
     3d0:	0e 94 4f 01 	call	0x29e	; 0x29e <back>
     3d4:	94 cf       	rjmp	.-216    	; 0x2fe <Air_condition+0x1c>

000003d6 <u8RecieveByte>:
		/*Function Description: function from type u8 take void and return u8
								receive byte from user							*/
		/************************************************************************/
u8 u8RecieveByte()
{
	u8ReturnedValue = USART_u8RecieveByte();			// receive data
     3d6:	0e 94 26 12 	call	0x244c	; 0x244c <USART_u8RecieveByte>
     3da:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     3de:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
	u8ReturnedValue = USART_u8RecieveByte();			// receive data
     3e2:	0e 94 26 12 	call	0x244c	; 0x244c <USART_u8RecieveByte>
     3e6:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     3ea:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
	u8ReturnedValue = USART_u8RecieveByte();			// receive data
     3ee:	0e 94 26 12 	call	0x244c	; 0x244c <USART_u8RecieveByte>
     3f2:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     3f6:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
	return u8ReturnedValue;
}
     3fa:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     3fe:	08 95       	ret

00000400 <Isadmin_Remoted>:
		/*Function Input: no input (void)										*/
		/*Function Description: function from type u8 take void and return u8
								check who login user or admin & return only 0 or 1 (remoted)*/
		/************************************************************************/
u8 Isadmin_Remoted()
{	
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 91 e6 07 	lds	r25, 0x07E6	; 0x8007e6 <LogInFlag>
     406:	91 30       	cpi	r25, 0x01	; 1
     408:	09 f0       	breq	.+2      	; 0x40c <Isadmin_Remoted+0xc>
     40a:	80 e0       	ldi	r24, 0x00	; 0
	}
	else												// if not
	{
		return 0;										// return 0
	}
}
     40c:	08 95       	ret

0000040e <control_Remoted_Rooms>:
		/*Function Description: void function take void and return void
								control rooms lightning (remoted)				*/
		/************************************************************************/
void control_Remoted_Rooms()
{
	USART_vidSendString("R1: Z & z   R2: B & b   R3: F & f   R4: D & d   R5: E & e R6: G & g   0.To Return");// send message to serial terminal
     40e:	83 ee       	ldi	r24, 0xE3	; 227
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     416:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	while(u8ReturnedValue!='0')							// while loop work if choice not equal 0
     41a:	bc c0       	rjmp	.+376    	; 0x594 <control_Remoted_Rooms+0x186>
	{
		u8ReturnedValue = USART_u8RecieveByte();		// receive data
     41c:	0e 94 26 12 	call	0x244c	; 0x244c <USART_u8RecieveByte>
     420:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
		USART_vidEnableRXInterrupt();					// enable RX interrupt (finish receiving)
     424:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
		switch(u8ReturnedValue)							// switch choice
     428:	e0 91 e5 07 	lds	r30, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     42c:	8e 2f       	mov	r24, r30
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	fc 01       	movw	r30, r24
     432:	e2 54       	subi	r30, 0x42	; 66
     434:	f1 09       	sbc	r31, r1
     436:	e9 33       	cpi	r30, 0x39	; 57
     438:	f1 05       	cpc	r31, r1
     43a:	08 f0       	brcs	.+2      	; 0x43e <control_Remoted_Rooms+0x30>
     43c:	ab c0       	rjmp	.+342    	; 0x594 <control_Remoted_Rooms+0x186>
     43e:	ee 5c       	subi	r30, 0xCE	; 206
     440:	ff 4f       	sbci	r31, 0xFF	; 255
     442:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__tablejump2__>
		{
			case 'Z' :									// if choice equal to Z
			LCD_vidMoveCursor(1,1);
     446:	61 e0       	ldi	r22, 0x01	; 1
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString("R1: ON ");			// display string on LCD
     44e:	85 e3       	ldi	r24, 0x35	; 53
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			USART_vidSendByte('Z');						// send message to serial terminal
     456:	8a e5       	ldi	r24, 0x5A	; 90
     458:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     45c:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			break;										// break
     460:	99 c0       	rjmp	.+306    	; 0x594 <control_Remoted_Rooms+0x186>
			case 'z' :									// if choice equal to z
			LCD_vidMoveCursor(1,1);
     462:	61 e0       	ldi	r22, 0x01	; 1
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString("R1: OFF");			// display string on LCD
     46a:	8d e3       	ldi	r24, 0x3D	; 61
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			USART_vidSendByte('z');						// send message to serial terminal
     472:	8a e7       	ldi	r24, 0x7A	; 122
     474:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     478:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			break;										// break
     47c:	8b c0       	rjmp	.+278    	; 0x594 <control_Remoted_Rooms+0x186>
			case 'B' :									// if choice equal to B
			USART_vidSendByte('B');						// send message to serial terminal
     47e:	82 e4       	ldi	r24, 0x42	; 66
     480:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     484:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			LCD_vidMoveCursor(1,8);
     488:	68 e0       	ldi	r22, 0x08	; 8
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString(" R2: ON ");			// display string on LCD
     490:	85 e4       	ldi	r24, 0x45	; 69
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			break;										// break
     498:	7d c0       	rjmp	.+250    	; 0x594 <control_Remoted_Rooms+0x186>
			case 'b' :									// if choice equal to b
			USART_vidSendByte('b');						// send message to serial terminal
     49a:	82 e6       	ldi	r24, 0x62	; 98
     49c:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     4a0:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			LCD_vidMoveCursor(1,8);
     4a4:	68 e0       	ldi	r22, 0x08	; 8
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString(" R2: OFF");			// display string on LCD
     4ac:	8e e4       	ldi	r24, 0x4E	; 78
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			break;										// break 
     4b4:	6f c0       	rjmp	.+222    	; 0x594 <control_Remoted_Rooms+0x186>
			case 'F' :									// if choice equal to F
			USART_vidSendByte('F');						// send message to serial terminal
     4b6:	86 e4       	ldi	r24, 0x46	; 70
     4b8:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     4bc:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			LCD_vidMoveCursor(2,1);
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString("R3: ON ");			// display string on LCD
     4c8:	87 e5       	ldi	r24, 0x57	; 87
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			break;										// break
     4d0:	61 c0       	rjmp	.+194    	; 0x594 <control_Remoted_Rooms+0x186>
			case 'f' :									// if choice equal to f
			USART_vidSendByte('f');						// send message to serial terminal
     4d2:	86 e6       	ldi	r24, 0x66	; 102
     4d4:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     4d8:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			LCD_vidMoveCursor(2,1);
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString("R3: OFF");			// display string on LCD
     4e4:	8f e5       	ldi	r24, 0x5F	; 95
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			break;										// break
     4ec:	53 c0       	rjmp	.+166    	; 0x594 <control_Remoted_Rooms+0x186>
			case 'D' :									// if choice equal to D
			USART_vidSendByte('D');						// send message to serial terminal
     4ee:	84 e4       	ldi	r24, 0x44	; 68
     4f0:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     4f4:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			LCD_vidMoveCursor(2,8);
     4f8:	68 e0       	ldi	r22, 0x08	; 8
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString(" R4: ON ");			// display string on LCD		
     500:	87 e6       	ldi	r24, 0x67	; 103
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			break;										// break
     508:	45 c0       	rjmp	.+138    	; 0x594 <control_Remoted_Rooms+0x186>
			case 'd' :									// if choice equal to d
			USART_vidSendByte('d');						// send message to serial terminal
     50a:	84 e6       	ldi	r24, 0x64	; 100
     50c:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     510:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			LCD_vidMoveCursor(2,8);
     514:	68 e0       	ldi	r22, 0x08	; 8
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString(" R4: OFF");			// display string on LCD
     51c:	80 e7       	ldi	r24, 0x70	; 112
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			break;										// break
     524:	37 c0       	rjmp	.+110    	; 0x594 <control_Remoted_Rooms+0x186>
			case 'E' :									// if choice equal to E
			USART_vidSendByte('E');						// send message to serial terminal
     526:	85 e4       	ldi	r24, 0x45	; 69
     528:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     52c:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			LCD_vidMoveCursor(3,1);
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	83 e0       	ldi	r24, 0x03	; 3
     534:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString("R5: ON ");			// display string on LCD
     538:	89 e7       	ldi	r24, 0x79	; 121
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			break;										// break
     540:	29 c0       	rjmp	.+82     	; 0x594 <control_Remoted_Rooms+0x186>
			case 'e' :									// if choice equal to e
			USART_vidSendByte('e');						// send message to serial terminal
     542:	85 e6       	ldi	r24, 0x65	; 101
     544:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     548:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			LCD_vidMoveCursor(3,1);
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString("R5: OFF");			// display string on LCD
     554:	81 e8       	ldi	r24, 0x81	; 129
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			break;										// break
     55c:	1b c0       	rjmp	.+54     	; 0x594 <control_Remoted_Rooms+0x186>
			case 'G' :									// if choice equal to G
			USART_vidSendByte('G');						// send message to serial terminal
     55e:	87 e4       	ldi	r24, 0x47	; 71
     560:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     564:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			LCD_vidMoveCursor(3,8);
     568:	68 e0       	ldi	r22, 0x08	; 8
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString(" R6: ON ");			// display string on LCD
     570:	89 e8       	ldi	r24, 0x89	; 137
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			break;										// break
     578:	0d c0       	rjmp	.+26     	; 0x594 <control_Remoted_Rooms+0x186>
			case 'g' :									// if choice equal to g
			USART_vidSendByte('g');						// send message to serial terminal
     57a:	87 e6       	ldi	r24, 0x67	; 103
     57c:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     580:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			LCD_vidMoveCursor(3,8);
     584:	68 e0       	ldi	r22, 0x08	; 8
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString(" R6: OFF");			// display string on LCD
     58c:	82 e9       	ldi	r24, 0x92	; 146
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		/************************************************************************/
void control_Remoted_Rooms()
{
	USART_vidSendString("R1: Z & z   R2: B & b   R3: F & f   R4: D & d   R5: E & e R6: G & g   0.To Return");// send message to serial terminal
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
	while(u8ReturnedValue!='0')							// while loop work if choice not equal 0
     594:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     598:	80 33       	cpi	r24, 0x30	; 48
     59a:	09 f0       	breq	.+2      	; 0x59e <control_Remoted_Rooms+0x190>
     59c:	3f cf       	rjmp	.-386    	; 0x41c <control_Remoted_Rooms+0xe>
			LCD_vidMoveCursor(3,8);
			LCD_vidDisplayString(" R6: OFF");			// display string on LCD
			break;										// break
		}
	}
	if (Isadmin_Remoted()==1)							// if is admin equal to 1
     59e:	0e 94 00 02 	call	0x400	; 0x400 <Isadmin_Remoted>
     5a2:	81 30       	cpi	r24, 0x01	; 1
     5a4:	19 f4       	brne	.+6      	; 0x5ac <control_Remoted_Rooms+0x19e>
	{
		Admin_Remoted_Menue();							// call function that control admin login
     5a6:	0e 94 21 03 	call	0x642	; 0x642 <Admin_Remoted_Menue>
     5aa:	08 95       	ret
	}
	else if(Isadmin_Remoted()==0)						// if not
     5ac:	81 11       	cpse	r24, r1
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <control_Remoted_Rooms+0x1a6>
	{
		User_Remoted_Menue();							// call function that control user login
     5b0:	0e 94 57 04 	call	0x8ae	; 0x8ae <User_Remoted_Menue>
     5b4:	08 95       	ret

000005b6 <control_home_remoted>:
		/*Function Description: void function take void and return void
								admin control (remoted)							*/
		/************************************************************************/
void control_home_remoted()
{
	USART_vidSendString("1.Opening Door  ");			// send message to serial terminal
     5b6:	8b e9       	ldi	r24, 0x9B	; 155
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     5be:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	USART_vidSendString("2.Room Lighting  ");			// send message to serial terminal
     5c2:	8c ea       	ldi	r24, 0xAC	; 172
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     5ca:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	USART_vidSendString("3.Air condition  ");			// send message to serial terminal
     5ce:	8e eb       	ldi	r24, 0xBE	; 190
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     5d6:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	USART_vidSendString("4.Return        ");			// send message to serial terminal
     5da:	80 ed       	ldi	r24, 0xD0	; 208
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     5e2:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     5e6:	0e 94 26 12 	call	0x244c	; 0x244c <USART_u8RecieveByte>
     5ea:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     5ee:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     5f2:	0e 94 26 12 	call	0x244c	; 0x244c <USART_u8RecieveByte>
     5f6:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     5fa:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     5fe:	0e 94 26 12 	call	0x244c	; 0x244c <USART_u8RecieveByte>
     602:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     606:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
	switch(u8ReturnedValue)								// switch choice
     60a:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     60e:	82 33       	cpi	r24, 0x32	; 50
     610:	61 f0       	breq	.+24     	; 0x62a <control_home_remoted+0x74>
     612:	18 f4       	brcc	.+6      	; 0x61a <control_home_remoted+0x64>
     614:	81 33       	cpi	r24, 0x31	; 49
     616:	31 f0       	breq	.+12     	; 0x624 <control_home_remoted+0x6e>
     618:	11 c0       	rjmp	.+34     	; 0x63c <control_home_remoted+0x86>
     61a:	83 33       	cpi	r24, 0x33	; 51
     61c:	49 f0       	breq	.+18     	; 0x630 <control_home_remoted+0x7a>
     61e:	84 33       	cpi	r24, 0x34	; 52
     620:	51 f0       	breq	.+20     	; 0x636 <control_home_remoted+0x80>
     622:	0c c0       	rjmp	.+24     	; 0x63c <control_home_remoted+0x86>
	{
		case '1':										// if choice equal 1
		open_door();									// call function that control door 
     624:	0e 94 26 06 	call	0xc4c	; 0xc4c <open_door>
		break;											// break
     628:	08 95       	ret
		case '2':										// if choice equal 2
		control_Remoted_Rooms();						// call function that control rooms 
     62a:	0e 94 07 02 	call	0x40e	; 0x40e <control_Remoted_Rooms>
		break;											// break
     62e:	08 95       	ret
		case '3':										// if choice equal 1
		Air_Condition_Remoted();						// call function that control air condition
     630:	0e 94 63 05 	call	0xac6	; 0xac6 <Air_Condition_Remoted>
		break;											// break
     634:	08 95       	ret
		case '4':										// if choice equal 1
		Admin_Remoted_Menue();							// call function that display admin control menu
     636:	0e 94 21 03 	call	0x642	; 0x642 <Admin_Remoted_Menue>
		break;											// break
     63a:	08 95       	ret
		default:										// default
		control_home_remoted();							// call function that return admin menu
     63c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <control_home_remoted>
     640:	08 95       	ret

00000642 <Admin_Remoted_Menue>:
		/*Function Description: void function take void and return void
								display admin control menu (remoted)			*/
		/************************************************************************/
void Admin_Remoted_Menue()
{
	USART_vidSendString("1.Control Home       ");		// send message to serial terminal
     642:	81 ee       	ldi	r24, 0xE1	; 225
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     64a:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	USART_vidSendString("2.Add user           ");		// send message to serial terminal
     64e:	87 ef       	ldi	r24, 0xF7	; 247
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     656:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	USART_vidSendString("3.Log out            ");		// send message to serial terminal
     65a:	8d e0       	ldi	r24, 0x0D	; 13
     65c:	92 e0       	ldi	r25, 0x02	; 2
     65e:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     662:	0e 94 26 12 	call	0x244c	; 0x244c <USART_u8RecieveByte>
     666:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     66a:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     66e:	0e 94 26 12 	call	0x244c	; 0x244c <USART_u8RecieveByte>
     672:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)		
     676:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     67a:	0e 94 26 12 	call	0x244c	; 0x244c <USART_u8RecieveByte>
     67e:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     682:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
	switch(u8ReturnedValue)								// switch choice
     686:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     68a:	82 33       	cpi	r24, 0x32	; 50
     68c:	39 f0       	breq	.+14     	; 0x69c <Admin_Remoted_Menue+0x5a>
     68e:	83 33       	cpi	r24, 0x33	; 51
     690:	41 f0       	breq	.+16     	; 0x6a2 <Admin_Remoted_Menue+0x60>
     692:	81 33       	cpi	r24, 0x31	; 49
     694:	41 f4       	brne	.+16     	; 0x6a6 <Admin_Remoted_Menue+0x64>
	{
		case '1':										// if choice equal 1
		control_home_remoted();							// call function that control admin menu
     696:	0e 94 db 02 	call	0x5b6	; 0x5b6 <control_home_remoted>
		break;											// break
     69a:	08 95       	ret
		case '2':										// if choice equal 2
		Add_Remoted_User();								// call function that control user menu
     69c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Add_Remoted_User>
		break;											// break
     6a0:	08 95       	ret
		case '3':										// if choice equal 3
		LogOut_Remotly();								// call function that logout from system
     6a2:	0e 94 39 04 	call	0x872	; 0x872 <LogOut_Remotly>
     6a6:	08 95       	ret

000006a8 <check_admin_pass_remoted>:
		/*Function Description: void function take void and return void
								check username & pass for admin (remoted)		*/
		/************************************************************************/
void check_admin_pass_remoted()
{
	read_EEPROM(0x0);									// read EEPROM
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	0e 94 96 0c 	call	0x192c	; 0x192c <read_EEPROM>
     6ae:	e0 ef       	ldi	r30, 0xF0	; 240
     6b0:	f7 e0       	ldi	r31, 0x07	; 7
     6b2:	ac ee       	ldi	r26, 0xEC	; 236
     6b4:	b7 e0       	ldi	r27, 0x07	; 7
     6b6:	24 ef       	ldi	r18, 0xF4	; 244
     6b8:	37 e0       	ldi	r19, 0x07	; 7
     6ba:	60 e0       	ldi	r22, 0x00	; 0
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
	{
		if (user[i] == EEPROM_user[i])					// check if two value are equal or not
     6bc:	91 91       	ld	r25, Z+
     6be:	8d 91       	ld	r24, X+
     6c0:	98 13       	cpse	r25, r24
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <check_admin_pass_remoted+0x1e>
		{
			check_user++;								// if that increase the check variable by one
     6c4:	6f 5f       	subi	r22, 0xFF	; 255
		/************************************************************************/
void check_admin_pass_remoted()
{
	read_EEPROM(0x0);									// read EEPROM
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     6c6:	e2 17       	cp	r30, r18
     6c8:	f3 07       	cpc	r31, r19
     6ca:	c1 f7       	brne	.-16     	; 0x6bc <check_admin_pass_remoted+0x14>
     6cc:	60 93 e7 07 	sts	0x07E7, r22	; 0x8007e7 <check_user>
     6d0:	e8 ee       	ldi	r30, 0xE8	; 232
     6d2:	f7 e0       	ldi	r31, 0x07	; 7
     6d4:	a9 ef       	ldi	r26, 0xF9	; 249
     6d6:	b7 e0       	ldi	r27, 0x07	; 7
     6d8:	4c ee       	ldi	r20, 0xEC	; 236
     6da:	57 e0       	ldi	r21, 0x07	; 7
     6dc:	20 e0       	ldi	r18, 0x00	; 0
		}
	}
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
	{
		if (pass[i] == EEPROM_pass[i])					// check if two value are equal or not
     6de:	91 91       	ld	r25, Z+
     6e0:	8d 91       	ld	r24, X+
     6e2:	98 13       	cpse	r25, r24
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <check_admin_pass_remoted+0x40>
		{
			check++;									// if that increase the check variable by one
     6e6:	2f 5f       	subi	r18, 0xFF	; 255
		else											// if not
		{
		}
	}
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     6e8:	e4 17       	cp	r30, r20
     6ea:	f5 07       	cpc	r31, r21
     6ec:	c1 f7       	brne	.-16     	; 0x6de <check_admin_pass_remoted+0x36>
     6ee:	20 93 f8 07 	sts	0x07F8, r18	; 0x8007f8 <check>
		}
		else											// if not
		{
		}
	}
	if(check == 4 && check_user == 4)					// check if check variable equal 4 or not (correct pass)
     6f2:	24 30       	cpi	r18, 0x04	; 4
     6f4:	c9 f4       	brne	.+50     	; 0x728 <check_admin_pass_remoted+0x80>
     6f6:	64 30       	cpi	r22, 0x04	; 4
     6f8:	b9 f4       	brne	.+46     	; 0x728 <check_admin_pass_remoted+0x80>
	{
		USART_vidSendString("Correct Password ");// send message to serial terminal
     6fa:	83 e2       	ldi	r24, 0x23	; 35
     6fc:	92 e0       	ldi	r25, 0x02	; 2
     6fe:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     702:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
		LED_vidTurnOn(GPIOD,PIN3);						// turn on led
     706:	63 e0       	ldi	r22, 0x03	; 3
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	0e 94 90 0a 	call	0x1520	; 0x1520 <LED_vidTurnOn>
		LED_vidTurnOff(GPIOD,PIN4);						// turn off led
     70e:	64 e0       	ldi	r22, 0x04	; 4
     710:	83 e0       	ldi	r24, 0x03	; 3
     712:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
		LED_vidTurnOff(GPIOB,PIN5);						// turn off led
     716:	65 e0       	ldi	r22, 0x05	; 5
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
		wrong_pass_count = 0;							// reset wrong_pass_count variable by reinitialize by 0	
     71e:	10 92 e3 07 	sts	0x07E3, r1	; 0x8007e3 <wrong_pass_count>
		Admin_Remoted_Menue();							// call function that control admin menu
     722:	0e 94 21 03 	call	0x642	; 0x642 <Admin_Remoted_Menue>
     726:	08 95       	ret
	}
	else												// if not
	{
		wrong_pass_count++;								// increase wrong_pass_count variable by one
     728:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <wrong_pass_count>
     72c:	8f 5f       	subi	r24, 0xFF	; 255
     72e:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <wrong_pass_count>
		USART_vidSendString("Password Wrong ");			// send message to serial terminal
     732:	85 e3       	ldi	r24, 0x35	; 53
     734:	92 e0       	ldi	r25, 0x02	; 2
     736:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     73a:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
		if (wrong_pass_count == 1)						// if wrong pass counter equal to 1
     73e:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <wrong_pass_count>
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	29 f4       	brne	.+10     	; 0x750 <check_admin_pass_remoted+0xa8>
		USART_vidSendString(" 2 ");						// send message to serial terminal
     746:	85 e4       	ldi	r24, 0x45	; 69
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
     74e:	0d c0       	rjmp	.+26     	; 0x76a <check_admin_pass_remoted+0xc2>
		else if (wrong_pass_count == 2)					// if wrong pass counter equal to 2
     750:	82 30       	cpi	r24, 0x02	; 2
     752:	29 f4       	brne	.+10     	; 0x75e <check_admin_pass_remoted+0xb6>
		USART_vidSendString(" 1 ");						// send message to serial terminal
     754:	89 e4       	ldi	r24, 0x49	; 73
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
     75c:	06 c0       	rjmp	.+12     	; 0x76a <check_admin_pass_remoted+0xc2>
		else if (wrong_pass_count == 3)					// if wrong pass counter equal to 3
     75e:	83 30       	cpi	r24, 0x03	; 3
     760:	21 f4       	brne	.+8      	; 0x76a <check_admin_pass_remoted+0xc2>
		USART_vidSendString(" 0 ");						// send message to serial terminal
     762:	8d e4       	ldi	r24, 0x4D	; 77
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
		USART_vidSendString("tries remains ");// send message to serial terminal
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	93 e0       	ldi	r25, 0x03	; 3
     76e:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     772:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
		if (wrong_pass_count == 3)						// if wrong pass counter equal to 3
     776:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <wrong_pass_count>
     77a:	83 30       	cpi	r24, 0x03	; 3
     77c:	c1 f5       	brne	.+112    	; 0x7ee <check_admin_pass_remoted+0x146>
		{
			wrong_pass_count=0;							// set wrong pass counter to 0
     77e:	10 92 e3 07 	sts	0x07E3, r1	; 0x8007e3 <wrong_pass_count>
			USART_vidSendString("Lock mode!!");			// send message to serial terminal
     782:	81 e5       	ldi	r24, 0x51	; 81
     784:	92 e0       	ldi	r25, 0x02	; 2
     786:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     78a:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			LED_vidTurnOn(GPIOB, PIN5);					// turn on led
     78e:	65 e0       	ldi	r22, 0x05	; 5
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	0e 94 90 0a 	call	0x1520	; 0x1520 <LED_vidTurnOn>
			LED_vidTurnOff(GPIOD, PIN3);				// turn off led
     796:	63 e0       	ldi	r22, 0x03	; 3
     798:	83 e0       	ldi	r24, 0x03	; 3
     79a:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
			LED_vidTurnOff(GPIOD, PIN4);				// turn of led
     79e:	64 e0       	ldi	r22, 0x04	; 4
     7a0:	83 e0       	ldi	r24, 0x03	; 3
     7a2:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
			DIO_vidWritePin(GPIOD, PIN7, HIGH);			// output high on pin (turn on alarm)
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	67 e0       	ldi	r22, 0x07	; 7
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
			LCD_vidMoveCursor(4,9);
     7b0:	69 e0       	ldi	r22, 0x09	; 9
     7b2:	84 e0       	ldi	r24, 0x04	; 4
     7b4:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString("AL: ON");				// display string on LCD
     7b8:	8d e5       	ldi	r24, 0x5D	; 93
     7ba:	92 e0       	ldi	r25, 0x02	; 2
     7bc:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
     7c0:	2a ea       	ldi	r18, 0xAA	; 170
     7c2:	36 ee       	ldi	r19, 0xE6	; 230
     7c4:	86 e9       	ldi	r24, 0x96	; 150
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	21 50       	subi	r18, 0x01	; 1
     7ca:	30 40       	sbci	r19, 0x00	; 0
     7cc:	80 40       	sbci	r24, 0x00	; 0
     7ce:	90 40       	sbci	r25, 0x00	; 0
     7d0:	d9 f7       	brne	.-10     	; 0x7c8 <check_admin_pass_remoted+0x120>
     7d2:	00 00       	nop
			_delay_ms(20000);							// wait for 20 second
			DIO_vidWritePin(GPIOD, PIN7, LOW);			// output low on pin (turn off alarm)
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	67 e0       	ldi	r22, 0x07	; 7
     7d8:	83 e0       	ldi	r24, 0x03	; 3
     7da:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
			LCD_vidMoveCursor(4,9);
     7de:	69 e0       	ldi	r22, 0x09	; 9
     7e0:	84 e0       	ldi	r24, 0x04	; 4
     7e2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString("AL: OFF");			// display string on LCD
     7e6:	84 e6       	ldi	r24, 0x64	; 100
     7e8:	92 e0       	ldi	r25, 0x02	; 2
     7ea:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		}
		Admin_Remoted_Login();							// call function that control admin login
     7ee:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Admin_Remoted_Login>
     7f2:	08 95       	ret

000007f4 <Admin_Remoted_Login>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								scan username & pass from admin then check it (remoted)*/
		/************************************************************************/
void Admin_Remoted_Login()
{
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
	int i=0;											// declare variable and initialize it to 0
	USART_vidSendString("Enter UserName: ");			// send message to serial terminal
     7f8:	8c e6       	ldi	r24, 0x6C	; 108
     7fa:	92 e0       	ldi	r25, 0x02	; 2
     7fc:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     800:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     804:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     808:	c0 ef       	ldi	r28, 0xF0	; 240
     80a:	d7 e0       	ldi	r29, 0x07	; 7
     80c:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     810:	88 83       	st	Y, r24
	i++;												// increase variable i by one
	u8RecieveByte();									// receive data
     812:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     816:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     81a:	89 83       	std	Y+1, r24	; 0x01
	i++;												// increase variable i by one	
	u8RecieveByte();									// receive data
     81c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     820:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     824:	8a 83       	std	Y+2, r24	; 0x02
	i++;												// increase variable i by one	
	u8RecieveByte();									// receive data
     826:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     82a:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     82e:	8b 83       	std	Y+3, r24	; 0x03
	i++;												// increase variable i by one
	i=0;												// set variable i to 0
	USART_vidSendString("Enter Password");				// send message to serial terminal
     830:	8d e7       	ldi	r24, 0x7D	; 125
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)	
     838:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     83c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     840:	c8 ee       	ldi	r28, 0xE8	; 232
     842:	d7 e0       	ldi	r29, 0x07	; 7
     844:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     848:	88 83       	st	Y, r24
	i++;												// increase variable i by one
	u8RecieveByte();									// receive data
     84a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     84e:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     852:	89 83       	std	Y+1, r24	; 0x01
	i++;												// increase variable i by one
	u8RecieveByte();									// receive data
     854:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     858:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     85c:	8a 83       	std	Y+2, r24	; 0x02
	i++;												// increase variable i by one
	u8RecieveByte();									// receive data
     85e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     862:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     866:	8b 83       	std	Y+3, r24	; 0x03
	i++;												// increase variable i by one
	check_admin_pass_remoted();							// call function that check username & pass for admin
     868:	0e 94 54 03 	call	0x6a8	; 0x6a8 <check_admin_pass_remoted>
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <LogOut_Remotly>:
		/*Function Description: void function take void and return void
								logout from the system and return to start screen (remoted)*/
		/************************************************************************/
void LogOut_Remotly()
{
	USART_vidSendString("press A for Admin Login & U for User login");// send message to serial terminal
     872:	8c e8       	ldi	r24, 0x8C	; 140
     874:	92 e0       	ldi	r25, 0x02	; 2
     876:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)					
     87a:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     87e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     882:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
	if (u8ReturnedValue=='A')							// if choice equal A
     886:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     88a:	81 34       	cpi	r24, 0x41	; 65
     88c:	31 f4       	brne	.+12     	; 0x89a <LogOut_Remotly+0x28>
	{
		LogInFlag=1;									// set login flag equal to 1
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <LogInFlag>
		Isadmin_Remoted();								// call function that know who is login
		Admin_Remoted_Login();							// call function that control admin login
     894:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Admin_Remoted_Login>
     898:	08 95       	ret
	}
	else if (u8ReturnedValue=='U')						// if choice equal to U
     89a:	85 35       	cpi	r24, 0x55	; 85
     89c:	29 f4       	brne	.+10     	; 0x8a8 <LogOut_Remotly+0x36>
	{
		LogInFlag=0;									// set login flag equal to 0
     89e:	10 92 e6 07 	sts	0x07E6, r1	; 0x8007e6 <LogInFlag>
		Isadmin_Remoted();								// call function that know who is login
		User_Remoted_Login();							// call function that control user login
     8a2:	0e 94 75 04 	call	0x8ea	; 0x8ea <User_Remoted_Login>
     8a6:	08 95       	ret
	}
	else												// if not
	{	
		LogOut_Remotly();								// call function that logout from system
     8a8:	0e 94 39 04 	call	0x872	; 0x872 <LogOut_Remotly>
     8ac:	08 95       	ret

000008ae <User_Remoted_Menue>:
		/*Function Description: void function take void and return void
								display user control menu (remoted)				*/
		/************************************************************************/
void User_Remoted_Menue()
{
	USART_vidSendString("1.Room Lighting   2.Air condition   3.LogOut");// send message to serial terminal
     8ae:	87 eb       	ldi	r24, 0xB7	; 183
     8b0:	92 e0       	ldi	r25, 0x02	; 2
     8b2:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     8b6:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     8ba:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     8be:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
	switch(u8ReturnedValue)								// switch choice
     8c2:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     8c6:	82 33       	cpi	r24, 0x32	; 50
     8c8:	39 f0       	breq	.+14     	; 0x8d8 <User_Remoted_Menue+0x2a>
     8ca:	83 33       	cpi	r24, 0x33	; 51
     8cc:	41 f0       	breq	.+16     	; 0x8de <User_Remoted_Menue+0x30>
     8ce:	81 33       	cpi	r24, 0x31	; 49
     8d0:	49 f4       	brne	.+18     	; 0x8e4 <User_Remoted_Menue+0x36>
	{
		case '1' :										// if choice equal 1
		control_Remoted_Rooms();						// call function that control rooms
     8d2:	0e 94 07 02 	call	0x40e	; 0x40e <control_Remoted_Rooms>
		break;											// break
     8d6:	08 95       	ret
		case '2' :										// if choice equal 2
		Air_Condition_Remoted();						// call function that control air condition
     8d8:	0e 94 63 05 	call	0xac6	; 0xac6 <Air_Condition_Remoted>
		break;											// break
     8dc:	08 95       	ret
		case '3' :										// if choice equal 3
		LogOut_Remotly();								// call function that logout from system
     8de:	0e 94 39 04 	call	0x872	; 0x872 <LogOut_Remotly>
		break;											// break
     8e2:	08 95       	ret
		default:										// default
		User_Remoted_Menue();							// call function that display user control menu
     8e4:	0e 94 57 04 	call	0x8ae	; 0x8ae <User_Remoted_Menue>
     8e8:	08 95       	ret

000008ea <User_Remoted_Login>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								scan username & pass from user then check it (remoted)*/
		/************************************************************************/
void User_Remoted_Login()
{
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
	int i=0;											// declare variable i and initialize it to 0
	u8 UserId;											// declare user id variable
	USART_vidSendString("Enter User Id ");				// send message to serial terminal
     8f0:	84 ee       	ldi	r24, 0xE4	; 228
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     8f8:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     8fc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	UserId=u8ReturnedValue;								// set user id to entered id
     900:	10 91 e5 07 	lds	r17, 0x07E5	; 0x8007e5 <u8ReturnedValue>
	USART_vidSendString("Enter UserName ");				// send message to serial terminal
     904:	83 ef       	ldi	r24, 0xF3	; 243
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     90c:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data						
     910:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     914:	c0 ef       	ldi	r28, 0xF0	; 240
     916:	d7 e0       	ldi	r29, 0x07	; 7
     918:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     91c:	88 83       	st	Y, r24
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     91e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     922:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     926:	89 83       	std	Y+1, r24	; 0x01
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     928:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     92c:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     930:	8a 83       	std	Y+2, r24	; 0x02
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     932:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     936:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     93a:	8b 83       	std	Y+3, r24	; 0x03
	i++;												// increase i by one
	i=0;												// set i to 0
	USART_vidSendString("Enter Password");				// send message to serial terminal
     93c:	8d e7       	ldi	r24, 0x7D	; 125
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     944:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     948:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     94c:	c8 ee       	ldi	r28, 0xE8	; 232
     94e:	d7 e0       	ldi	r29, 0x07	; 7
     950:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     954:	88 83       	st	Y, r24
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     956:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     95a:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     95e:	89 83       	std	Y+1, r24	; 0x01
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     960:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     964:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     968:	8a 83       	std	Y+2, r24	; 0x02
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     96a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     96e:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     972:	8b 83       	std	Y+3, r24	; 0x03
	i++;												// increase i by one
	read_EEPROM(UserId);
     974:	81 2f       	mov	r24, r17
     976:	0e 94 96 0c 	call	0x192c	; 0x192c <read_EEPROM>
     97a:	e0 ef       	ldi	r30, 0xF0	; 240
     97c:	f7 e0       	ldi	r31, 0x07	; 7
     97e:	ac ee       	ldi	r26, 0xEC	; 236
     980:	b7 e0       	ldi	r27, 0x07	; 7
     982:	24 ef       	ldi	r18, 0xF4	; 244
     984:	37 e0       	ldi	r19, 0x07	; 7
     986:	60 e0       	ldi	r22, 0x00	; 0
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
	{
		if (user[i] == EEPROM_user[i])					// check if two value are equal or not
     988:	91 91       	ld	r25, Z+
     98a:	8d 91       	ld	r24, X+
     98c:	98 13       	cpse	r25, r24
     98e:	01 c0       	rjmp	.+2      	; 0x992 <User_Remoted_Login+0xa8>
		{
			check_user++;								// if that increase the check variable by one
     990:	6f 5f       	subi	r22, 0xFF	; 255
	u8RecieveByte();									// receive data
	pass[i]=u8ReturnedValue;							// store data in array
	i++;												// increase i by one
	read_EEPROM(UserId);
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     992:	e2 17       	cp	r30, r18
     994:	f3 07       	cpc	r31, r19
     996:	c1 f7       	brne	.-16     	; 0x988 <User_Remoted_Login+0x9e>
     998:	60 93 e7 07 	sts	0x07E7, r22	; 0x8007e7 <check_user>
     99c:	e8 ee       	ldi	r30, 0xE8	; 232
     99e:	f7 e0       	ldi	r31, 0x07	; 7
     9a0:	a9 ef       	ldi	r26, 0xF9	; 249
     9a2:	b7 e0       	ldi	r27, 0x07	; 7
     9a4:	4c ee       	ldi	r20, 0xEC	; 236
     9a6:	57 e0       	ldi	r21, 0x07	; 7
     9a8:	20 e0       	ldi	r18, 0x00	; 0
		}
	}
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
	{
		if (pass[i] == EEPROM_pass[i])					// check if two value are equal or not
     9aa:	91 91       	ld	r25, Z+
     9ac:	8d 91       	ld	r24, X+
     9ae:	98 13       	cpse	r25, r24
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <User_Remoted_Login+0xca>
		{
			check++;									// if that increase the check variable by one
     9b2:	2f 5f       	subi	r18, 0xFF	; 255
		else											// if not
		{
		}
	}
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     9b4:	e4 17       	cp	r30, r20
     9b6:	f5 07       	cpc	r31, r21
     9b8:	c1 f7       	brne	.-16     	; 0x9aa <User_Remoted_Login+0xc0>
     9ba:	20 93 f8 07 	sts	0x07F8, r18	; 0x8007f8 <check>
		}
		else											// if not
		{
		}
	}
	if(check == 4 && check_user == 4)					// check if check variable equal 4 or not (correct pass)
     9be:	24 30       	cpi	r18, 0x04	; 4
     9c0:	c9 f4       	brne	.+50     	; 0x9f4 <User_Remoted_Login+0x10a>
     9c2:	64 30       	cpi	r22, 0x04	; 4
     9c4:	b9 f4       	brne	.+46     	; 0x9f4 <User_Remoted_Login+0x10a>
	{
		USART_vidSendString("Correct Password ");// send message to serial terminal
     9c6:	83 e2       	ldi	r24, 0x23	; 35
     9c8:	92 e0       	ldi	r25, 0x02	; 2
     9ca:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     9ce:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
		LED_vidTurnOn(GPIOD,PIN4);						// turn on the led
     9d2:	64 e0       	ldi	r22, 0x04	; 4
     9d4:	83 e0       	ldi	r24, 0x03	; 3
     9d6:	0e 94 90 0a 	call	0x1520	; 0x1520 <LED_vidTurnOn>
		LED_vidTurnOff(GPIOD,PIN3);						// turn off the led
     9da:	63 e0       	ldi	r22, 0x03	; 3
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
		LED_vidTurnOff(GPIOB,PIN5);						// turn off the led
     9e2:	65 e0       	ldi	r22, 0x05	; 5
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
		wrong_pass_count = 0;							// set wrong pass counter to 0
     9ea:	10 92 e3 07 	sts	0x07E3, r1	; 0x8007e3 <wrong_pass_count>
		User_Remoted_Menue();							// reset wrong_pass_count variable by reinitialize by 0
     9ee:	0e 94 57 04 	call	0x8ae	; 0x8ae <User_Remoted_Menue>
     9f2:	65 c0       	rjmp	.+202    	; 0xabe <User_Remoted_Login+0x1d4>
	}
	else												// if not
	{
		wrong_pass_count++;								// increase wrong_pass_count variable by one
     9f4:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <wrong_pass_count>
     9f8:	8f 5f       	subi	r24, 0xFF	; 255
     9fa:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <wrong_pass_count>
		USART_vidSendString("Password Wrong ");			// send message to serial terminal
     9fe:	85 e3       	ldi	r24, 0x35	; 53
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     a06:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
		if (wrong_pass_count == 1)						// if wrong pass counter equal to 1
     a0a:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <wrong_pass_count>
     a0e:	81 30       	cpi	r24, 0x01	; 1
     a10:	29 f4       	brne	.+10     	; 0xa1c <User_Remoted_Login+0x132>
		USART_vidSendString(" 2 ");						// send message to serial terminal
     a12:	85 e4       	ldi	r24, 0x45	; 69
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
     a1a:	0d c0       	rjmp	.+26     	; 0xa36 <User_Remoted_Login+0x14c>
		else if (wrong_pass_count == 2)					// if wrong pass counter equal to 2
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	29 f4       	brne	.+10     	; 0xa2a <User_Remoted_Login+0x140>
		USART_vidSendString(" 1 ");						// send message to serial terminal
     a20:	89 e4       	ldi	r24, 0x49	; 73
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
     a28:	06 c0       	rjmp	.+12     	; 0xa36 <User_Remoted_Login+0x14c>
		else if (wrong_pass_count == 3)					// if wrong pass counter equal to 3
     a2a:	83 30       	cpi	r24, 0x03	; 3
     a2c:	21 f4       	brne	.+8      	; 0xa36 <User_Remoted_Login+0x14c>
		USART_vidSendString(" 0 ");						// send message to serial terminal
     a2e:	8d e4       	ldi	r24, 0x4D	; 77
     a30:	92 e0       	ldi	r25, 0x02	; 2
     a32:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
		USART_vidSendString(" tries remains ");			// send message to serial terminal
     a36:	83 e0       	ldi	r24, 0x03	; 3
     a38:	93 e0       	ldi	r25, 0x03	; 3
     a3a:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     a3e:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
		if (wrong_pass_count == 3)						// if wrong pass counter equal to 3
     a42:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <wrong_pass_count>
     a46:	83 30       	cpi	r24, 0x03	; 3
     a48:	c1 f5       	brne	.+112    	; 0xaba <User_Remoted_Login+0x1d0>
		{
			wrong_pass_count=0;							// set wrong pass counter to 0
     a4a:	10 92 e3 07 	sts	0x07E3, r1	; 0x8007e3 <wrong_pass_count>
			USART_vidSendString("Lock mode!!");			// send message to serial terminal
     a4e:	81 e5       	ldi	r24, 0x51	; 81
     a50:	92 e0       	ldi	r25, 0x02	; 2
     a52:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     a56:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			LED_vidTurnOn(GPIOB, PIN5);					// turn on the led
     a5a:	65 e0       	ldi	r22, 0x05	; 5
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	0e 94 90 0a 	call	0x1520	; 0x1520 <LED_vidTurnOn>
			LED_vidTurnOff(GPIOD, PIN3);				// turn off led
     a62:	63 e0       	ldi	r22, 0x03	; 3
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
			LED_vidTurnOff(GPIOD, PIN4);				// turn off led
     a6a:	64 e0       	ldi	r22, 0x04	; 4
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
			DIO_vidWritePin(GPIOD, PIN7, HIGH);			// output high on pin (turn on alarm)
     a72:	41 e0       	ldi	r20, 0x01	; 1
     a74:	67 e0       	ldi	r22, 0x07	; 7
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
			LCD_vidMoveCursor(4,10);
     a7c:	6a e0       	ldi	r22, 0x0A	; 10
     a7e:	84 e0       	ldi	r24, 0x04	; 4
     a80:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString("AL: ON");				// display string on LCD
     a84:	8d e5       	ldi	r24, 0x5D	; 93
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
     a8c:	2a ea       	ldi	r18, 0xAA	; 170
     a8e:	36 ee       	ldi	r19, 0xE6	; 230
     a90:	86 e9       	ldi	r24, 0x96	; 150
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	21 50       	subi	r18, 0x01	; 1
     a96:	30 40       	sbci	r19, 0x00	; 0
     a98:	80 40       	sbci	r24, 0x00	; 0
     a9a:	90 40       	sbci	r25, 0x00	; 0
     a9c:	d9 f7       	brne	.-10     	; 0xa94 <User_Remoted_Login+0x1aa>
     a9e:	00 00       	nop
			_delay_ms(20000);							// wait for 20 second
			DIO_vidWritePin(GPIOD, PIN7, LOW);			// output low on pin (turn off alarm)
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	67 e0       	ldi	r22, 0x07	; 7
     aa4:	83 e0       	ldi	r24, 0x03	; 3
     aa6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
			LCD_vidMoveCursor(4,10);
     aaa:	6a e0       	ldi	r22, 0x0A	; 10
     aac:	84 e0       	ldi	r24, 0x04	; 4
     aae:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString("AL: OFF");			// display string on LCD
     ab2:	84 e6       	ldi	r24, 0x64	; 100
     ab4:	92 e0       	ldi	r25, 0x02	; 2
     ab6:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		}
		User_Remoted_Login();							// call function that control user login
     aba:	0e 94 75 04 	call	0x8ea	; 0x8ea <User_Remoted_Login>
	}
}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	08 95       	ret

00000ac6 <Air_Condition_Remoted>:
		/*Function Description: void function take void and return void
								control air condition	(remoted)				*/
		/************************************************************************/
void Air_Condition_Remoted()
{
	DC_Motor_vidInit();									// initialize DC Motor
     ac6:	0e 94 46 07 	call	0xe8c	; 0xe8c <DC_Motor_vidInit>
	u8 temp,pre=1;										// declare two variable & initialize both with 1
	LM35_vidInit(ADC_CH0);								// initialize temperature sensor
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	0e 94 98 0a 	call	0x1530	; 0x1530 <LM35_vidInit>
								control air condition	(remoted)				*/
		/************************************************************************/
void Air_Condition_Remoted()
{
	DC_Motor_vidInit();									// initialize DC Motor
	u8 temp,pre=1;										// declare two variable & initialize both with 1
     ad0:	d1 e0       	ldi	r29, 0x01	; 1
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <Air_Condition_Remoted+0x10>
	LM35_vidInit(ADC_CH0);								// initialize temperature sensor
	while (1)											// infinite while loop
	{
		temp = LM35_u8Read();							// read temperature
     ad4:	dc 2f       	mov	r29, r28
     ad6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <LM35_u8Read>
     ada:	c8 2f       	mov	r28, r24
		if(temp != pre)									// if temperature not equal to previous one
     adc:	8d 17       	cp	r24, r29
     ade:	d9 f3       	breq	.-10     	; 0xad6 <Air_Condition_Remoted+0x10>
		{
			pre = temp;									// set previous temperature to recent one
			if(temp >= 28)								// if temperature greater than or equal to 28
     ae0:	8c 31       	cpi	r24, 0x1C	; 28
     ae2:	a8 f0       	brcs	.+42     	; 0xb0e <Air_Condition_Remoted+0x48>
			{
				USART_vidSendString("Air condition ON                                                  ");// send message to serial terminal
     ae4:	83 e1       	ldi	r24, 0x13	; 19
     ae6:	93 e0       	ldi	r25, 0x03	; 3
     ae8:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     aec:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
				LCD_vidMoveCursor(4,1);
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	84 e0       	ldi	r24, 0x04	; 4
     af4:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
				LCD_vidDisplayString("Air:ON ");		// display string on LCD
     af8:	86 e5       	ldi	r24, 0x56	; 86
     afa:	93 e0       	ldi	r25, 0x03	; 3
     afc:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
				LED_vidTurnOn(GPIOD, PIN2);				// turn on led
     b00:	62 e0       	ldi	r22, 0x02	; 2
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	0e 94 90 0a 	call	0x1520	; 0x1520 <LED_vidTurnOn>
				DC_Motor_vidTurnOn();					// turn on DC Motor
     b08:	0e 94 51 07 	call	0xea2	; 0xea2 <DC_Motor_vidTurnOn>
     b0c:	16 c0       	rjmp	.+44     	; 0xb3a <Air_Condition_Remoted+0x74>
			}
			else if(temp <= 21 )
     b0e:	86 31       	cpi	r24, 0x16	; 22
     b10:	a0 f4       	brcc	.+40     	; 0xb3a <Air_Condition_Remoted+0x74>
			{
				USART_vidSendString("Air condition off                                                ");// send message to serial terminal
     b12:	8e e5       	ldi	r24, 0x5E	; 94
     b14:	93 e0       	ldi	r25, 0x03	; 3
     b16:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     b1a:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
				LCD_vidMoveCursor(4,1);
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	84 e0       	ldi	r24, 0x04	; 4
     b22:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
				LCD_vidDisplayString("Air:OFF ");		// display string on LCD
     b26:	80 ea       	ldi	r24, 0xA0	; 160
     b28:	93 e0       	ldi	r25, 0x03	; 3
     b2a:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
				LED_vidTurnOff(GPIOD, PIN2);			// turn off led
     b2e:	62 e0       	ldi	r22, 0x02	; 2
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
				DC_Motor_vidTurnOff();					// turn off DC Motor
     b36:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DC_Motor_vidTurnOff>
			}
		if (Isadmin_Remoted()==1)						// if is admin equal to 1
     b3a:	0e 94 00 02 	call	0x400	; 0x400 <Isadmin_Remoted>
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	19 f4       	brne	.+6      	; 0xb48 <Air_Condition_Remoted+0x82>
		{
			Admin_Remoted_Menue();						// call function that control admin login
     b42:	0e 94 21 03 	call	0x642	; 0x642 <Admin_Remoted_Menue>
     b46:	c6 cf       	rjmp	.-116    	; 0xad4 <Air_Condition_Remoted+0xe>
		}
		else if(Isadmin_Remoted()==0)					// if not
     b48:	81 11       	cpse	r24, r1
     b4a:	c4 cf       	rjmp	.-120    	; 0xad4 <Air_Condition_Remoted+0xe>
		{
			User_Remoted_Menue();						// call function that control user login
     b4c:	0e 94 57 04 	call	0x8ae	; 0x8ae <User_Remoted_Menue>
     b50:	c1 cf       	rjmp	.-126    	; 0xad4 <Air_Condition_Remoted+0xe>

00000b52 <Bluetooth_Control>:
		pass_check = EEPROM_u8Read(PASS_address_check);	// check if pass is set or not by reading value in PASS_address_check
		Bluetooth_Control();
	}
	else
	{
*/		USART_vidSendString("Press A for Admin Login & U for user login");// send message to serial terminal
     b52:	89 ea       	ldi	r24, 0xA9	; 169
     b54:	93 e0       	ldi	r25, 0x03	; 3
     b56:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     b5a:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
		u8ReturnedValue = USART_u8RecieveByte();		// receive data and store it in variable
     b5e:	0e 94 26 12 	call	0x244c	; 0x244c <USART_u8RecieveByte>
     b62:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
		USART_vidEnableRXInterrupt();					// enable TX interrupt (finish transmit)
     b66:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
		if (u8ReturnedValue=='A')						// if choice equal to A
     b6a:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     b6e:	81 34       	cpi	r24, 0x41	; 65
     b70:	31 f4       	brne	.+12     	; 0xb7e <Bluetooth_Control+0x2c>
		{
			LogInFlag=1;								// set login flag to 1
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <LogInFlag>
			Isadmin_Remoted();							// call function that check who is login (admin or user)
			Admin_Remoted_Login();						// call function that scan username & pass from admin
     b78:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Admin_Remoted_Login>
     b7c:	08 95       	ret
		}
		else if (u8ReturnedValue=='U')					// if choice equal to U
     b7e:	85 35       	cpi	r24, 0x55	; 85
     b80:	29 f4       	brne	.+10     	; 0xb8c <Bluetooth_Control+0x3a>
		{
			LogInFlag=0;								// set login flag to 0
     b82:	10 92 e6 07 	sts	0x07E6, r1	; 0x8007e6 <LogInFlag>
			Isadmin_Remoted();							// call function that check who is login (admin or user)
			User_Remoted_Login();						// call function that scan username & pass from user
     b86:	0e 94 75 04 	call	0x8ea	; 0x8ea <User_Remoted_Login>
     b8a:	08 95       	ret
		}
		else											// if not 
		{
			USART_vidSendString("Wrong Choice");		// send message to serial terminal
     b8c:	85 ea       	ldi	r24, 0xA5	; 165
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     b94:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
			Bluetooth_Control();						// call function that control system remoted
     b98:	0e 94 a9 05 	call	0xb52	; 0xb52 <Bluetooth_Control>
     b9c:	08 95       	ret

00000b9e <Add_Remoted_User>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								add user to the system	(remoted)				*/
		/************************************************************************/
void Add_Remoted_User()
{	
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
	int i=0;											// declare variable & initialize with 0	
	u8 UserId;											// declare variable to store user id
	USART_vidSendString("Enter User Id ");				// send message to serial terminal
     ba4:	84 ee       	ldi	r24, 0xE4	; 228
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     bac:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     bb0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	UserId=u8ReturnedValue;								// store data in variable
     bb4:	10 91 e5 07 	lds	r17, 0x07E5	; 0x8007e5 <u8ReturnedValue>
	USART_vidSendString("Enter User ");					// send message to serial terminal
     bb8:	84 ed       	ldi	r24, 0xD4	; 212
     bba:	93 e0       	ldi	r25, 0x03	; 3
     bbc:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     bc0:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     bc4:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     bc8:	c0 ef       	ldi	r28, 0xF0	; 240
     bca:	d7 e0       	ldi	r29, 0x07	; 7
     bcc:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     bd0:	88 83       	st	Y, r24
	i++;												// increase i by one 
	u8RecieveByte();									// receive data
     bd2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     bd6:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     bda:	89 83       	std	Y+1, r24	; 0x01
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     bdc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     be0:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     be4:	8a 83       	std	Y+2, r24	; 0x02
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     be6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     bea:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     bee:	8b 83       	std	Y+3, r24	; 0x03
	i++;												// increase i by one
	i=0;												// initialize i by 0
	USART_vidSendString("Enter Password");				// send message to serial terminal
     bf0:	8d e7       	ldi	r24, 0x7D	; 125
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     bf8:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     bfc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     c00:	c8 ee       	ldi	r28, 0xE8	; 232
     c02:	d7 e0       	ldi	r29, 0x07	; 7
     c04:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     c08:	88 83       	st	Y, r24
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     c0a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     c0e:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     c12:	89 83       	std	Y+1, r24	; 0x01
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     c14:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     c18:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     c1c:	8a 83       	std	Y+2, r24	; 0x02
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     c1e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     c22:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     c26:	8b 83       	std	Y+3, r24	; 0x03
	i++;												// increase i by one
	write_EEPROM(UserId);
     c28:	81 2f       	mov	r24, r17
     c2a:	0e 94 44 0c 	call	0x1888	; 0x1888 <write_EEPROM>
	read_EEPROM(UserId);
     c2e:	81 2f       	mov	r24, r17
     c30:	0e 94 96 0c 	call	0x192c	; 0x192c <read_EEPROM>
	USART_vidSendString("User Added Successfully ");// send message to serial terminal
     c34:	80 ee       	ldi	r24, 0xE0	; 224
     c36:	93 e0       	ldi	r25, 0x03	; 3
     c38:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     c3c:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	Admin_Remoted_Menue();								// call function that display admin control menu
     c40:	0e 94 21 03 	call	0x642	; 0x642 <Admin_Remoted_Menue>
}
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	08 95       	ret

00000c4c <open_door>:
		/*Function Description: void function take void and return void
								control door opening & closing (remoted)		*/
		/************************************************************************/
void open_door()
{	
	USART_vidSendString("1. open The door    2.Close the door    0.Return");// send message to serial terminal
     c4c:	89 ef       	ldi	r24, 0xF9	; 249
     c4e:	93 e0       	ldi	r25, 0x03	; 3
     c50:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     c54:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     c58:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <u8RecieveByte>
	if (u8ReturnedValue == '1')							// if choice equal 1
     c5c:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     c60:	81 33       	cpi	r24, 0x31	; 49
     c62:	51 f4       	brne	.+20     	; 0xc78 <open_door+0x2c>
	{
		Servo_Clockwise(angle);							// turn on servo clock wise
     c64:	8a e5       	ldi	r24, 0x5A	; 90
     c66:	0e 94 aa 0b 	call	0x1754	; 0x1754 <Servo_Clockwise>
		USART_vidSendString("The door is open                                                               ");// send message to serial terminal
     c6a:	8a e2       	ldi	r24, 0x2A	; 42
     c6c:	94 e0       	ldi	r25, 0x04	; 4
     c6e:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
		USART_vidEnableRXInterrupt();					// enable RX interrupt (finish receiving)
     c72:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
     c76:	13 c0       	rjmp	.+38     	; 0xc9e <open_door+0x52>
	}
	else if(u8ReturnedValue == '2')						// if choice equal 2
     c78:	82 33       	cpi	r24, 0x32	; 50
     c7a:	51 f4       	brne	.+20     	; 0xc90 <open_door+0x44>
	{
		Servo_Counterclockwise(angle);					// turn on servo anti clock wise
     c7c:	8a e5       	ldi	r24, 0x5A	; 90
     c7e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Servo_Counterclockwise>
		USART_vidSendString("The door is closed                                                            ");// send message to serial terminal
     c82:	8a e7       	ldi	r24, 0x7A	; 122
     c84:	94 e0       	ldi	r25, 0x04	; 4
     c86:	0e 94 2e 12 	call	0x245c	; 0x245c <USART_vidSendString>
		USART_vidEnableRXInterrupt();					// enable RX interrupt (finish receiving)
     c8a:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <open_door+0x52>
	}
	else if (u8ReturnedValue == '0')					// if choice equal 0
     c90:	80 33       	cpi	r24, 0x30	; 48
     c92:	19 f4       	brne	.+6      	; 0xc9a <open_door+0x4e>
	{
		Admin_Remoted_Menue();							// call function that display admin control menu
     c94:	0e 94 21 03 	call	0x642	; 0x642 <Admin_Remoted_Menue>
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <open_door+0x52>
	}
	else												// if not
	{
		open_door();									// call function that control door
     c9a:	0e 94 26 06 	call	0xc4c	; 0xc4c <open_door>
	}
	Admin_Remoted_Menue();								// call function that display admin control menu
     c9e:	0e 94 21 03 	call	0x642	; 0x642 <Admin_Remoted_Menue>
     ca2:	08 95       	ret

00000ca4 <u8GetKeyPressed>:
		/************************************************************************/
u8 u8GetKeyPressed()
{
	do										// do while loop                         	
	{
		u8ReturnedValue = KPD_u8GetPressedKey(GPIOC, HIGH_NIBBLE);// return keypad pressed value	
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	0e 94 2e 09 	call	0x125c	; 0x125c <KPD_u8GetPressedKey>
     cac:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
     cb0:	2f e7       	ldi	r18, 0x7F	; 127
     cb2:	89 ea       	ldi	r24, 0xA9	; 169
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	21 50       	subi	r18, 0x01	; 1
     cb8:	80 40       	sbci	r24, 0x00	; 0
     cba:	90 40       	sbci	r25, 0x00	; 0
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <u8GetKeyPressed+0x12>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <u8GetKeyPressed+0x1c>
     cc0:	00 00       	nop
		_delay_ms(150);						//	wait for 150 m second                   	
	} while (u8ReturnedValue == NOT_PRESSED);// loop repeated if not pressed any key
     cc2:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     cc6:	8f 3f       	cpi	r24, 0xFF	; 255
     cc8:	69 f3       	breq	.-38     	; 0xca4 <u8GetKeyPressed>
	return u8ReturnedValue;					// return pressed value
}
     cca:	08 95       	ret

00000ccc <control_rooms>:
		/*Function Name: control_rooms											*/
		/*Function Input: take one input (constant variable form u8 type)		*/
		/*Function Description: void function that control rooms lightning		*/
		/************************************************************************/
void control_rooms(const u8 u8SelectedRoom)
{
     ccc:	9f 92       	push	r9
     cce:	af 92       	push	r10
     cd0:	bf 92       	push	r11
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	c8 2f       	mov	r28, r24
	u8 u8Status = 0;						// declare variable that will store status and initialize it with 0
	u8 u8TurnOn  = 0;						// declare variable that will store turn on status and initialize it with 0
	u8 u8TurnOff = 0;						// declare variable that will store turn off status and initialize it with 0
     ce4:	f1 2c       	mov	r15, r1
		/*Function Description: void function that control rooms lightning		*/
		/************************************************************************/
void control_rooms(const u8 u8SelectedRoom)
{
	u8 u8Status = 0;						// declare variable that will store status and initialize it with 0
	u8 u8TurnOn  = 0;						// declare variable that will store turn on status and initialize it with 0
     ce6:	00 e0       	ldi	r16, 0x00	; 0
		/*Function Input: take one input (constant variable form u8 type)		*/
		/*Function Description: void function that control rooms lightning		*/
		/************************************************************************/
void control_rooms(const u8 u8SelectedRoom)
{
	u8 u8Status = 0;						// declare variable that will store status and initialize it with 0
     ce8:	10 e0       	ldi	r17, 0x00	; 0
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
			break;							// break case
			case ROOM3_MENU:				// if selection is room3
			u8Status = ROOM3_STATUS;		// set status to room3 status
     cea:	0f 2e       	mov	r0, r31
     cec:	f3 e1       	ldi	r31, 0x13	; 19
     cee:	9f 2e       	mov	r9, r31
     cf0:	f0 2d       	mov	r31, r0
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
			break;							// break case
			case ROOM5_MENU:				// if selection is room5
			u8Status = ROOM5_STATUS;		// set status to room5 status
     cf2:	0f 2e       	mov	r0, r31
     cf4:	f5 e1       	ldi	r31, 0x15	; 21
     cf6:	af 2e       	mov	r10, r31
     cf8:	f0 2d       	mov	r31, r0
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
			break;							// break case
			case ROOM4_MENU:				// if selection is room4
			u8Status = ROOM4_STATUS;		// set status to room4 status
     cfa:	0f 2e       	mov	r0, r31
     cfc:	f4 e1       	ldi	r31, 0x14	; 20
     cfe:	bf 2e       	mov	r11, r31
     d00:	f0 2d       	mov	r31, r0
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
			break;							// break case
			case ROOM6_MENU:				// if selection is room6
			u8Status = ROOM6_STATUS;		// set status to room6 status
     d02:	0f 2e       	mov	r0, r31
     d04:	f6 e1       	ldi	r31, 0x16	; 22
     d06:	cf 2e       	mov	r12, r31
     d08:	f0 2d       	mov	r31, r0
	{
		LCD_vidClearScreen();				// clear LCD screen
		switch(u8SelectedRoom)				// switch for selection room variable
		{
			case ROOM1_MENU:				// if selection is room1
			u8Status = ROOM1_STATUS;		// set status to room1 status
     d0a:	0f 2e       	mov	r0, r31
     d0c:	f1 e1       	ldi	r31, 0x11	; 17
     d0e:	df 2e       	mov	r13, r31
     d10:	f0 2d       	mov	r31, r0
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
			break;							// break case
			case ROOM2_MENU:				// if selection is room2
			u8Status = ROOM2_STATUS;		// set status to room2 status
     d12:	0f 2e       	mov	r0, r31
     d14:	f2 e1       	ldi	r31, 0x12	; 18
     d16:	ef 2e       	mov	r14, r31
     d18:	f0 2d       	mov	r31, r0
	u8 u8TurnOn  = 0;						// declare variable that will store turn on status and initialize it with 0
	u8 u8TurnOff = 0;						// declare variable that will store turn off status and initialize it with 0
	u8 response;
	do										// do while loop 
	{
		LCD_vidClearScreen();				// clear LCD screen
     d1a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		switch(u8SelectedRoom)				// switch for selection room variable
     d1e:	c5 30       	cpi	r28, 0x05	; 5
     d20:	11 f1       	breq	.+68     	; 0xd66 <control_rooms+0x9a>
     d22:	28 f4       	brcc	.+10     	; 0xd2e <control_rooms+0x62>
     d24:	c3 30       	cpi	r28, 0x03	; 3
     d26:	49 f0       	breq	.+18     	; 0xd3a <control_rooms+0x6e>
     d28:	c4 30       	cpi	r28, 0x04	; 4
     d2a:	91 f0       	breq	.+36     	; 0xd50 <control_rooms+0x84>
     d2c:	47 c0       	rjmp	.+142    	; 0xdbc <control_rooms+0xf0>
     d2e:	c7 30       	cpi	r28, 0x07	; 7
     d30:	81 f1       	breq	.+96     	; 0xd92 <control_rooms+0xc6>
     d32:	20 f1       	brcs	.+72     	; 0xd7c <control_rooms+0xb0>
     d34:	c8 30       	cpi	r28, 0x08	; 8
     d36:	c1 f1       	breq	.+112    	; 0xda8 <control_rooms+0xdc>
     d38:	41 c0       	rjmp	.+130    	; 0xdbc <control_rooms+0xf0>
		{
			case ROOM1_MENU:				// if selection is room1
			u8Status = ROOM1_STATUS;		// set status to room1 status
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
     d3a:	89 ec       	ldi	r24, 0xC9	; 201
     d3c:	94 e0       	ldi	r25, 0x04	; 4
     d3e:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		switch(u8SelectedRoom)				// switch for selection room variable
		{
			case ROOM1_MENU:				// if selection is room1
			u8Status = ROOM1_STATUS;		// set status to room1 status
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
     d42:	0f 2e       	mov	r0, r31
     d44:	f1 e3       	ldi	r31, 0x31	; 49
     d46:	ff 2e       	mov	r15, r31
     d48:	f0 2d       	mov	r31, r0
		LCD_vidClearScreen();				// clear LCD screen
		switch(u8SelectedRoom)				// switch for selection room variable
		{
			case ROOM1_MENU:				// if selection is room1
			u8Status = ROOM1_STATUS;		// set status to room1 status
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
     d4a:	01 e2       	ldi	r16, 0x21	; 33
	{
		LCD_vidClearScreen();				// clear LCD screen
		switch(u8SelectedRoom)				// switch for selection room variable
		{
			case ROOM1_MENU:				// if selection is room1
			u8Status = ROOM1_STATUS;		// set status to room1 status
     d4c:	1d 2d       	mov	r17, r13
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
			break;							// break case
     d4e:	36 c0       	rjmp	.+108    	; 0xdbc <control_rooms+0xf0>
			case ROOM2_MENU:				// if selection is room2
			u8Status = ROOM2_STATUS;		// set status to room2 status
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
     d50:	87 ed       	ldi	r24, 0xD7	; 215
     d52:	94 e0       	ldi	r25, 0x04	; 4
     d54:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
			break;							// break case
			case ROOM2_MENU:				// if selection is room2
			u8Status = ROOM2_STATUS;		// set status to room2 status
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
     d58:	0f 2e       	mov	r0, r31
     d5a:	f2 e3       	ldi	r31, 0x32	; 50
     d5c:	ff 2e       	mov	r15, r31
     d5e:	f0 2d       	mov	r31, r0
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
			break;							// break case
			case ROOM2_MENU:				// if selection is room2
			u8Status = ROOM2_STATUS;		// set status to room2 status
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
     d60:	02 e2       	ldi	r16, 0x22	; 34
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
			break;							// break case
			case ROOM2_MENU:				// if selection is room2
			u8Status = ROOM2_STATUS;		// set status to room2 status
     d62:	1e 2d       	mov	r17, r14
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
			break;							// break case
     d64:	2b c0       	rjmp	.+86     	; 0xdbc <control_rooms+0xf0>
			case ROOM3_MENU:				// if selection is room3
			u8Status = ROOM3_STATUS;		// set status to room3 status
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
     d66:	85 ee       	ldi	r24, 0xE5	; 229
     d68:	94 e0       	ldi	r25, 0x04	; 4
     d6a:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
			break;							// break case
			case ROOM3_MENU:				// if selection is room3
			u8Status = ROOM3_STATUS;		// set status to room3 status
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
     d6e:	0f 2e       	mov	r0, r31
     d70:	f3 e3       	ldi	r31, 0x33	; 51
     d72:	ff 2e       	mov	r15, r31
     d74:	f0 2d       	mov	r31, r0
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
			break;							// break case
			case ROOM3_MENU:				// if selection is room3
			u8Status = ROOM3_STATUS;		// set status to room3 status
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
     d76:	03 e2       	ldi	r16, 0x23	; 35
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
			break;							// break case
			case ROOM3_MENU:				// if selection is room3
			u8Status = ROOM3_STATUS;		// set status to room3 status
     d78:	19 2d       	mov	r17, r9
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
			break;							// break case
     d7a:	20 c0       	rjmp	.+64     	; 0xdbc <control_rooms+0xf0>
			case ROOM4_MENU:				// if selection is room4
			u8Status = ROOM4_STATUS;		// set status to room4 status
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
     d7c:	83 ef       	ldi	r24, 0xF3	; 243
     d7e:	94 e0       	ldi	r25, 0x04	; 4
     d80:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
			break;							// break case
			case ROOM4_MENU:				// if selection is room4
			u8Status = ROOM4_STATUS;		// set status to room4 status
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
     d84:	0f 2e       	mov	r0, r31
     d86:	f4 e3       	ldi	r31, 0x34	; 52
     d88:	ff 2e       	mov	r15, r31
     d8a:	f0 2d       	mov	r31, r0
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
			break;							// break case
			case ROOM4_MENU:				// if selection is room4
			u8Status = ROOM4_STATUS;		// set status to room4 status
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
     d8c:	04 e2       	ldi	r16, 0x24	; 36
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
			break;							// break case
			case ROOM4_MENU:				// if selection is room4
			u8Status = ROOM4_STATUS;		// set status to room4 status
     d8e:	1b 2d       	mov	r17, r11
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
			break;							// break case
     d90:	15 c0       	rjmp	.+42     	; 0xdbc <control_rooms+0xf0>
			case ROOM5_MENU:				// if selection is room5
			u8Status = ROOM5_STATUS;		// set status to room5 status
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	95 e0       	ldi	r25, 0x05	; 5
     d96:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
			break;							// break case
			case ROOM5_MENU:				// if selection is room5
			u8Status = ROOM5_STATUS;		// set status to room5 status
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
     d9a:	0f 2e       	mov	r0, r31
     d9c:	f5 e3       	ldi	r31, 0x35	; 53
     d9e:	ff 2e       	mov	r15, r31
     da0:	f0 2d       	mov	r31, r0
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
			break;							// break case
			case ROOM5_MENU:				// if selection is room5
			u8Status = ROOM5_STATUS;		// set status to room5 status
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
     da2:	05 e2       	ldi	r16, 0x25	; 37
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
			break;							// break case
			case ROOM5_MENU:				// if selection is room5
			u8Status = ROOM5_STATUS;		// set status to room5 status
     da4:	1a 2d       	mov	r17, r10
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
			break;							// break case
     da6:	0a c0       	rjmp	.+20     	; 0xdbc <control_rooms+0xf0>
			case ROOM6_MENU:				// if selection is room6
			u8Status = ROOM6_STATUS;		// set status to room6 status
			u8TurnOn = ROOM6_TURN_ON;		// set turn on status to room6 turn on status
			u8TurnOff = ROOM6_TURN_OFF;		// set turn off status to room6 turn off status
			LCD_vidDisplayString("Room6 Status:");// display message on LCD screen
     da8:	8f e0       	ldi	r24, 0x0F	; 15
     daa:	95 e0       	ldi	r25, 0x05	; 5
     dac:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
			break;							// break case
			case ROOM6_MENU:				// if selection is room6
			u8Status = ROOM6_STATUS;		// set status to room6 status
			u8TurnOn = ROOM6_TURN_ON;		// set turn on status to room6 turn on status
			u8TurnOff = ROOM6_TURN_OFF;		// set turn off status to room6 turn off status
     db0:	0f 2e       	mov	r0, r31
     db2:	f6 e3       	ldi	r31, 0x36	; 54
     db4:	ff 2e       	mov	r15, r31
     db6:	f0 2d       	mov	r31, r0
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
			break;							// break case
			case ROOM6_MENU:				// if selection is room6
			u8Status = ROOM6_STATUS;		// set status to room6 status
			u8TurnOn = ROOM6_TURN_ON;		// set turn on status to room6 turn on status
     db8:	06 e2       	ldi	r16, 0x26	; 38
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
			break;							// break case
			case ROOM6_MENU:				// if selection is room6
			u8Status = ROOM6_STATUS;		// set status to room6 status
     dba:	1c 2d       	mov	r17, r12
			u8TurnOn = ROOM6_TURN_ON;		// set turn on status to room6 turn on status
			u8TurnOff = ROOM6_TURN_OFF;		// set turn off status to room6 turn off status
			LCD_vidDisplayString("Room6 Status:");// display message on LCD screen
			break;							// break case
		}	
		USART_vidSendByte(u8Status);		// send status to slave
     dbc:	81 2f       	mov	r24, r17
     dbe:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
		USART_vidEnableTXInterrupt();		// enable TX interrupt (finish transmitting)
     dc2:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
		response = USART_u8RecieveByte();	// receive response from slave
     dc6:	0e 94 26 12 	call	0x244c	; 0x244c <USART_u8RecieveByte>
     dca:	d8 2f       	mov	r29, r24
		USART_vidEnableRXInterrupt();		// enable RX interrupt (finish receiving)
     dcc:	0e 94 2c 12 	call	0x2458	; 0x2458 <USART_vidEnableRXInterrupt>
		if(response == ON_STATUS)			// if response equal to on state
     dd0:	d1 30       	cpi	r29, 0x01	; 1
     dd2:	29 f4       	brne	.+10     	; 0xdde <control_rooms+0x112>
		{
			LCD_vidDisplayString("ON");		// display message on LCD screen
     dd4:	81 e6       	ldi	r24, 0x61	; 97
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <control_rooms+0x11a>
		}
		else								// if not 
		{
			LCD_vidDisplayString("OFF");	// display message on LCD screen
     dde:	81 e4       	ldi	r24, 0x41	; 65
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		}
		LCD_vidMoveCursor(2,1);				// move LCD cursor to second line
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">> 1-On ");	// display message on LCD screen
     dee:	8d e1       	ldi	r24, 0x1D	; 29
     df0:	95 e0       	ldi	r25, 0x05	; 5
     df2:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(3,1);				// move LCD cursor to third line
     df6:	61 e0       	ldi	r22, 0x01	; 1
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">> 2-Off ");	// display message on LCD screen
     dfe:	86 e2       	ldi	r24, 0x26	; 38
     e00:	95 e0       	ldi	r25, 0x05	; 5
     e02:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(4,1);				// move LCD cursor to fourth line
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	84 e0       	ldi	r24, 0x04	; 4
     e0a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">> 0-RET ");	// display message on LCD screen
     e0e:	80 e3       	ldi	r24, 0x30	; 48
     e10:	95 e0       	ldi	r25, 0x05	; 5
     e12:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidDisplayString(" >> ");		// display message on LCD screen
     e16:	86 e0       	ldi	r24, 0x06	; 6
     e18:	97 e0       	ldi	r25, 0x07	; 7
     e1a:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		u8ReturnedValue = u8GetKeyPressed();// take choice from user            
     e1e:	0e 94 52 06 	call	0xca4	; 0xca4 <u8GetKeyPressed>
     e22:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
		if (u8ReturnedValue == '1')			// if choice equal to one
     e26:	81 33       	cpi	r24, 0x31	; 49
     e28:	31 f4       	brne	.+12     	; 0xe36 <control_rooms+0x16a>
		{
			USART_vidSendByte(u8TurnOn);	// send turn on status to slave
     e2a:	80 2f       	mov	r24, r16
     e2c:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();	// enable TX interrupt (finish transmitting)
     e30:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
     e34:	19 c0       	rjmp	.+50     	; 0xe68 <control_rooms+0x19c>
		}
		else if (u8ReturnedValue == '2')	// if choice equal to two
     e36:	82 33       	cpi	r24, 0x32	; 50
     e38:	31 f4       	brne	.+12     	; 0xe46 <control_rooms+0x17a>
		{
		  USART_vidSendByte(u8TurnOff);		// send turn off status to slave
     e3a:	8f 2d       	mov	r24, r15
     e3c:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
		  USART_vidEnableTXInterrupt();		// enable TX interrupt (finish transmitting)
     e40:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
     e44:	11 c0       	rjmp	.+34     	; 0xe68 <control_rooms+0x19c>
		}
		else if (u8ReturnedValue == '0')	// if choice equal to zero
     e46:	80 33       	cpi	r24, 0x30	; 48
     e48:	a9 f0       	breq	.+42     	; 0xe74 <control_rooms+0x1a8>
		{
			break;							// break	
		}
		else								// if not 
		{
			LCD_vidClearScreen();			// clear LCD screen
     e4a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
			LCD_vidDisplayString("Wrong input");// display message on LCD screen
     e4e:	8a e3       	ldi	r24, 0x3A	; 58
     e50:	95 e0       	ldi	r25, 0x05	; 5
     e52:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
     e56:	2f ef       	ldi	r18, 0xFF	; 255
     e58:	89 e6       	ldi	r24, 0x69	; 105
     e5a:	98 e1       	ldi	r25, 0x18	; 24
     e5c:	21 50       	subi	r18, 0x01	; 1
     e5e:	80 40       	sbci	r24, 0x00	; 0
     e60:	90 40       	sbci	r25, 0x00	; 0
     e62:	e1 f7       	brne	.-8      	; 0xe5c <control_rooms+0x190>
     e64:	00 c0       	rjmp	.+0      	; 0xe66 <control_rooms+0x19a>
     e66:	00 00       	nop
			_delay_ms(1000);				// wait for one second
		}
	}while ( (u8ReturnedValue < '0') || (u8ReturnedValue > '2') );// loop repeated if choice less than 0 or grater than 2
     e68:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
     e6c:	80 53       	subi	r24, 0x30	; 48
     e6e:	83 30       	cpi	r24, 0x03	; 3
     e70:	08 f0       	brcs	.+2      	; 0xe74 <control_rooms+0x1a8>
     e72:	53 cf       	rjmp	.-346    	; 0xd1a <control_rooms+0x4e>
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	bf 90       	pop	r11
     e86:	af 90       	pop	r10
     e88:	9f 90       	pop	r9
     e8a:	08 95       	ret

00000e8c <DC_Motor_vidInit>:
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void DC_Motor_vidInit()
{
DIO_vidSetPinMode(DC_MOTOR_PORT,DC_MOTOR_PIN0,OUTPUT);
     e8c:	41 e0       	ldi	r20, 0x01	; 1
     e8e:	66 e0       	ldi	r22, 0x06	; 6
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
DIO_vidSetPinMode(DC_MOTOR_PORT,DC_MOTOR_PIN1,OUTPUT);
     e96:	41 e0       	ldi	r20, 0x01	; 1
     e98:	67 e0       	ldi	r22, 0x07	; 7
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
     ea0:	08 95       	ret

00000ea2 <DC_Motor_vidTurnOn>:
}
void DC_Motor_vidTurnOn()
{
    DIO_vidWritePin(DC_MOTOR_PORT,DC_MOTOR_PIN0,HIGH);
     ea2:	41 e0       	ldi	r20, 0x01	; 1
     ea4:	66 e0       	ldi	r22, 0x06	; 6
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
    DIO_vidWritePin(DC_MOTOR_PORT,DC_MOTOR_PIN1,LOW);
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	67 e0       	ldi	r22, 0x07	; 7
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
     eb6:	08 95       	ret

00000eb8 <DC_Motor_vidTurnOff>:
}
void DC_Motor_vidTurnOff()
{
    DIO_vidWritePin(DC_MOTOR_PORT,DC_MOTOR_PIN0,LOW);
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	66 e0       	ldi	r22, 0x06	; 6
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
    DIO_vidWritePin(DC_MOTOR_PORT,DC_MOTOR_PIN1,LOW);
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	67 e0       	ldi	r22, 0x07	; 7
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
     ecc:	08 95       	ret

00000ece <DIO_vidSetPinMode>:
        break;
    case GPIOC:
        PORTC = u8Value;
        break;
    case GPIOD:
        PORTD = u8Value;
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	01 f1       	breq	.+64     	; 0xf12 <DIO_vidSetPinMode+0x44>
     ed2:	30 f0       	brcs	.+12     	; 0xee0 <DIO_vidSetPinMode+0x12>
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	b1 f1       	breq	.+108    	; 0xf44 <DIO_vidSetPinMode+0x76>
     ed8:	83 30       	cpi	r24, 0x03	; 3
     eda:	09 f4       	brne	.+2      	; 0xede <DIO_vidSetPinMode+0x10>
     edc:	4c c0       	rjmp	.+152    	; 0xf76 <DIO_vidSetPinMode+0xa8>
     ede:	08 95       	ret
     ee0:	41 30       	cpi	r20, 0x01	; 1
     ee2:	59 f4       	brne	.+22     	; 0xefa <DIO_vidSetPinMode+0x2c>
     ee4:	2a b3       	in	r18, 0x1a	; 26
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_vidSetPinMode+0x22>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	6a 95       	dec	r22
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_vidSetPinMode+0x1e>
     ef4:	82 2b       	or	r24, r18
     ef6:	8a bb       	out	0x1a, r24	; 26
     ef8:	08 95       	ret
     efa:	2a b3       	in	r18, 0x1a	; 26
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_vidSetPinMode+0x38>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	6a 95       	dec	r22
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <DIO_vidSetPinMode+0x34>
     f0a:	80 95       	com	r24
     f0c:	82 23       	and	r24, r18
     f0e:	8a bb       	out	0x1a, r24	; 26
     f10:	08 95       	ret
     f12:	41 30       	cpi	r20, 0x01	; 1
     f14:	59 f4       	brne	.+22     	; 0xf2c <DIO_vidSetPinMode+0x5e>
     f16:	27 b3       	in	r18, 0x17	; 23
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_vidSetPinMode+0x54>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	6a 95       	dec	r22
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_vidSetPinMode+0x50>
     f26:	82 2b       	or	r24, r18
     f28:	87 bb       	out	0x17, r24	; 23
     f2a:	08 95       	ret
     f2c:	27 b3       	in	r18, 0x17	; 23
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <DIO_vidSetPinMode+0x6a>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	6a 95       	dec	r22
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <DIO_vidSetPinMode+0x66>
     f3c:	80 95       	com	r24
     f3e:	82 23       	and	r24, r18
     f40:	87 bb       	out	0x17, r24	; 23
     f42:	08 95       	ret
     f44:	41 30       	cpi	r20, 0x01	; 1
     f46:	59 f4       	brne	.+22     	; 0xf5e <DIO_vidSetPinMode+0x90>
     f48:	24 b3       	in	r18, 0x14	; 20
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_vidSetPinMode+0x86>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	6a 95       	dec	r22
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_vidSetPinMode+0x82>
     f58:	82 2b       	or	r24, r18
     f5a:	84 bb       	out	0x14, r24	; 20
     f5c:	08 95       	ret
     f5e:	24 b3       	in	r18, 0x14	; 20
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <DIO_vidSetPinMode+0x9c>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	6a 95       	dec	r22
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <DIO_vidSetPinMode+0x98>
     f6e:	80 95       	com	r24
     f70:	82 23       	and	r24, r18
     f72:	84 bb       	out	0x14, r24	; 20
     f74:	08 95       	ret
     f76:	41 30       	cpi	r20, 0x01	; 1
     f78:	59 f4       	brne	.+22     	; 0xf90 <DIO_vidSetPinMode+0xc2>
     f7a:	21 b3       	in	r18, 0x11	; 17
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_vidSetPinMode+0xb8>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	6a 95       	dec	r22
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_vidSetPinMode+0xb4>
     f8a:	82 2b       	or	r24, r18
     f8c:	81 bb       	out	0x11, r24	; 17
     f8e:	08 95       	ret
     f90:	21 b3       	in	r18, 0x11	; 17
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_vidSetPinMode+0xce>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	6a 95       	dec	r22
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_vidSetPinMode+0xca>
     fa0:	80 95       	com	r24
     fa2:	82 23       	and	r24, r18
     fa4:	81 bb       	out	0x11, r24	; 17
     fa6:	08 95       	ret

00000fa8 <DIO_vidWritePin>:
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	01 f1       	breq	.+64     	; 0xfec <DIO_vidWritePin+0x44>
     fac:	30 f0       	brcs	.+12     	; 0xfba <DIO_vidWritePin+0x12>
     fae:	82 30       	cpi	r24, 0x02	; 2
     fb0:	b1 f1       	breq	.+108    	; 0x101e <DIO_vidWritePin+0x76>
     fb2:	83 30       	cpi	r24, 0x03	; 3
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <DIO_vidWritePin+0x10>
     fb6:	4c c0       	rjmp	.+152    	; 0x1050 <DIO_vidWritePin+0xa8>
     fb8:	08 95       	ret
     fba:	41 30       	cpi	r20, 0x01	; 1
     fbc:	59 f4       	brne	.+22     	; 0xfd4 <DIO_vidWritePin+0x2c>
     fbe:	2b b3       	in	r18, 0x1b	; 27
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_vidWritePin+0x22>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	6a 95       	dec	r22
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_vidWritePin+0x1e>
     fce:	82 2b       	or	r24, r18
     fd0:	8b bb       	out	0x1b, r24	; 27
     fd2:	08 95       	ret
     fd4:	2b b3       	in	r18, 0x1b	; 27
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_vidWritePin+0x38>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	6a 95       	dec	r22
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_vidWritePin+0x34>
     fe4:	80 95       	com	r24
     fe6:	82 23       	and	r24, r18
     fe8:	8b bb       	out	0x1b, r24	; 27
     fea:	08 95       	ret
     fec:	41 30       	cpi	r20, 0x01	; 1
     fee:	59 f4       	brne	.+22     	; 0x1006 <DIO_vidWritePin+0x5e>
     ff0:	28 b3       	in	r18, 0x18	; 24
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_vidWritePin+0x54>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	6a 95       	dec	r22
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_vidWritePin+0x50>
    1000:	82 2b       	or	r24, r18
    1002:	88 bb       	out	0x18, r24	; 24
    1004:	08 95       	ret
    1006:	28 b3       	in	r18, 0x18	; 24
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_vidWritePin+0x6a>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	6a 95       	dec	r22
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_vidWritePin+0x66>
    1016:	80 95       	com	r24
    1018:	82 23       	and	r24, r18
    101a:	88 bb       	out	0x18, r24	; 24
    101c:	08 95       	ret
    101e:	41 30       	cpi	r20, 0x01	; 1
    1020:	59 f4       	brne	.+22     	; 0x1038 <DIO_vidWritePin+0x90>
    1022:	25 b3       	in	r18, 0x15	; 21
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_vidWritePin+0x86>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	6a 95       	dec	r22
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_vidWritePin+0x82>
    1032:	82 2b       	or	r24, r18
    1034:	85 bb       	out	0x15, r24	; 21
    1036:	08 95       	ret
    1038:	25 b3       	in	r18, 0x15	; 21
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_vidWritePin+0x9c>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	6a 95       	dec	r22
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_vidWritePin+0x98>
    1048:	80 95       	com	r24
    104a:	82 23       	and	r24, r18
    104c:	85 bb       	out	0x15, r24	; 21
    104e:	08 95       	ret
    1050:	41 30       	cpi	r20, 0x01	; 1
    1052:	59 f4       	brne	.+22     	; 0x106a <DIO_vidWritePin+0xc2>
    1054:	22 b3       	in	r18, 0x12	; 18
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_vidWritePin+0xb8>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	6a 95       	dec	r22
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_vidWritePin+0xb4>
    1064:	82 2b       	or	r24, r18
    1066:	82 bb       	out	0x12, r24	; 18
    1068:	08 95       	ret
    106a:	22 b3       	in	r18, 0x12	; 18
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_vidWritePin+0xce>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	6a 95       	dec	r22
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_vidWritePin+0xca>
    107a:	80 95       	com	r24
    107c:	82 23       	and	r24, r18
    107e:	82 bb       	out	0x12, r24	; 18
    1080:	08 95       	ret

00001082 <DIO_enuReadPin>:
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	c9 f0       	breq	.+50     	; 0x10b8 <DIO_enuReadPin+0x36>
    1086:	28 f0       	brcs	.+10     	; 0x1092 <DIO_enuReadPin+0x10>
    1088:	82 30       	cpi	r24, 0x02	; 2
    108a:	49 f1       	breq	.+82     	; 0x10de <DIO_enuReadPin+0x5c>
    108c:	83 30       	cpi	r24, 0x03	; 3
    108e:	d1 f1       	breq	.+116    	; 0x1104 <DIO_enuReadPin+0x82>
    1090:	4b c0       	rjmp	.+150    	; 0x1128 <DIO_enuReadPin+0xa6>
    1092:	29 b3       	in	r18, 0x19	; 25
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	06 2e       	mov	r0, r22
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_enuReadPin+0x1e>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_enuReadPin+0x1a>
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	82 23       	and	r24, r18
    10a8:	93 23       	and	r25, r19
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_enuReadPin+0x2e>
    10ac:	95 95       	asr	r25
    10ae:	87 95       	ror	r24
    10b0:	6a 95       	dec	r22
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_enuReadPin+0x2a>
    10b4:	98 2f       	mov	r25, r24
    10b6:	38 c0       	rjmp	.+112    	; 0x1128 <DIO_enuReadPin+0xa6>
    10b8:	26 b3       	in	r18, 0x16	; 22
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	06 2e       	mov	r0, r22
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_enuReadPin+0x44>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_enuReadPin+0x40>
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	82 23       	and	r24, r18
    10ce:	93 23       	and	r25, r19
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <DIO_enuReadPin+0x54>
    10d2:	95 95       	asr	r25
    10d4:	87 95       	ror	r24
    10d6:	6a 95       	dec	r22
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <DIO_enuReadPin+0x50>
    10da:	98 2f       	mov	r25, r24
    10dc:	25 c0       	rjmp	.+74     	; 0x1128 <DIO_enuReadPin+0xa6>
    10de:	23 b3       	in	r18, 0x13	; 19
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	06 2e       	mov	r0, r22
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_enuReadPin+0x6a>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_enuReadPin+0x66>
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	82 23       	and	r24, r18
    10f4:	93 23       	and	r25, r19
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_enuReadPin+0x7a>
    10f8:	95 95       	asr	r25
    10fa:	87 95       	ror	r24
    10fc:	6a 95       	dec	r22
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_enuReadPin+0x76>
    1100:	98 2f       	mov	r25, r24
    1102:	12 c0       	rjmp	.+36     	; 0x1128 <DIO_enuReadPin+0xa6>
    1104:	20 b3       	in	r18, 0x10	; 16
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	06 2e       	mov	r0, r22
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_enuReadPin+0x90>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_enuReadPin+0x8c>
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	82 23       	and	r24, r18
    111a:	93 23       	and	r25, r19
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_enuReadPin+0xa0>
    111e:	95 95       	asr	r25
    1120:	87 95       	ror	r24
    1122:	6a 95       	dec	r22
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_enuReadPin+0x9c>
    1126:	98 2f       	mov	r25, r24
    1128:	89 2f       	mov	r24, r25
    112a:	08 95       	ret

0000112c <DIO_vidSetLowNibbleMode>:
        break;
    }
}

void DIO_vidSetLowNibbleMode(_enuGPIOx enuPortNum , _enuIOx enuPinDirection)
{
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	18 2f       	mov	r17, r24
    1134:	d6 2f       	mov	r29, r22
    u8 u8Counter = 0;
    for (u8Counter = 0; u8Counter <= 3; u8Counter++)
    1136:	c0 e0       	ldi	r28, 0x00	; 0
    {
        DIO_vidSetPinMode(enuPortNum, u8Counter, enuPinDirection);
    1138:	4d 2f       	mov	r20, r29
    113a:	6c 2f       	mov	r22, r28
    113c:	81 2f       	mov	r24, r17
    113e:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
}

void DIO_vidSetLowNibbleMode(_enuGPIOx enuPortNum , _enuIOx enuPinDirection)
{
    u8 u8Counter = 0;
    for (u8Counter = 0; u8Counter <= 3; u8Counter++)
    1142:	cf 5f       	subi	r28, 0xFF	; 255
    1144:	c4 30       	cpi	r28, 0x04	; 4
    1146:	c1 f7       	brne	.-16     	; 0x1138 <DIO_vidSetLowNibbleMode+0xc>
    {
        DIO_vidSetPinMode(enuPortNum, u8Counter, enuPinDirection);
    }
    
}
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	08 95       	ret

00001150 <DIO_vidWriteLowNibble>:

void DIO_vidWriteLowNibble(_enuGPIOx enuPortNum, u8 u8Value)
{
    u8Value &= 0x0F;
    1150:	6f 70       	andi	r22, 0x0F	; 15
    switch (enuPortNum)
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	69 f0       	breq	.+26     	; 0x1170 <DIO_vidWriteLowNibble+0x20>
    1156:	28 f0       	brcs	.+10     	; 0x1162 <DIO_vidWriteLowNibble+0x12>
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	89 f0       	breq	.+34     	; 0x117e <DIO_vidWriteLowNibble+0x2e>
    115c:	83 30       	cpi	r24, 0x03	; 3
    115e:	b1 f0       	breq	.+44     	; 0x118c <DIO_vidWriteLowNibble+0x3c>
    1160:	08 95       	ret
    {
    case GPIOA:
        PORTA &= 0xF0;
    1162:	8b b3       	in	r24, 0x1b	; 27
    1164:	80 7f       	andi	r24, 0xF0	; 240
    1166:	8b bb       	out	0x1b, r24	; 27
        PORTA |= u8Value;
    1168:	8b b3       	in	r24, 0x1b	; 27
    116a:	68 2b       	or	r22, r24
    116c:	6b bb       	out	0x1b, r22	; 27
        break;
    116e:	08 95       	ret
    case GPIOB:
        PORTB &= 0xF0;
    1170:	88 b3       	in	r24, 0x18	; 24
    1172:	80 7f       	andi	r24, 0xF0	; 240
    1174:	88 bb       	out	0x18, r24	; 24
        PORTB |= u8Value;
    1176:	88 b3       	in	r24, 0x18	; 24
    1178:	68 2b       	or	r22, r24
    117a:	68 bb       	out	0x18, r22	; 24
        break;
    117c:	08 95       	ret
    case GPIOC:
        PORTC &= 0xF0;
    117e:	85 b3       	in	r24, 0x15	; 21
    1180:	80 7f       	andi	r24, 0xF0	; 240
    1182:	85 bb       	out	0x15, r24	; 21
        PORTC |= u8Value;
    1184:	85 b3       	in	r24, 0x15	; 21
    1186:	68 2b       	or	r22, r24
    1188:	65 bb       	out	0x15, r22	; 21
        break;
    118a:	08 95       	ret
    case GPIOD:
        PORTD &= 0xF0;
    118c:	82 b3       	in	r24, 0x12	; 18
    118e:	80 7f       	andi	r24, 0xF0	; 240
    1190:	82 bb       	out	0x12, r24	; 18
        PORTD |= u8Value;
    1192:	82 b3       	in	r24, 0x12	; 18
    1194:	68 2b       	or	r22, r24
    1196:	62 bb       	out	0x12, r22	; 18
    1198:	08 95       	ret

0000119a <DIO_vidSetHighNibbleMode>:
        break;
    }
}

void DIO_vidSetHighNibbleMode(_enuGPIOx enuPortNum , _enuIOx enuPinDirection)
{
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	18 2f       	mov	r17, r24
    11a2:	d6 2f       	mov	r29, r22
    u8 u8Counter = 4;
    for (u8Counter = 4; u8Counter <= 7; u8Counter++)
    11a4:	c4 e0       	ldi	r28, 0x04	; 4
    {
        DIO_vidSetPinMode(enuPortNum, u8Counter, enuPinDirection);
    11a6:	4d 2f       	mov	r20, r29
    11a8:	6c 2f       	mov	r22, r28
    11aa:	81 2f       	mov	r24, r17
    11ac:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
}

void DIO_vidSetHighNibbleMode(_enuGPIOx enuPortNum , _enuIOx enuPinDirection)
{
    u8 u8Counter = 4;
    for (u8Counter = 4; u8Counter <= 7; u8Counter++)
    11b0:	cf 5f       	subi	r28, 0xFF	; 255
    11b2:	c8 30       	cpi	r28, 0x08	; 8
    11b4:	c1 f7       	brne	.-16     	; 0x11a6 <DIO_vidSetHighNibbleMode+0xc>
    {
        DIO_vidSetPinMode(enuPortNum, u8Counter, enuPinDirection);
    }
}
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	08 95       	ret

000011be <DIO_vidWriteHighNibble>:

void DIO_vidWriteHighNibble(_enuGPIOx enuPortNum, u8 u8Value)
{
    u8Value &= 0xF0;
    11be:	60 7f       	andi	r22, 0xF0	; 240
    switch (enuPortNum)
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	69 f0       	breq	.+26     	; 0x11de <DIO_vidWriteHighNibble+0x20>
    11c4:	28 f0       	brcs	.+10     	; 0x11d0 <DIO_vidWriteHighNibble+0x12>
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	89 f0       	breq	.+34     	; 0x11ec <DIO_vidWriteHighNibble+0x2e>
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	b1 f0       	breq	.+44     	; 0x11fa <DIO_vidWriteHighNibble+0x3c>
    11ce:	08 95       	ret
    {
    case GPIOA:
        PORTA &= 0x0F;
    11d0:	8b b3       	in	r24, 0x1b	; 27
    11d2:	8f 70       	andi	r24, 0x0F	; 15
    11d4:	8b bb       	out	0x1b, r24	; 27
        PORTA |= u8Value;
    11d6:	8b b3       	in	r24, 0x1b	; 27
    11d8:	68 2b       	or	r22, r24
    11da:	6b bb       	out	0x1b, r22	; 27
        break;
    11dc:	08 95       	ret
    case GPIOB:
        PORTB &= 0x0F;
    11de:	88 b3       	in	r24, 0x18	; 24
    11e0:	8f 70       	andi	r24, 0x0F	; 15
    11e2:	88 bb       	out	0x18, r24	; 24
        PORTB |= u8Value;
    11e4:	88 b3       	in	r24, 0x18	; 24
    11e6:	68 2b       	or	r22, r24
    11e8:	68 bb       	out	0x18, r22	; 24
        break;
    11ea:	08 95       	ret
    case GPIOC:
        PORTC &= 0x0F;
    11ec:	85 b3       	in	r24, 0x15	; 21
    11ee:	8f 70       	andi	r24, 0x0F	; 15
    11f0:	85 bb       	out	0x15, r24	; 21
        PORTC |= u8Value;
    11f2:	85 b3       	in	r24, 0x15	; 21
    11f4:	68 2b       	or	r22, r24
    11f6:	65 bb       	out	0x15, r22	; 21
        break;
    11f8:	08 95       	ret
    case GPIOD:
        PORTD &= 0x0F;
    11fa:	82 b3       	in	r24, 0x12	; 18
    11fc:	8f 70       	andi	r24, 0x0F	; 15
    11fe:	82 bb       	out	0x12, r24	; 18
        PORTD |= u8Value;
    1200:	82 b3       	in	r24, 0x12	; 18
    1202:	68 2b       	or	r22, r24
    1204:	62 bb       	out	0x12, r22	; 18
    1206:	08 95       	ret

00001208 <EEPROM_vidWrite>:
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void EEPROM_vidWrite(u16 u16Address, u8 u8Data)
{
    EEARL = (u8) u16Address;
    1208:	8e bb       	out	0x1e, r24	; 30
    EEARH = (u8)(u16Address >>8);
    120a:	9f bb       	out	0x1f, r25	; 31
    EEDR = u8Data;
    120c:	6d bb       	out	0x1d, r22	; 29
    EECR = 0x04; // Set EEMWE by 1
    120e:	84 e0       	ldi	r24, 0x04	; 4
    1210:	8c bb       	out	0x1c, r24	; 28
    EECR |= 0x02; // Set EEWE by 1
    1212:	e1 9a       	sbi	0x1c, 1	; 28
    while(GET_BIT(EECR, EEWE) == 1);
    1214:	e1 99       	sbic	0x1c, 1	; 28
    1216:	fe cf       	rjmp	.-4      	; 0x1214 <EEPROM_vidWrite+0xc>
}
    1218:	08 95       	ret

0000121a <EEPROM_u8Read>:

u8 EEPROM_u8Read(u16 u16Address)
{
    EEARL = (u8) u16Address;
    121a:	8e bb       	out	0x1e, r24	; 30
    EEARH = (u8)(u16Address >>8); 
    121c:	9f bb       	out	0x1f, r25	; 31
    SET_BIT(EECR, EERE);
    121e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1220:	8d b3       	in	r24, 0x1d	; 29
    1222:	08 95       	ret

00001224 <KPD_vidInit>:
#include "KPD_config.h"
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void KPD_vidInit(_enuGPIOx enuPortNum, _enuNIBBLEx enuInputNibble)
{
    1224:	cf 93       	push	r28
    1226:	c8 2f       	mov	r28, r24
    if(enuInputNibble == LOW_NIBBLE)
    1228:	61 11       	cpse	r22, r1
    122a:	0b c0       	rjmp	.+22     	; 0x1242 <KPD_vidInit+0x1e>
    {
        DIO_vidSetLowNibbleMode(enuPortNum, INPUT); // Set Column Input
    122c:	0e 94 96 08 	call	0x112c	; 0x112c <DIO_vidSetLowNibbleMode>
        DIO_vidSetHighNibbleMode(enuPortNum, OUTPUT); // Set ROW as Output
    1230:	61 e0       	ldi	r22, 0x01	; 1
    1232:	8c 2f       	mov	r24, r28
    1234:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_vidSetHighNibbleMode>
        DIO_vidWriteLowNibble(enuPortNum, 0x0F); // Enable Internal Pull Up
    1238:	6f e0       	ldi	r22, 0x0F	; 15
    123a:	8c 2f       	mov	r24, r28
    123c:	0e 94 a8 08 	call	0x1150	; 0x1150 <DIO_vidWriteLowNibble>
    1240:	0b c0       	rjmp	.+22     	; 0x1258 <KPD_vidInit+0x34>
    }
    else
    {
        DIO_vidSetHighNibbleMode(enuPortNum, INPUT); // Set Column Input
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_vidSetHighNibbleMode>
        DIO_vidSetLowNibbleMode(enuPortNum, OUTPUT); // Set ROW as Output
    1248:	61 e0       	ldi	r22, 0x01	; 1
    124a:	8c 2f       	mov	r24, r28
    124c:	0e 94 96 08 	call	0x112c	; 0x112c <DIO_vidSetLowNibbleMode>
        DIO_vidWriteHighNibble(enuPortNum, 0xF0); // Enable Internal Pull Up
    1250:	60 ef       	ldi	r22, 0xF0	; 240
    1252:	8c 2f       	mov	r24, r28
    1254:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_vidWriteHighNibble>
    }
}
    1258:	cf 91       	pop	r28
    125a:	08 95       	ret

0000125c <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(_enuGPIOx enuPortNum, _enuNIBBLEx enuInputNibble)
{
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	60 97       	sbiw	r28, 0x10	; 16
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	08 2f       	mov	r16, r24
    u8 KeysArr[4][4]={{'7','8','9','A'},{'4','5','6','B'},{'1','2','3','C'},{'E','0','M','D'}};
    1278:	80 e1       	ldi	r24, 0x10	; 16
    127a:	e0 e6       	ldi	r30, 0x60	; 96
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	de 01       	movw	r26, r28
    1280:	11 96       	adiw	r26, 0x01	; 1
    1282:	01 90       	ld	r0, Z+
    1284:	0d 92       	st	X+, r0
    1286:	8a 95       	dec	r24
    1288:	e1 f7       	brne	.-8      	; 0x1282 <KPD_u8GetPressedKey+0x26>
    u8 u8Rows;
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
    if(enuInputNibble == LOW_NIBBLE)
    128a:	61 11       	cpse	r22, r1
    128c:	16 c0       	rjmp	.+44     	; 0x12ba <KPD_u8GetPressedKey+0x5e>
    128e:	f1 2c       	mov	r15, r1
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteHighNibble(enuPortNum, 0xF0);
    1290:	60 ef       	ldi	r22, 0xF0	; 240
    1292:	80 2f       	mov	r24, r16
    1294:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_vidWriteHighNibble>
            DIO_vidWritePin(enuPortNum, (u8Rows+4), LOW);
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	64 e0       	ldi	r22, 0x04	; 4
    129c:	6f 0d       	add	r22, r15
    129e:	80 2f       	mov	r24, r16
    12a0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
            for(u8Column = 0; u8Column <= 3; u8Column++)
    12a4:	10 e0       	ldi	r17, 0x00	; 0
            {
                enuReadValue = DIO_enuReadPin(enuPortNum, u8Column);
    12a6:	61 2f       	mov	r22, r17
    12a8:	80 2f       	mov	r24, r16
    12aa:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_enuReadPin>
                if(LOW == enuReadValue)
    12ae:	88 23       	and	r24, r24
    12b0:	d1 f0       	breq	.+52     	; 0x12e6 <KPD_u8GetPressedKey+0x8a>
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteHighNibble(enuPortNum, 0xF0);
            DIO_vidWritePin(enuPortNum, (u8Rows+4), LOW);
            for(u8Column = 0; u8Column <= 3; u8Column++)
    12b2:	1f 5f       	subi	r17, 0xFF	; 255
    12b4:	14 30       	cpi	r17, 0x04	; 4
    12b6:	b9 f7       	brne	.-18     	; 0x12a6 <KPD_u8GetPressedKey+0x4a>
    12b8:	23 c0       	rjmp	.+70     	; 0x1300 <KPD_u8GetPressedKey+0xa4>
    12ba:	f1 2c       	mov	r15, r1
    }
    else
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteLowNibble(enuPortNum, 0x0F);
    12bc:	6f e0       	ldi	r22, 0x0F	; 15
    12be:	80 2f       	mov	r24, r16
    12c0:	0e 94 a8 08 	call	0x1150	; 0x1150 <DIO_vidWriteLowNibble>
            DIO_vidWritePin(enuPortNum, (u8Rows), LOW);
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	6f 2d       	mov	r22, r15
    12c8:	80 2f       	mov	r24, r16
    12ca:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
            for(u8Column = 0; u8Column <= 3; u8Column++)
    12ce:	10 e0       	ldi	r17, 0x00	; 0
            {
                enuReadValue = DIO_enuReadPin(enuPortNum, (u8Column+4));
    12d0:	64 e0       	ldi	r22, 0x04	; 4
    12d2:	61 0f       	add	r22, r17
    12d4:	80 2f       	mov	r24, r16
    12d6:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_enuReadPin>
                if(LOW == enuReadValue)
    12da:	88 23       	and	r24, r24
    12dc:	b9 f0       	breq	.+46     	; 0x130c <KPD_u8GetPressedKey+0xb0>
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteLowNibble(enuPortNum, 0x0F);
            DIO_vidWritePin(enuPortNum, (u8Rows), LOW);
            for(u8Column = 0; u8Column <= 3; u8Column++)
    12de:	1f 5f       	subi	r17, 0xFF	; 255
    12e0:	14 30       	cpi	r17, 0x04	; 4
    12e2:	b1 f7       	brne	.-20     	; 0x12d0 <KPD_u8GetPressedKey+0x74>
    12e4:	20 c0       	rjmp	.+64     	; 0x1326 <KPD_u8GetPressedKey+0xca>
                {
                }
            }
            if (LOW == enuReadValue)
            {
                u8ReturnedValue = KeysArr[u8Rows][u8Column];
    12e6:	e1 e0       	ldi	r30, 0x01	; 1
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	ec 0f       	add	r30, r28
    12ec:	fd 1f       	adc	r31, r29
    12ee:	84 e0       	ldi	r24, 0x04	; 4
    12f0:	f8 9e       	mul	r15, r24
    12f2:	e0 0d       	add	r30, r0
    12f4:	f1 1d       	adc	r31, r1
    12f6:	11 24       	eor	r1, r1
    12f8:	e1 0f       	add	r30, r17
    12fa:	f1 1d       	adc	r31, r1
    12fc:	80 81       	ld	r24, Z
                break;
    12fe:	18 c0       	rjmp	.+48     	; 0x1330 <KPD_u8GetPressedKey+0xd4>
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
    if(enuInputNibble == LOW_NIBBLE)
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
    1300:	f3 94       	inc	r15
    1302:	84 e0       	ldi	r24, 0x04	; 4
    1304:	f8 12       	cpse	r15, r24
    1306:	c4 cf       	rjmp	.-120    	; 0x1290 <KPD_u8GetPressedKey+0x34>
{
    u8 KeysArr[4][4]={{'7','8','9','A'},{'4','5','6','B'},{'1','2','3','C'},{'E','0','M','D'}};
    u8 u8Rows;
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
    1308:	8f ef       	ldi	r24, 0xFF	; 255
    130a:	12 c0       	rjmp	.+36     	; 0x1330 <KPD_u8GetPressedKey+0xd4>
                {
                }
            }
            if (LOW == enuReadValue)
            {
                u8ReturnedValue = KeysArr[u8Rows][u8Column];
    130c:	e1 e0       	ldi	r30, 0x01	; 1
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	ec 0f       	add	r30, r28
    1312:	fd 1f       	adc	r31, r29
    1314:	84 e0       	ldi	r24, 0x04	; 4
    1316:	f8 9e       	mul	r15, r24
    1318:	e0 0d       	add	r30, r0
    131a:	f1 1d       	adc	r31, r1
    131c:	11 24       	eor	r1, r1
    131e:	e1 0f       	add	r30, r17
    1320:	f1 1d       	adc	r31, r1
    1322:	80 81       	ld	r24, Z
                break;
    1324:	05 c0       	rjmp	.+10     	; 0x1330 <KPD_u8GetPressedKey+0xd4>
            }
        }
    }
    else
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
    1326:	f3 94       	inc	r15
    1328:	84 e0       	ldi	r24, 0x04	; 4
    132a:	f8 12       	cpse	r15, r24
    132c:	c7 cf       	rjmp	.-114    	; 0x12bc <KPD_u8GetPressedKey+0x60>
{
    u8 KeysArr[4][4]={{'7','8','9','A'},{'4','5','6','B'},{'1','2','3','C'},{'E','0','M','D'}};
    u8 u8Rows;
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
    132e:	8f ef       	ldi	r24, 0xFF	; 255
            {
            }
        }
    }
    return u8ReturnedValue;
    1330:	60 96       	adiw	r28, 0x10	; 16
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	ff 90       	pop	r15
    1346:	08 95       	ret

00001348 <LCD_vidSendEnablePulse>:
    #endif
}

static void LCD_vidSendEnablePulse(void)
{
    DIO_vidWritePin(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	63 e0       	ldi	r22, 0x03	; 3
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
    1352:	8f e9       	ldi	r24, 0x9F	; 159
    1354:	9f e0       	ldi	r25, 0x0F	; 15
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <LCD_vidSendEnablePulse+0xe>
    135a:	00 c0       	rjmp	.+0      	; 0x135c <LCD_vidSendEnablePulse+0x14>
    135c:	00 00       	nop
    _delay_ms(2);
    DIO_vidWritePin(LCD_EN_PORT, LCD_EN_PIN, LOW);
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	63 e0       	ldi	r22, 0x03	; 3
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
    1368:	08 95       	ret

0000136a <LCD_vidSendCmd>:
    _delay_ms(10);
    LCD_vidSendCmd(LCD_ENTRY_MODE);
}

static void LCD_vidSendCmd(u8 u8Cmd)
{
    136a:	cf 93       	push	r28
    136c:	c8 2f       	mov	r28, r24
    DIO_vidWritePin(LCD_RW_PORT, LCD_RW_PIN, LOW); // Set Write Operation
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
    DIO_vidWritePin(LCD_RS_PORT, LCD_RS_PIN, LOW); // Select Command Register
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
            LCD_vidSendEnablePulse();
			_delay_ms(2);
            DIO_vidWriteLowNibble(LCD_DATA_PORT, (u8Cmd));
            LCD_vidSendEnablePulse();
        #else
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Cmd));
    1382:	6c 2f       	mov	r22, r28
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
    138a:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_vidSendEnablePulse>
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Cmd<<4));
    138e:	6c 2f       	mov	r22, r28
    1390:	62 95       	swap	r22
    1392:	60 7f       	andi	r22, 0xF0	; 240
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
    139a:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_vidSendEnablePulse>
        #endif
    #endif
}
    139e:	cf 91       	pop	r28
    13a0:	08 95       	ret

000013a2 <LCD_vidInit>:
    13a2:	2f ef       	ldi	r18, 0xFF	; 255
    13a4:	81 ee       	ldi	r24, 0xE1	; 225
    13a6:	94 e0       	ldi	r25, 0x04	; 4
    13a8:	21 50       	subi	r18, 0x01	; 1
    13aa:	80 40       	sbci	r24, 0x00	; 0
    13ac:	90 40       	sbci	r25, 0x00	; 0
    13ae:	e1 f7       	brne	.-8      	; 0x13a8 <LCD_vidInit+0x6>
    13b0:	00 c0       	rjmp	.+0      	; 0x13b2 <LCD_vidInit+0x10>
    13b2:	00 00       	nop
		/*                                                                      */
		/************************************************************************/
void LCD_vidInit(void)
{
    _delay_ms(200);
    DIO_vidSetPinMode(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    13b4:	41 e0       	ldi	r20, 0x01	; 1
    13b6:	61 e0       	ldi	r22, 0x01	; 1
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
    DIO_vidSetPinMode(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
    DIO_vidSetPinMode(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    13c8:	41 e0       	ldi	r20, 0x01	; 1
    13ca:	63 e0       	ldi	r22, 0x03	; 3
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
        _delay_ms(1);
    #else
        #if  NIBBLE_MODE  == LOW_NIBBLE
            DIO_vidSetLowNibbleMode(LCD_DATA_PORT, OUTPUT);
        #else
            DIO_vidSetHighNibbleMode(LCD_DATA_PORT, OUTPUT);
    13d2:	61 e0       	ldi	r22, 0x01	; 1
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_vidSetHighNibbleMode>
        #endif 
       LCD_vidSendCmd(LCD_RETURN_HOME);
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidSendCmd>
    13e0:	8f e2       	ldi	r24, 0x2F	; 47
    13e2:	95 e7       	ldi	r25, 0x75	; 117
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <LCD_vidInit+0x42>
    13e8:	00 c0       	rjmp	.+0      	; 0x13ea <LCD_vidInit+0x48>
    13ea:	00 00       	nop
        _delay_ms(15);
		LCD_vidSendCmd(LCD_FUNCTION_4BIT_2LINES);
    13ec:	88 e2       	ldi	r24, 0x28	; 40
    13ee:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidSendCmd>
    13f2:	8f ec       	ldi	r24, 0xCF	; 207
    13f4:	97 e0       	ldi	r25, 0x07	; 7
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <LCD_vidInit+0x54>
    13fa:	00 c0       	rjmp	.+0      	; 0x13fc <LCD_vidInit+0x5a>
    13fc:	00 00       	nop
        _delay_ms(1);
        
    #endif
    LCD_vidSendCmd(LCD_DISP_ON_CURSOR_ON);
    13fe:	8e e0       	ldi	r24, 0x0E	; 14
    1400:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidSendCmd>
    1404:	8f ec       	ldi	r24, 0xCF	; 207
    1406:	97 e0       	ldi	r25, 0x07	; 7
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <LCD_vidInit+0x66>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <LCD_vidInit+0x6c>
    140e:	00 00       	nop
    _delay_ms(1);
    LCD_vidSendCmd(LCD_CLEAR_SCREEN);
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidSendCmd>
    1416:	8f e1       	ldi	r24, 0x1F	; 31
    1418:	9e e4       	ldi	r25, 0x4E	; 78
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <LCD_vidInit+0x78>
    141e:	00 c0       	rjmp	.+0      	; 0x1420 <LCD_vidInit+0x7e>
    1420:	00 00       	nop
    _delay_ms(10);
    LCD_vidSendCmd(LCD_ENTRY_MODE);
    1422:	86 e0       	ldi	r24, 0x06	; 6
    1424:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidSendCmd>
    1428:	08 95       	ret

0000142a <LCD_vidDisplayCharacter>:
    _delay_ms(2);
    DIO_vidWritePin(LCD_EN_PORT, LCD_EN_PIN, LOW);
}

void LCD_vidDisplayCharacter(u8 u8Char)
{
    142a:	cf 93       	push	r28
    142c:	c8 2f       	mov	r28, r24
    DIO_vidWritePin(LCD_RW_PORT, LCD_RW_PIN, LOW); // Set Write Operation
    142e:	40 e0       	ldi	r20, 0x00	; 0
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
    DIO_vidWritePin(LCD_RS_PORT, LCD_RS_PIN, HIGH); // Select Data Register
    1438:	41 e0       	ldi	r20, 0x01	; 1
    143a:	61 e0       	ldi	r22, 0x01	; 1
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
            DIO_vidWriteLowNibble(LCD_DATA_PORT, (u8Char>>4));
            LCD_vidSendEnablePulse();
            DIO_vidWriteLowNibble(LCD_DATA_PORT, (u8Char));
            LCD_vidSendEnablePulse();
        #else
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Char));
    1442:	6c 2f       	mov	r22, r28
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
    144a:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_vidSendEnablePulse>
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Char<<4));
    144e:	6c 2f       	mov	r22, r28
    1450:	62 95       	swap	r22
    1452:	60 7f       	andi	r22, 0xF0	; 240
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
    145a:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_vidSendEnablePulse>
        #endif
    #endif
}
    145e:	cf 91       	pop	r28
    1460:	08 95       	ret

00001462 <LCD_vidDisplayString>:

void LCD_vidDisplayString(u8 *u8PtrString)
{
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	ec 01       	movw	r28, r24
    while(*u8PtrString != '\0')
    1468:	88 81       	ld	r24, Y
    146a:	88 23       	and	r24, r24
    146c:	31 f0       	breq	.+12     	; 0x147a <LCD_vidDisplayString+0x18>
    146e:	21 96       	adiw	r28, 0x01	; 1
    {
        LCD_vidDisplayCharacter(*u8PtrString);
    1470:	0e 94 15 0a 	call	0x142a	; 0x142a <LCD_vidDisplayCharacter>
    #endif
}

void LCD_vidDisplayString(u8 *u8PtrString)
{
    while(*u8PtrString != '\0')
    1474:	89 91       	ld	r24, Y+
    1476:	81 11       	cpse	r24, r1
    1478:	fb cf       	rjmp	.-10     	; 0x1470 <LCD_vidDisplayString+0xe>
    {
        LCD_vidDisplayCharacter(*u8PtrString);
        u8PtrString++;
    }
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	08 95       	ret

00001480 <LCD_vidDisplayNumber>:

void LCD_vidDisplayNumber(u32 u32Number)
{
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	27 97       	sbiw	r28, 0x07	; 7
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
	u8 u8arr[7];
	sprintf(u8arr, "%d", u32Number);
    1498:	9f 93       	push	r25
    149a:	8f 93       	push	r24
    149c:	7f 93       	push	r23
    149e:	6f 93       	push	r22
    14a0:	86 e4       	ldi	r24, 0x46	; 70
    14a2:	95 e0       	ldi	r25, 0x05	; 5
    14a4:	9f 93       	push	r25
    14a6:	8f 93       	push	r24
    14a8:	8e 01       	movw	r16, r28
    14aa:	0f 5f       	subi	r16, 0xFF	; 255
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	1f 93       	push	r17
    14b0:	0f 93       	push	r16
    14b2:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <sprintf>
	LCD_vidDisplayString(u8arr);
    14b6:	c8 01       	movw	r24, r16
    14b8:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
}
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	27 96       	adiw	r28, 0x07	; 7
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	08 95       	ret

000014dc <LCD_vidClearScreen>:

void LCD_vidClearScreen(void)
{
	LCD_vidSendCmd(LCD_CLEAR_SCREEN);
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidSendCmd>
    14e2:	8f e1       	ldi	r24, 0x1F	; 31
    14e4:	9e e4       	ldi	r25, 0x4E	; 78
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <LCD_vidClearScreen+0xa>
    14ea:	00 c0       	rjmp	.+0      	; 0x14ec <LCD_vidClearScreen+0x10>
    14ec:	00 00       	nop
    14ee:	08 95       	ret

000014f0 <LCD_vidMoveCursor>:
	_delay_ms(10);
}
void LCD_vidMoveCursor(u8 u8Line, u8 u8Position)
{
	u8 u8PositionCmd;
	if(u8Line == 1)
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	19 f4       	brne	.+6      	; 0x14fa <LCD_vidMoveCursor+0xa>
	{
		u8PositionCmd = 0x80 + (u8Position-1);
    14f4:	8f e7       	ldi	r24, 0x7F	; 127
    14f6:	86 0f       	add	r24, r22
    14f8:	0c c0       	rjmp	.+24     	; 0x1512 <LCD_vidMoveCursor+0x22>
	}
	else if(u8Line == 2)
    14fa:	82 30       	cpi	r24, 0x02	; 2
    14fc:	19 f4       	brne	.+6      	; 0x1504 <LCD_vidMoveCursor+0x14>
	{
		u8PositionCmd = 0xC0 + (u8Position-1);	
    14fe:	8f eb       	ldi	r24, 0xBF	; 191
    1500:	86 0f       	add	r24, r22
    1502:	07 c0       	rjmp	.+14     	; 0x1512 <LCD_vidMoveCursor+0x22>
	}
	else if(u8Line == 3)
    1504:	83 30       	cpi	r24, 0x03	; 3
    1506:	19 f4       	brne	.+6      	; 0x150e <LCD_vidMoveCursor+0x1e>
	{
		u8PositionCmd = 0x90 + (u8Position-1);	
    1508:	8f e8       	ldi	r24, 0x8F	; 143
    150a:	86 0f       	add	r24, r22
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <LCD_vidMoveCursor+0x22>
	}
	else 
	{
		u8PositionCmd = 0xD0 + (u8Position-1);
    150e:	8f ec       	ldi	r24, 0xCF	; 207
    1510:	86 0f       	add	r24, r22
	}
	LCD_vidSendCmd(u8PositionCmd);
    1512:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidSendCmd>
    1516:	08 95       	ret

00001518 <LED_vidInit>:
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void LED_vidInit(_enuGPIOx enuPortNum, _enuPINx enuPinNum)
{
    DIO_vidSetPinMode(enuPortNum, enuPinNum, OUTPUT);   
    1518:	41 e0       	ldi	r20, 0x01	; 1
    151a:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
    151e:	08 95       	ret

00001520 <LED_vidTurnOn>:
}
void LED_vidTurnOn(_enuGPIOx enuPortNum, _enuPINx enuPinNum)
{
    DIO_vidWritePin(enuPortNum, enuPinNum, HIGH);
    1520:	41 e0       	ldi	r20, 0x01	; 1
    1522:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
    1526:	08 95       	ret

00001528 <LED_vidTurnOff>:
}
void LED_vidTurnOff(_enuGPIOx enuPortNum, _enuPINx enuPinNum)
{
    DIO_vidWritePin(enuPortNum, enuPinNum, LOW);
    1528:	40 e0       	ldi	r20, 0x00	; 0
    152a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
    152e:	08 95       	ret

00001530 <LM35_vidInit>:
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void LM35_vidInit(_enuADCChannels enuADCChannel)
{
    ADC_vidInit(enuADCChannel);
    1530:	0e 94 92 00 	call	0x124	; 0x124 <ADC_vidInit>
    1534:	08 95       	ret

00001536 <LM35_u8Read>:
}
u8 LM35_u8Read(void)
{
    u8 u8Temperature;
    u16 u16Value;
    u16Value = ADC_u16Read();
    1536:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <ADC_u16Read>
    u8Temperature = (u8)((float)u16Value * 0.25f);
    return u8Temperature;
    153a:	bc 01       	movw	r22, r24
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__floatunsisf>
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e8       	ldi	r20, 0x80	; 128
    154a:	5e e3       	ldi	r21, 0x3E	; 62
    154c:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
    1550:	0e 94 aa 12 	call	0x2554	; 0x2554 <__fixunssfsi>
    1554:	86 2f       	mov	r24, r22
}
    1556:	08 95       	ret

00001558 <devices>:
		start_control();
	}
}
void devices(void)
{
	LCD_vidClearScreen();					// clear LCD screen
    1558:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
	LCD_vidMoveCursor(1,1);					// move cursor
    155c:	61 e0       	ldi	r22, 0x01	; 1
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("R1: OFF");		// display string on LCD
    1564:	8d e3       	ldi	r24, 0x3D	; 61
    1566:	91 e0       	ldi	r25, 0x01	; 1
    1568:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(1,8);					// move cursor
    156c:	68 e0       	ldi	r22, 0x08	; 8
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(" R2: OFF");		// display string on LCD
    1574:	8e e4       	ldi	r24, 0x4E	; 78
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);					// move cursor
    157c:	61 e0       	ldi	r22, 0x01	; 1
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("R3: OFF");		// display string on LCD
    1584:	8f e5       	ldi	r24, 0x5F	; 95
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,8);					// move cursor
    158c:	68 e0       	ldi	r22, 0x08	; 8
    158e:	82 e0       	ldi	r24, 0x02	; 2
    1590:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(" R4: OFF");		// display string on LCD
    1594:	80 e7       	ldi	r24, 0x70	; 112
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);					// move cursor
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	83 e0       	ldi	r24, 0x03	; 3
    15a0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("R5: OFF");		// display string on LCD
    15a4:	81 e8       	ldi	r24, 0x81	; 129
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,8);					// move cursor
    15ac:	68 e0       	ldi	r22, 0x08	; 8
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(" R6: OFF");		// display string on LCD
    15b4:	82 e9       	ldi	r24, 0x92	; 146
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);					// move cursor
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	84 e0       	ldi	r24, 0x04	; 4
    15c0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("Air:OFF ");		// display string on LCD
    15c4:	80 ea       	ldi	r24, 0xA0	; 160
    15c6:	93 e0       	ldi	r25, 0x03	; 3
    15c8:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,9);					// move cursor
    15cc:	69 e0       	ldi	r22, 0x09	; 9
    15ce:	84 e0       	ldi	r24, 0x04	; 4
    15d0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("AL: OFF");		// display string on LCD
    15d4:	84 e6       	ldi	r24, 0x64	; 100
    15d6:	92 e0       	ldi	r25, 0x02	; 2
    15d8:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
    15dc:	08 95       	ret

000015de <start_control>:
		/*Function Description: void function take void and return void
								start system with control						*/
		/************************************************************************/
void start_control()
{
	LCD_vidMoveCursor(1,1);					// move LCD cursor
    15de:	61 e0       	ldi	r22, 0x01	; 1
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(" Welcome to ODC ");// display message on screen
    15e6:	83 e5       	ldi	r24, 0x53	; 83
    15e8:	95 e0       	ldi	r25, 0x05	; 5
    15ea:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);					// move LCD cursor
    15ee:	61 e0       	ldi	r22, 0x01	; 1
    15f0:	82 e0       	ldi	r24, 0x02	; 2
    15f2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("   smart home ");	// display message on screen
    15f6:	84 e6       	ldi	r24, 0x64	; 100
    15f8:	95 e0       	ldi	r25, 0x05	; 5
    15fa:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);					// move LCD cursor
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	83 e0       	ldi	r24, 0x03	; 3
    1602:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("1.login remotely");// display message on screen
    1606:	83 e7       	ldi	r24, 0x73	; 115
    1608:	95 e0       	ldi	r25, 0x05	; 5
    160a:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);					// move LCD cursor
    160e:	61 e0       	ldi	r22, 0x01	; 1
    1610:	84 e0       	ldi	r24, 0x04	; 4
    1612:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("2.login by KPD ");// display message on screen
    1616:	84 e8       	ldi	r24, 0x84	; 132
    1618:	95 e0       	ldi	r25, 0x05	; 5
    161a:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	u8ReturnedValue = u8GetKeyPressed();	// take choice from user
    161e:	0e 94 52 06 	call	0xca4	; 0xca4 <u8GetKeyPressed>
    1622:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
    1626:	2f e7       	ldi	r18, 0x7F	; 127
    1628:	89 ea       	ldi	r24, 0xA9	; 169
    162a:	93 e0       	ldi	r25, 0x03	; 3
    162c:	21 50       	subi	r18, 0x01	; 1
    162e:	80 40       	sbci	r24, 0x00	; 0
    1630:	90 40       	sbci	r25, 0x00	; 0
    1632:	e1 f7       	brne	.-8      	; 0x162c <start_control+0x4e>
    1634:	00 c0       	rjmp	.+0      	; 0x1636 <start_control+0x58>
    1636:	00 00       	nop
	_delay_ms(150);							// wait for 150 m second
	if (u8ReturnedValue=='1')				// if choice equal to 1
    1638:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
    163c:	81 33       	cpi	r24, 0x31	; 49
    163e:	61 f5       	brne	.+88     	; 0x1698 <start_control+0xba>
	{  
		USART_vidSendByte('1');				// send data to slave
    1640:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
		USART_vidEnableTXInterrupt();		// enable TX interrupt (finish transmit)
    1644:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
		LCD_vidClearScreen();				// clear LCD screen
    1648:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		LCD_vidMoveCursor(1,2);				// move cursor
    164c:	62 e0       	ldi	r22, 0x02	; 2
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString(" connected ");// display message on LCD
    1654:	84 e9       	ldi	r24, 0x94	; 148
    1656:	95 e0       	ldi	r25, 0x05	; 5
    1658:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,2);				// move cursor
    165c:	62 e0       	ldi	r22, 0x02	; 2
    165e:	82 e0       	ldi	r24, 0x02	; 2
    1660:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString(" remotely "); // display message on LCD
    1664:	80 ea       	ldi	r24, 0xA0	; 160
    1666:	95 e0       	ldi	r25, 0x05	; 5
    1668:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(3,2);				// move cursor
    166c:	62 e0       	ldi	r22, 0x02	; 2
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString(" Successfully ");// display message on LCD
    1674:	8a ee       	ldi	r24, 0xEA	; 234
    1676:	93 e0       	ldi	r25, 0x03	; 3
    1678:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
    167c:	2f e7       	ldi	r18, 0x7F	; 127
    167e:	89 ea       	ldi	r24, 0xA9	; 169
    1680:	93 e0       	ldi	r25, 0x03	; 3
    1682:	21 50       	subi	r18, 0x01	; 1
    1684:	80 40       	sbci	r24, 0x00	; 0
    1686:	90 40       	sbci	r25, 0x00	; 0
    1688:	e1 f7       	brne	.-8      	; 0x1682 <start_control+0xa4>
    168a:	00 c0       	rjmp	.+0      	; 0x168c <start_control+0xae>
    168c:	00 00       	nop
		_delay_ms(150);
		devices();
    168e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <devices>
		Bluetooth_Control();				// control system remotely 
    1692:	0e 94 a9 05 	call	0xb52	; 0xb52 <Bluetooth_Control>
    1696:	08 95       	ret
	}
	else if(u8ReturnedValue=='2')			// if choice equal to 2
    1698:	82 33       	cpi	r24, 0x32	; 50
    169a:	49 f4       	brne	.+18     	; 0x16ae <start_control+0xd0>
	{
		USART_vidSendByte('2');				// send data to slave
    169c:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
		USART_vidEnableTXInterrupt();		// enable TX interrupt (finish transmit)
    16a0:	0e 94 2a 12 	call	0x2454	; 0x2454 <USART_vidEnableTXInterrupt>
		LCD_vidClearScreen();				// clear LCD screen
    16a4:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		start();							// start the system
    16a8:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <start>
    16ac:	08 95       	ret
	}
	else
	{
		LCD_vidClearScreen();
    16ae:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		LCD_vidDisplayString("Wrong input");
    16b2:	8a e3       	ldi	r24, 0x3A	; 58
    16b4:	95 e0       	ldi	r25, 0x05	; 5
    16b6:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
    16ba:	2f e7       	ldi	r18, 0x7F	; 127
    16bc:	89 ea       	ldi	r24, 0xA9	; 169
    16be:	93 e0       	ldi	r25, 0x03	; 3
    16c0:	21 50       	subi	r18, 0x01	; 1
    16c2:	80 40       	sbci	r24, 0x00	; 0
    16c4:	90 40       	sbci	r25, 0x00	; 0
    16c6:	e1 f7       	brne	.-8      	; 0x16c0 <start_control+0xe2>
    16c8:	00 c0       	rjmp	.+0      	; 0x16ca <start_control+0xec>
    16ca:	00 00       	nop
		_delay_ms(150);
		start_control();
    16cc:	0e 94 ef 0a 	call	0x15de	; 0x15de <start_control>
    16d0:	08 95       	ret

000016d2 <main>:
		/*                       main function                                  */
		/************************************************************************/
void fun(void);
int main(void)
{
	LM35_vidInit(ADC_CH0);					// initialize LM35 (temp sensor)
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	0e 94 98 0a 	call	0x1530	; 0x1530 <LM35_vidInit>
	USART_vidInit(9600);					// initialize UART protocol with baud rate 9600
    16d8:	60 e8       	ldi	r22, 0x80	; 128
    16da:	75 e2       	ldi	r23, 0x25	; 37
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <USART_vidInit>
	LCD_vidInit();							// initialize LCD
    16e4:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <LCD_vidInit>
	KPD_vidInit(GPIOC, HIGH_NIBBLE);		// initialize KPD 
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	82 e0       	ldi	r24, 0x02	; 2
    16ec:	0e 94 12 09 	call	0x1224	; 0x1224 <KPD_vidInit>
	Servo_Init();							// initialize servo motor
    16f0:	0e 94 9e 0b 	call	0x173c	; 0x173c <Servo_Init>
	LED_vidInit(GPIOD, PIN3);				// initialize LED at port D pin 3       
    16f4:	63 e0       	ldi	r22, 0x03	; 3
    16f6:	83 e0       	ldi	r24, 0x03	; 3
    16f8:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LED_vidInit>
	LED_vidInit(GPIOD, PIN4);				// initialize LED at port D pin 4
    16fc:	64 e0       	ldi	r22, 0x04	; 4
    16fe:	83 e0       	ldi	r24, 0x03	; 3
    1700:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LED_vidInit>
	LED_vidInit(GPIOB, PIN5);				// initialize LED at port B pin 5
    1704:	65 e0       	ldi	r22, 0x05	; 5
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LED_vidInit>
	LED_vidInit(GPIOD, PIN2);				// initialize LED at port D pin 2	
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LED_vidInit>
	LED_vidInit(GPIOD, PIN6);				// initialize LED at port D pin 6
    1714:	66 e0       	ldi	r22, 0x06	; 6
    1716:	83 e0       	ldi	r24, 0x03	; 3
    1718:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LED_vidInit>
	DIO_vidSetPinMode(GPIOD, PIN7, OUTPUT);	// initialize pin 7 at port D as output
    171c:	41 e0       	ldi	r20, 0x01	; 1
    171e:	67 e0       	ldi	r22, 0x07	; 7
    1720:	83 e0       	ldi	r24, 0x03	; 3
    1722:	0e 94 67 07 	call	0xece	; 0xece <DIO_vidSetPinMode>
	start_control();						// start the system
    1726:	0e 94 ef 0a 	call	0x15de	; 0x15de <start_control>
	while (1)								// while loop still work if system used
    {
		u8 wrong_pass_count = smart_lock();	// if pass wrong and exceed tries safe go on lock mode
    172a:	0e 94 26 11 	call	0x224c	; 0x224c <smart_lock>
		if (wrong_pass_count == 0 || wrong_pass_count == 3)	// if wrong_pass_count equal to (0 when pass correct) or (3 when user exceed number of tries)
    172e:	88 23       	and	r24, r24
    1730:	11 f0       	breq	.+4      	; 0x1736 <main+0x64>
    1732:	83 30       	cpi	r24, 0x03	; 3
    1734:	d1 f7       	brne	.-12     	; 0x172a <main+0x58>
		{
			break;							// stop the loop
		}	
	}
}
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	08 95       	ret

0000173c <Servo_Init>:
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void Servo_Init(void)
{
	DDRD |= (1<<PD5);								/* Initialise OC1A pin as output */
    173c:	8d 9a       	sbi	0x11, 5	; 17
	TCNT1 = 0;										/* Set timer1 count zero */
    173e:	1d bc       	out	0x2d, r1	; 45
    1740:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;									/* Set TOP count for timer1 in ICR1 register */
    1742:	83 ec       	ldi	r24, 0xC3	; 195
    1744:	99 e0       	ldi	r25, 0x09	; 9
    1746:	97 bd       	out	0x27, r25	; 39
    1748:	86 bd       	out	0x26, r24	; 38
	TCCR1A = (1<<WGM11)|(1<<COM1A1);				/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, prescaler=64, timer=125kHz */
    174a:	82 e8       	ldi	r24, 0x82	; 130
    174c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
    174e:	8b e1       	ldi	r24, 0x1B	; 27
    1750:	8e bd       	out	0x2e, r24	; 46
    1752:	08 95       	ret

00001754 <Servo_Clockwise>:
}
void Servo_Clockwise(u8 angle)
{
	if(angle>Max_Angle)
    1754:	8b 35       	cpi	r24, 0x5B	; 91
    1756:	b0 f4       	brcc	.+44     	; 0x1784 <Servo_Clockwise+0x30>
	{
		angle=Max_Angle;
	}
	else
	{
		OCR1A = (1.2912*angle)+Position_OCR1A;  //Servo rotates in clockwise direction, min angle=0 max angle=90
    1758:	68 2f       	mov	r22, r24
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__floatsisf>
    1764:	2b e0       	ldi	r18, 0x0B	; 11
    1766:	36 e4       	ldi	r19, 0x46	; 70
    1768:	45 ea       	ldi	r20, 0xA5	; 165
    176a:	5f e3       	ldi	r21, 0x3F	; 63
    176c:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	46 e3       	ldi	r20, 0x36	; 54
    1776:	53 e4       	ldi	r21, 0x43	; 67
    1778:	0e 94 3e 12 	call	0x247c	; 0x247c <__addsf3>
    177c:	0e 94 aa 12 	call	0x2554	; 0x2554 <__fixunssfsi>
    1780:	7b bd       	out	0x2b, r23	; 43
    1782:	6a bd       	out	0x2a, r22	; 42
    1784:	08 95       	ret

00001786 <Servo_Counterclockwise>:

}

void Servo_Counterclockwise(u8 angle)
{
	if(angle>Max_Angle)
    1786:	8b 35       	cpi	r24, 0x5B	; 91
    1788:	b0 f4       	brcc	.+44     	; 0x17b6 <Servo_Counterclockwise+0x30>
	{
		angle=Max_Angle;
	}
	else
	{
		OCR1A = (-1.2912*angle)+Position_OCR1A;  //Servo rotates in counterclockwise direction, min angle=-90 max angle=0
    178a:	68 2f       	mov	r22, r24
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__floatsisf>
    1796:	2b e0       	ldi	r18, 0x0B	; 11
    1798:	36 e4       	ldi	r19, 0x46	; 70
    179a:	45 ea       	ldi	r20, 0xA5	; 165
    179c:	5f eb       	ldi	r21, 0xBF	; 191
    179e:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	46 e3       	ldi	r20, 0x36	; 54
    17a8:	53 e4       	ldi	r21, 0x43	; 67
    17aa:	0e 94 3e 12 	call	0x247c	; 0x247c <__addsf3>
    17ae:	0e 94 aa 12 	call	0x2554	; 0x2554 <__fixunssfsi>
    17b2:	7b bd       	out	0x2b, r23	; 43
    17b4:	6a bd       	out	0x2a, r22	; 42
    17b6:	08 95       	ret

000017b8 <Scan_pass>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								scan pass from user								*/
		/************************************************************************/
void Scan_pass()
{
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	cf 93       	push	r28
    17be:	08 ee       	ldi	r16, 0xE8	; 232
    17c0:	17 e0       	ldi	r17, 0x07	; 7
    17c2:	c3 e0       	ldi	r28, 0x03	; 3
	for (u8 i=0;i<4;i++)		// loop to take pass from user 
	{
		do						// loop to take value of pressed key working until key pressed
		{
			u8ReturnedValue = KPD_u8GetPressedKey(GPIOC, HIGH_NIBBLE);	// store value of pressed key in u8ReturnedValue
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	0e 94 2e 09 	call	0x125c	; 0x125c <KPD_u8GetPressedKey>
    17cc:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
    17d0:	2f ef       	ldi	r18, 0xFF	; 255
    17d2:	81 ee       	ldi	r24, 0xE1	; 225
    17d4:	94 e0       	ldi	r25, 0x04	; 4
    17d6:	21 50       	subi	r18, 0x01	; 1
    17d8:	80 40       	sbci	r24, 0x00	; 0
    17da:	90 40       	sbci	r25, 0x00	; 0
    17dc:	e1 f7       	brne	.-8      	; 0x17d6 <Scan_pass+0x1e>
    17de:	00 c0       	rjmp	.+0      	; 0x17e0 <Scan_pass+0x28>
    17e0:	00 00       	nop
			_delay_ms(200);								// delay 200m second to can detect change
		} while (u8ReturnedValue == NOT_PRESSED);		// condition to break the loop
    17e2:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
    17e6:	8f 3f       	cpi	r24, 0xFF	; 255
    17e8:	69 f3       	breq	.-38     	; 0x17c4 <Scan_pass+0xc>
			LCD_vidDisplayCharacter(u8ReturnedValue);	// display pressed value on LCD
    17ea:	0e 94 15 0a 	call	0x142a	; 0x142a <LCD_vidDisplayCharacter>
    17ee:	ef e7       	ldi	r30, 0x7F	; 127
    17f0:	f9 ea       	ldi	r31, 0xA9	; 169
    17f2:	23 e0       	ldi	r18, 0x03	; 3
    17f4:	e1 50       	subi	r30, 0x01	; 1
    17f6:	f0 40       	sbci	r31, 0x00	; 0
    17f8:	20 40       	sbci	r18, 0x00	; 0
    17fa:	e1 f7       	brne	.-8      	; 0x17f4 <Scan_pass+0x3c>
    17fc:	00 c0       	rjmp	.+0      	; 0x17fe <Scan_pass+0x46>
    17fe:	00 00       	nop
			_delay_ms(150);								// delay 250m second for user see what number enter 
			LCD_vidMoveCursor(4, i+3);					// move LCD cursor to position of value entered 
    1800:	6c 2f       	mov	r22, r28
    1802:	84 e0       	ldi	r24, 0x04	; 4
    1804:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayCharacter('*');				// display symbol * instead of entered number 
    1808:	8a e2       	ldi	r24, 0x2A	; 42
    180a:	0e 94 15 0a 	call	0x142a	; 0x142a <LCD_vidDisplayCharacter>
			pass[i] = u8ReturnedValue;					// store value in array called pass
    180e:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
    1812:	f8 01       	movw	r30, r16
    1814:	81 93       	st	Z+, r24
    1816:	8f 01       	movw	r16, r30
    1818:	cf 5f       	subi	r28, 0xFF	; 255
		/*Function Description: void function take void and return void
								scan pass from user								*/
		/************************************************************************/
void Scan_pass()
{
	for (u8 i=0;i<4;i++)		// loop to take pass from user 
    181a:	c7 30       	cpi	r28, 0x07	; 7
    181c:	99 f6       	brne	.-90     	; 0x17c4 <Scan_pass+0xc>
			_delay_ms(150);								// delay 250m second for user see what number enter 
			LCD_vidMoveCursor(4, i+3);					// move LCD cursor to position of value entered 
			LCD_vidDisplayCharacter('*');				// display symbol * instead of entered number 
			pass[i] = u8ReturnedValue;					// store value in array called pass
	}
}
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	08 95       	ret

00001826 <Scan_user>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								scan user from user								*/
		/************************************************************************/
void Scan_user()
	{
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	c0 ef       	ldi	r28, 0xF0	; 240
    1830:	d7 e0       	ldi	r29, 0x07	; 7
    1832:	04 ef       	ldi	r16, 0xF4	; 244
    1834:	17 e0       	ldi	r17, 0x07	; 7
		for (u8 i=0;i<4;i++)							// loop to take pass from user
		{
			do											// loop to take value of pressed key working until key pressed
			{
				u8ReturnedValue = KPD_u8GetPressedKey(GPIOC, HIGH_NIBBLE);// store value of pressed key in u8ReturnedValue
    1836:	61 e0       	ldi	r22, 0x01	; 1
    1838:	82 e0       	ldi	r24, 0x02	; 2
    183a:	0e 94 2e 09 	call	0x125c	; 0x125c <KPD_u8GetPressedKey>
    183e:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
    1842:	2f ef       	ldi	r18, 0xFF	; 255
    1844:	81 ee       	ldi	r24, 0xE1	; 225
    1846:	94 e0       	ldi	r25, 0x04	; 4
    1848:	21 50       	subi	r18, 0x01	; 1
    184a:	80 40       	sbci	r24, 0x00	; 0
    184c:	90 40       	sbci	r25, 0x00	; 0
    184e:	e1 f7       	brne	.-8      	; 0x1848 <Scan_user+0x22>
    1850:	00 c0       	rjmp	.+0      	; 0x1852 <Scan_user+0x2c>
    1852:	00 00       	nop
				_delay_ms(200);							// delay 200m second to can detect change
			} while (u8ReturnedValue == NOT_PRESSED);	// condition to break the loop
    1854:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
    1858:	8f 3f       	cpi	r24, 0xFF	; 255
    185a:	69 f3       	breq	.-38     	; 0x1836 <Scan_user+0x10>
			LCD_vidDisplayCharacter(u8ReturnedValue);	// display pressed value on LCD
    185c:	0e 94 15 0a 	call	0x142a	; 0x142a <LCD_vidDisplayCharacter>
    1860:	2f e7       	ldi	r18, 0x7F	; 127
    1862:	89 ea       	ldi	r24, 0xA9	; 169
    1864:	93 e0       	ldi	r25, 0x03	; 3
    1866:	21 50       	subi	r18, 0x01	; 1
    1868:	80 40       	sbci	r24, 0x00	; 0
    186a:	90 40       	sbci	r25, 0x00	; 0
    186c:	e1 f7       	brne	.-8      	; 0x1866 <Scan_user+0x40>
    186e:	00 c0       	rjmp	.+0      	; 0x1870 <Scan_user+0x4a>
    1870:	00 00       	nop
			_delay_ms(150);								// delay 250m second for user see what number enter
			user[i] = u8ReturnedValue;					// store value in array called pass
    1872:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
    1876:	89 93       	st	Y+, r24
		/*Function Description: void function take void and return void
								scan user from user								*/
		/************************************************************************/
void Scan_user()
	{
		for (u8 i=0;i<4;i++)							// loop to take pass from user
    1878:	c0 17       	cp	r28, r16
    187a:	d1 07       	cpc	r29, r17
    187c:	e1 f6       	brne	.-72     	; 0x1836 <Scan_user+0x10>
			} while (u8ReturnedValue == NOT_PRESSED);	// condition to break the loop
			LCD_vidDisplayCharacter(u8ReturnedValue);	// display pressed value on LCD
			_delay_ms(150);								// delay 250m second for user see what number enter
			user[i] = u8ReturnedValue;					// store value in array called pass
		}
}
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	1f 91       	pop	r17
    1884:	0f 91       	pop	r16
    1886:	08 95       	ret

00001888 <write_EEPROM>:
		/*Function Input: take one value (from type u8)							*/
		/*Function Description: void function take void and return void                                                 
								write pass in EEPROM							*/
		/************************************************************************/
void write_EEPROM(u8 u8UserId)
{
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	d8 2e       	mov	r13, r24
	u8 User_Address = USER_address + (u8UserId * 0x8);	// calculate the address of user for store his username
    189a:	88 0f       	add	r24, r24
    189c:	88 0f       	add	r24, r24
    189e:	88 0f       	add	r24, r24
    18a0:	80 5a       	subi	r24, 0xA0	; 160
    18a2:	0f 2e       	mov	r0, r31
    18a4:	f4 ef       	ldi	r31, 0xF4	; 244
    18a6:	ef 2e       	mov	r14, r31
    18a8:	f7 e0       	ldi	r31, 0x07	; 7
    18aa:	ff 2e       	mov	r15, r31
    18ac:	f0 2d       	mov	r31, r0
    18ae:	c0 ef       	ldi	r28, 0xF0	; 240
    18b0:	d7 e0       	ldi	r29, 0x07	; 7
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM
	{
		user[i]^=KEY;									// encrypt user entered before store in EEPROM by(XOR pass with KEY)
    18b2:	0f 2e       	mov	r0, r31
    18b4:	fb ea       	ldi	r31, 0xAB	; 171
    18b6:	cf 2e       	mov	r12, r31
    18b8:	f0 2d       	mov	r31, r0
		EEPROM_vidWrite(User_Address + i, user[i]);		// save username in EEPROM
    18ba:	8e 01       	movw	r16, r28
    18bc:	00 95       	com	r16
    18be:	10 95       	com	r17
    18c0:	08 0f       	add	r16, r24
    18c2:	11 1d       	adc	r17, r1
void write_EEPROM(u8 u8UserId)
{
	u8 User_Address = USER_address + (u8UserId * 0x8);	// calculate the address of user for store his username
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM
	{
		user[i]^=KEY;									// encrypt user entered before store in EEPROM by(XOR pass with KEY)
    18c4:	68 81       	ld	r22, Y
    18c6:	6c 25       	eor	r22, r12
    18c8:	69 93       	st	Y+, r22
		EEPROM_vidWrite(User_Address + i, user[i]);		// save username in EEPROM
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	c8 01       	movw	r24, r16
    18ce:	8c 0f       	add	r24, r28
    18d0:	9d 1f       	adc	r25, r29
    18d2:	0e 94 04 09 	call	0x1208	; 0x1208 <EEPROM_vidWrite>
								write pass in EEPROM							*/
		/************************************************************************/
void write_EEPROM(u8 u8UserId)
{
	u8 User_Address = USER_address + (u8UserId * 0x8);	// calculate the address of user for store his username
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM
    18d6:	ce 15       	cp	r28, r14
    18d8:	df 05       	cpc	r29, r15
    18da:	a1 f7       	brne	.-24     	; 0x18c4 <write_EEPROM+0x3c>
	{
		user[i]^=KEY;									// encrypt user entered before store in EEPROM by(XOR pass with KEY)
		EEPROM_vidWrite(User_Address + i, user[i]);		// save username in EEPROM
	}
	u8 Pass_Address = PASS_address +(u8UserId * 0x4);	// calculate the address of user for store his pass
    18dc:	dd 0c       	add	r13, r13
    18de:	dd 0c       	add	r13, r13
    18e0:	0f 2e       	mov	r0, r31
    18e2:	fc ee       	ldi	r31, 0xEC	; 236
    18e4:	ef 2e       	mov	r14, r31
    18e6:	f7 e0       	ldi	r31, 0x07	; 7
    18e8:	ff 2e       	mov	r15, r31
    18ea:	f0 2d       	mov	r31, r0
    18ec:	c8 ee       	ldi	r28, 0xE8	; 232
    18ee:	d7 e0       	ldi	r29, 0x07	; 7
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM 
	{
		pass[i]^=KEY;									// encrypt pass entered before store in EEPROM by(XOR pass with KEY) 
    18f0:	0f 2e       	mov	r0, r31
    18f2:	fb ea       	ldi	r31, 0xAB	; 171
    18f4:	cf 2e       	mov	r12, r31
    18f6:	f0 2d       	mov	r31, r0
		EEPROM_vidWrite(Pass_Address + i, pass[i]);		// save pass in EEPROM
    18f8:	8e 01       	movw	r16, r28
    18fa:	00 95       	com	r16
    18fc:	10 95       	com	r17
    18fe:	0d 0d       	add	r16, r13
    1900:	11 1d       	adc	r17, r1
		EEPROM_vidWrite(User_Address + i, user[i]);		// save username in EEPROM
	}
	u8 Pass_Address = PASS_address +(u8UserId * 0x4);	// calculate the address of user for store his pass
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM 
	{
		pass[i]^=KEY;									// encrypt pass entered before store in EEPROM by(XOR pass with KEY) 
    1902:	68 81       	ld	r22, Y
    1904:	6c 25       	eor	r22, r12
    1906:	69 93       	st	Y+, r22
		EEPROM_vidWrite(Pass_Address + i, pass[i]);		// save pass in EEPROM
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	c8 01       	movw	r24, r16
    190c:	8c 0f       	add	r24, r28
    190e:	9d 1f       	adc	r25, r29
    1910:	0e 94 04 09 	call	0x1208	; 0x1208 <EEPROM_vidWrite>
	{
		user[i]^=KEY;									// encrypt user entered before store in EEPROM by(XOR pass with KEY)
		EEPROM_vidWrite(User_Address + i, user[i]);		// save username in EEPROM
	}
	u8 Pass_Address = PASS_address +(u8UserId * 0x4);	// calculate the address of user for store his pass
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM 
    1914:	ce 15       	cp	r28, r14
    1916:	df 05       	cpc	r29, r15
    1918:	a1 f7       	brne	.-24     	; 0x1902 <write_EEPROM+0x7a>
	{
		pass[i]^=KEY;									// encrypt pass entered before store in EEPROM by(XOR pass with KEY) 
		EEPROM_vidWrite(Pass_Address + i, pass[i]);		// save pass in EEPROM
	}
}
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	df 90       	pop	r13
    1928:	cf 90       	pop	r12
    192a:	08 95       	ret

0000192c <read_EEPROM>:
		/*Function Input: take one value (from type u8)							*/
		/*Function Description: void function take void and return void                                                 
								read pass from EEPROM							*/
		/************************************************************************/
void read_EEPROM(u8 u8UserId)
{
    192c:	cf 92       	push	r12
    192e:	df 92       	push	r13
    1930:	ef 92       	push	r14
    1932:	ff 92       	push	r15
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	08 2f       	mov	r16, r24
	u8 User_Address = USER_address + (u8UserId * 0x8 );	// calculate the address of user for store his username
    193e:	88 0f       	add	r24, r24
    1940:	88 0f       	add	r24, r24
    1942:	88 0f       	add	r24, r24
    1944:	80 5a       	subi	r24, 0xA0	; 160
    1946:	0f 2e       	mov	r0, r31
    1948:	f0 ef       	ldi	r31, 0xF0	; 240
    194a:	cf 2e       	mov	r12, r31
    194c:	f7 e0       	ldi	r31, 0x07	; 7
    194e:	df 2e       	mov	r13, r31
    1950:	f0 2d       	mov	r31, r0
    1952:	cc ee       	ldi	r28, 0xEC	; 236
    1954:	d7 e0       	ldi	r29, 0x07	; 7
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM
	{
		EEPROM_user[i] = EEPROM_u8Read(User_Address + i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9c 01       	movw	r18, r24
    195a:	2c 5e       	subi	r18, 0xEC	; 236
    195c:	37 40       	sbci	r19, 0x07	; 7
    195e:	79 01       	movw	r14, r18
    1960:	1b ea       	ldi	r17, 0xAB	; 171
    1962:	c7 01       	movw	r24, r14
    1964:	8c 0f       	add	r24, r28
    1966:	9d 1f       	adc	r25, r29
    1968:	0e 94 0d 09 	call	0x121a	; 0x121a <EEPROM_u8Read>
    196c:	81 27       	eor	r24, r17
    196e:	89 93       	st	Y+, r24
								read pass from EEPROM							*/
		/************************************************************************/
void read_EEPROM(u8 u8UserId)
{
	u8 User_Address = USER_address + (u8UserId * 0x8 );	// calculate the address of user for store his username
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM
    1970:	cc 15       	cp	r28, r12
    1972:	dd 05       	cpc	r29, r13
    1974:	b1 f7       	brne	.-20     	; 0x1962 <read_EEPROM+0x36>
	{
		EEPROM_user[i] = EEPROM_u8Read(User_Address + i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array
	}
	u8 Pass_Address = PASS_address + (u8UserId * 0x4 );	// calculate the address of user for store his pass
    1976:	00 0f       	add	r16, r16
    1978:	00 0f       	add	r16, r16
    197a:	0f 2e       	mov	r0, r31
    197c:	fd ef       	ldi	r31, 0xFD	; 253
    197e:	ef 2e       	mov	r14, r31
    1980:	f7 e0       	ldi	r31, 0x07	; 7
    1982:	ff 2e       	mov	r15, r31
    1984:	f0 2d       	mov	r31, r0
    1986:	c9 ef       	ldi	r28, 0xF9	; 249
    1988:	d7 e0       	ldi	r29, 0x07	; 7
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM 
	{
		EEPROM_pass[i] = EEPROM_u8Read(Pass_Address+ i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array 
    198a:	10 e0       	ldi	r17, 0x00	; 0
    198c:	09 5f       	subi	r16, 0xF9	; 249
    198e:	17 40       	sbci	r17, 0x07	; 7
    1990:	0f 2e       	mov	r0, r31
    1992:	fb ea       	ldi	r31, 0xAB	; 171
    1994:	df 2e       	mov	r13, r31
    1996:	f0 2d       	mov	r31, r0
    1998:	c8 01       	movw	r24, r16
    199a:	8c 0f       	add	r24, r28
    199c:	9d 1f       	adc	r25, r29
    199e:	0e 94 0d 09 	call	0x121a	; 0x121a <EEPROM_u8Read>
    19a2:	8d 25       	eor	r24, r13
    19a4:	89 93       	st	Y+, r24
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM
	{
		EEPROM_user[i] = EEPROM_u8Read(User_Address + i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array
	}
	u8 Pass_Address = PASS_address + (u8UserId * 0x4 );	// calculate the address of user for store his pass
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM 
    19a6:	ce 15       	cp	r28, r14
    19a8:	df 05       	cpc	r29, r15
    19aa:	b1 f7       	brne	.-20     	; 0x1998 <read_EEPROM+0x6c>
	{
		EEPROM_pass[i] = EEPROM_u8Read(Pass_Address+ i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array 
	}
}
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	ff 90       	pop	r15
    19b6:	ef 90       	pop	r14
    19b8:	df 90       	pop	r13
    19ba:	cf 90       	pop	r12
    19bc:	08 95       	ret

000019be <Isadmin>:
		/*Function Input: no input (void)										*/
		/*Function Description: u8 function take void and return u8                                                
								check who login user or admin & return only 0 or 1*/
		/************************************************************************/
u8 Isadmin()
{
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <logInFlag>
    19c4:	91 11       	cpse	r25, r1
    19c6:	80 e0       	ldi	r24, 0x00	; 0
	}
	else												// if not 
	{
		return 0;										// return 0
	}
}
    19c8:	08 95       	ret

000019ca <LogOut>:
		/*Function Description: void function take void and return void                                                
								logout from the system and return to start screen*/
		/************************************************************************/
void LogOut()
{	
	LCD_vidClearScreen();								// clear LCD screen
    19ca:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line 
    19ce:	61 e0       	ldi	r22, 0x01	; 1
    19d0:	82 e0       	ldi	r24, 0x02	; 2
    19d2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(" Logged Out ");				// display message on LCD
    19d6:	8b ea       	ldi	r24, 0xAB	; 171
    19d8:	95 e0       	ldi	r25, 0x05	; 5
    19da:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    19de:	61 e0       	ldi	r22, 0x01	; 1
    19e0:	83 e0       	ldi	r24, 0x03	; 3
    19e2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(" Successfully");				// display message on LCD
    19e6:	88 eb       	ldi	r24, 0xB8	; 184
    19e8:	95 e0       	ldi	r25, 0x05	; 5
    19ea:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
    19ee:	2f ef       	ldi	r18, 0xFF	; 255
    19f0:	84 e3       	ldi	r24, 0x34	; 52
    19f2:	9c e0       	ldi	r25, 0x0C	; 12
    19f4:	21 50       	subi	r18, 0x01	; 1
    19f6:	80 40       	sbci	r24, 0x00	; 0
    19f8:	90 40       	sbci	r25, 0x00	; 0
    19fa:	e1 f7       	brne	.-8      	; 0x19f4 <LogOut+0x2a>
    19fc:	00 c0       	rjmp	.+0      	; 0x19fe <LogOut+0x34>
    19fe:	00 00       	nop
	_delay_ms(500);										// wait for 500 m second
	LCD_vidClearScreen();								// clear LCD screen
    1a00:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
	LCD_vidDisplayString("1.Admin Login");				// display message on LCD
    1a04:	86 ec       	ldi	r24, 0xC6	; 198
    1a06:	95 e0       	ldi	r25, 0x05	; 5
    1a08:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1a0c:	61 e0       	ldi	r22, 0x01	; 1
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("2.User Login");				// display message on LCD
    1a14:	84 ed       	ldi	r24, 0xD4	; 212
    1a16:	95 e0       	ldi	r25, 0x05	; 5
    1a18:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
    1a20:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">>");							// display message on LCD 
    1a24:	81 ee       	ldi	r24, 0xE1	; 225
    1a26:	95 e0       	ldi	r25, 0x05	; 5
    1a28:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	u8ReturnedValue = u8GetKeyPressed();				// take choice from user
    1a2c:	0e 94 52 06 	call	0xca4	; 0xca4 <u8GetKeyPressed>
    1a30:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
    1a34:	2f e7       	ldi	r18, 0x7F	; 127
    1a36:	89 ea       	ldi	r24, 0xA9	; 169
    1a38:	93 e0       	ldi	r25, 0x03	; 3
    1a3a:	21 50       	subi	r18, 0x01	; 1
    1a3c:	80 40       	sbci	r24, 0x00	; 0
    1a3e:	90 40       	sbci	r25, 0x00	; 0
    1a40:	e1 f7       	brne	.-8      	; 0x1a3a <LogOut+0x70>
    1a42:	00 c0       	rjmp	.+0      	; 0x1a44 <LogOut+0x7a>
    1a44:	00 00       	nop
	_delay_ms(150);										// wait for 150 m second
	if(u8ReturnedValue=='1')							// if choice equal 1
    1a46:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
    1a4a:	81 33       	cpi	r24, 0x31	; 49
    1a4c:	19 f4       	brne	.+6      	; 0x1a54 <LogOut+0x8a>
	{
		check_admin_pass();								// call function that check username & pass for admin
    1a4e:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <check_admin_pass>
    1a52:	08 95       	ret
	}
	else if(u8ReturnedValue=='2')						// if choice equal 2
    1a54:	82 33       	cpi	r24, 0x32	; 50
    1a56:	19 f4       	brne	.+6      	; 0x1a5e <LogOut+0x94>
	{
		check_user_pass();								// call function that check username & pass for user
    1a58:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <check_user_pass>
    1a5c:	08 95       	ret
	}
	else												// if not	
	{
		LCD_vidClearScreen();							// clear LCD screen
    1a5e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		LCD_vidDisplayString("Wrong Choice");			// display message on LCD
    1a62:	85 ea       	ldi	r24, 0xA5	; 165
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
//		LogOut();										// call function that logout from the system
		start();
    1a6a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <start>
    1a6e:	08 95       	ret

00001a70 <admin_menue>:
		/*Function Description: void function take void and return void                                                
								display admin control menu						*/
		/************************************************************************/
void admin_menue()
{
	LCD_vidClearScreen();								// clear LCD screen
    1a70:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
	LCD_vidDisplayString("1.Control Home");				// display message on LCD
    1a74:	84 ee       	ldi	r24, 0xE4	; 228
    1a76:	95 e0       	ldi	r25, 0x05	; 5
    1a78:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1a7c:	61 e0       	ldi	r22, 0x01	; 1
    1a7e:	82 e0       	ldi	r24, 0x02	; 2
    1a80:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("2.Add user");					// display message on LCD
    1a84:	83 ef       	ldi	r24, 0xF3	; 243
    1a86:	95 e0       	ldi	r25, 0x05	; 5
    1a88:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    1a8c:	61 e0       	ldi	r22, 0x01	; 1
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("3.LOG Out");					// display message on LCD
    1a94:	8e ef       	ldi	r24, 0xFE	; 254
    1a96:	95 e0       	ldi	r25, 0x05	; 5
    1a98:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);								// move LCD cursor to fourth line
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	84 e0       	ldi	r24, 0x04	; 4
    1aa0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">> ");						// display message on LCD
    1aa4:	87 e0       	ldi	r24, 0x07	; 7
    1aa6:	97 e0       	ldi	r25, 0x07	; 7
    1aa8:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	choice = u8GetKeyPressed();							// take choice from user
    1aac:	0e 94 52 06 	call	0xca4	; 0xca4 <u8GetKeyPressed>
    1ab0:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <choice>
    1ab4:	2f e7       	ldi	r18, 0x7F	; 127
    1ab6:	89 ea       	ldi	r24, 0xA9	; 169
    1ab8:	93 e0       	ldi	r25, 0x03	; 3
    1aba:	21 50       	subi	r18, 0x01	; 1
    1abc:	80 40       	sbci	r24, 0x00	; 0
    1abe:	90 40       	sbci	r25, 0x00	; 0
    1ac0:	e1 f7       	brne	.-8      	; 0x1aba <admin_menue+0x4a>
    1ac2:	00 c0       	rjmp	.+0      	; 0x1ac4 <admin_menue+0x54>
    1ac4:	00 00       	nop
	_delay_ms(150);										// wait for 150 m second
	switch(choice)										// switch for choice
    1ac6:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <choice>
    1aca:	82 33       	cpi	r24, 0x32	; 50
    1acc:	39 f0       	breq	.+14     	; 0x1adc <admin_menue+0x6c>
    1ace:	83 33       	cpi	r24, 0x33	; 51
    1ad0:	41 f0       	breq	.+16     	; 0x1ae2 <admin_menue+0x72>
    1ad2:	81 33       	cpi	r24, 0x31	; 49
    1ad4:	49 f4       	brne	.+18     	; 0x1ae8 <admin_menue+0x78>
	{
		case '1' :										// if choice equal 1
			Home_control_Menue();						// call function that display admin control menu
    1ad6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Home_control_Menue>
		break;											// break
    1ada:	08 95       	ret
		case '2' :										// if choice equal 2
			add_user();									// call function that add new user
    1adc:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <add_user>
		break;											// break
    1ae0:	08 95       	ret
		case '3':										// if choice equal 3
			LogOut();									// call function that logout from the system
    1ae2:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LogOut>
		break;											// break
    1ae6:	08 95       	ret
		default:										// default case
			LCD_vidClearScreen();						// clear LCD screen
    1ae8:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
			LCD_vidDisplayString("Wrong Choice");		// display message on LCD
    1aec:	85 ea       	ldi	r24, 0xA5	; 165
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			admin_menue();								// call function that display admin menu		
    1af4:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <admin_menue>
    1af8:	08 95       	ret

00001afa <check_admin_pass>:
		/*Function Description: void function take void and return void                                                
								check pass is true or not						*/
		/************************************************************************/
void check_admin_pass()
{    
		    read_EEPROM(0x0);							// call function that read EEPROM 
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	0e 94 96 0c 	call	0x192c	; 0x192c <read_EEPROM>
			LCD_vidClearScreen();						// move LCD cursor to first line
    1b00:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
			LCD_vidDisplayString("Enter UserName:");	// display message on LCD			
    1b04:	88 e0       	ldi	r24, 0x08	; 8
    1b06:	96 e0       	ldi	r25, 0x06	; 6
    1b08:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			LCD_vidMoveCursor(2, 1);					// move LCD cursor to next line
    1b0c:	61 e0       	ldi	r22, 0x01	; 1
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString(">>");					// display message on LCD
    1b14:	81 ee       	ldi	r24, 0xE1	; 225
    1b16:	95 e0       	ldi	r25, 0x05	; 5
    1b18:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			Scan_user();								// take pass from user
    1b1c:	0e 94 13 0c 	call	0x1826	; 0x1826 <Scan_user>
    1b20:	e0 ef       	ldi	r30, 0xF0	; 240
    1b22:	f7 e0       	ldi	r31, 0x07	; 7
    1b24:	ac ee       	ldi	r26, 0xEC	; 236
    1b26:	b7 e0       	ldi	r27, 0x07	; 7
    1b28:	24 ef       	ldi	r18, 0xF4	; 244
    1b2a:	37 e0       	ldi	r19, 0x07	; 7
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
			check_user=0;								// initialize check variable to 0
			for (u8 i=0;i<4;i++)						// loop to check if pass entered is correct or not (same saved in EEPROM)
			{
				if (user[i] == EEPROM_user[i])			// check if two value are equal or not
    1b2e:	91 91       	ld	r25, Z+
    1b30:	8d 91       	ld	r24, X+
    1b32:	98 13       	cpse	r25, r24
    1b34:	01 c0       	rjmp	.+2      	; 0x1b38 <check_admin_pass+0x3e>
				{
					check_user++;						// if that increase the check variable by one
    1b36:	4f 5f       	subi	r20, 0xFF	; 255
			LCD_vidDisplayString("Enter UserName:");	// display message on LCD			
			LCD_vidMoveCursor(2, 1);					// move LCD cursor to next line
			LCD_vidDisplayString(">>");					// display message on LCD
			Scan_user();								// take pass from user
			check_user=0;								// initialize check variable to 0
			for (u8 i=0;i<4;i++)						// loop to check if pass entered is correct or not (same saved in EEPROM)
    1b38:	e2 17       	cp	r30, r18
    1b3a:	f3 07       	cpc	r31, r19
    1b3c:	c1 f7       	brne	.-16     	; 0x1b2e <check_admin_pass+0x34>
    1b3e:	40 93 e7 07 	sts	0x07E7, r20	; 0x8007e7 <check_user>
				}
				else									// if not	 
				{
				}
			}
		LCD_vidMoveCursor(3, 1);						// move LCD cursor to third line
    1b42:	61 e0       	ldi	r22, 0x01	; 1
    1b44:	83 e0       	ldi	r24, 0x03	; 3
    1b46:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString("Enter Password:");		// display message on LCD
    1b4a:	88 e1       	ldi	r24, 0x18	; 24
    1b4c:	96 e0       	ldi	r25, 0x06	; 6
    1b4e:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(4, 1);						// move LCD cursor to fourth line
    1b52:	61 e0       	ldi	r22, 0x01	; 1
    1b54:	84 e0       	ldi	r24, 0x04	; 4
    1b56:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">>");						// display message on LCD
    1b5a:	81 ee       	ldi	r24, 0xE1	; 225
    1b5c:	95 e0       	ldi	r25, 0x05	; 5
    1b5e:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		Scan_pass();									// take pass from user
    1b62:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Scan_pass>
    1b66:	e8 ee       	ldi	r30, 0xE8	; 232
    1b68:	f7 e0       	ldi	r31, 0x07	; 7
    1b6a:	a9 ef       	ldi	r26, 0xF9	; 249
    1b6c:	b7 e0       	ldi	r27, 0x07	; 7
    1b6e:	2c ee       	ldi	r18, 0xEC	; 236
    1b70:	37 e0       	ldi	r19, 0x07	; 7
    1b72:	40 e0       	ldi	r20, 0x00	; 0
		check=0;										// initialize check variable to 0 
		for (u8 i=0;i<4;i++)							// loop to check if pass entered is correct or not (same saved in EEPROM)	
		{		
			if (pass[i] == EEPROM_pass[i])				// check if two value are equal or not 
    1b74:	91 91       	ld	r25, Z+
    1b76:	8d 91       	ld	r24, X+
    1b78:	98 13       	cpse	r25, r24
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <check_admin_pass+0x84>
			{
				check++;								// if that increase the check variable by one
    1b7c:	4f 5f       	subi	r20, 0xFF	; 255
		LCD_vidDisplayString("Enter Password:");		// display message on LCD
		LCD_vidMoveCursor(4, 1);						// move LCD cursor to fourth line
		LCD_vidDisplayString(">>");						// display message on LCD
		Scan_pass();									// take pass from user
		check=0;										// initialize check variable to 0 
		for (u8 i=0;i<4;i++)							// loop to check if pass entered is correct or not (same saved in EEPROM)	
    1b7e:	e2 17       	cp	r30, r18
    1b80:	f3 07       	cpc	r31, r19
    1b82:	c1 f7       	brne	.-16     	; 0x1b74 <check_admin_pass+0x7a>
    1b84:	40 93 f8 07 	sts	0x07F8, r20	; 0x8007f8 <check>
			}
			else										// if not
			{
			}
		}
		LCD_vidClearScreen();							// clear LCD screen
    1b88:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		if(check == 4 && check_user == 4)				// check if check variable equal 4 or not (correct pass)
    1b8c:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <check>
    1b90:	84 30       	cpi	r24, 0x04	; 4
    1b92:	c1 f5       	brne	.+112    	; 0x1c04 <check_admin_pass+0x10a>
    1b94:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <check_user>
    1b98:	84 30       	cpi	r24, 0x04	; 4
    1b9a:	a1 f5       	brne	.+104    	; 0x1c04 <check_admin_pass+0x10a>
		{
			LED_vidTurnOn(GPIOD, PIN3);					// turn on admin mode led 
    1b9c:	63 e0       	ldi	r22, 0x03	; 3
    1b9e:	70 e0       	ldi	r23, 0x00	; 0
    1ba0:	83 e0       	ldi	r24, 0x03	; 3
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	0e 94 90 0a 	call	0x1520	; 0x1520 <LED_vidTurnOn>
			LED_vidTurnOff(GPIOD,PIN4);					// turn off user mode led
    1ba8:	64 e0       	ldi	r22, 0x04	; 4
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	83 e0       	ldi	r24, 0x03	; 3
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
			LED_vidTurnOff(GPIOB,PIN5);					// turn off block mode led
    1bb4:	65 e0       	ldi	r22, 0x05	; 5
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
			LCD_vidDisplayString("Correct Password");	// display message on LCD
    1bc0:	88 e2       	ldi	r24, 0x28	; 40
    1bc2:	96 e0       	ldi	r25, 0x06	; 6
    1bc4:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			LCD_vidMoveCursor(2,1);
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString("Login ");				// display message on screen
    1bd0:	8a e5       	ldi	r24, 0x5A	; 90
    1bd2:	97 e0       	ldi	r25, 0x07	; 7
    1bd4:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			LCD_vidMoveCursor(3,1);
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	83 e0       	ldi	r24, 0x03	; 3
    1bdc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString("Successfully");		// display message on screen
    1be0:	89 eb       	ldi	r24, 0xB9	; 185
    1be2:	95 e0       	ldi	r25, 0x05	; 5
    1be4:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
    1be8:	2f ef       	ldi	r18, 0xFF	; 255
    1bea:	81 ee       	ldi	r24, 0xE1	; 225
    1bec:	94 e0       	ldi	r25, 0x04	; 4
    1bee:	21 50       	subi	r18, 0x01	; 1
    1bf0:	80 40       	sbci	r24, 0x00	; 0
    1bf2:	90 40       	sbci	r25, 0x00	; 0
    1bf4:	e1 f7       	brne	.-8      	; 0x1bee <check_admin_pass+0xf4>
    1bf6:	00 c0       	rjmp	.+0      	; 0x1bf8 <check_admin_pass+0xfe>
    1bf8:	00 00       	nop
			_delay_ms(200);								// delay 200m second to see message
			wrong_pass_count = 0;						// reset wrong_pass_count variable by reinitialize by 0
    1bfa:	10 92 e3 07 	sts	0x07E3, r1	; 0x8007e3 <wrong_pass_count>
			admin_menue();
    1bfe:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <admin_menue>
			{
			}
		}
		LCD_vidClearScreen();							// clear LCD screen
		if(check == 4 && check_user == 4)				// check if check variable equal 4 or not (correct pass)
		{
    1c02:	25 c0       	rjmp	.+74     	; 0x1c4e <check_admin_pass+0x154>
			wrong_pass_count = 0;						// reset wrong_pass_count variable by reinitialize by 0
			admin_menue();
		}
		else											// if not
		{
			wrong_pass_count++;							// increase wrong_pass_count variable by one 
    1c04:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <wrong_pass_count>
    1c08:	8f 5f       	subi	r24, 0xFF	; 255
    1c0a:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <wrong_pass_count>
			LCD_vidDisplayString("Wrong password");		// display message on LCD
    1c0e:	89 e3       	ldi	r24, 0x39	; 57
    1c10:	96 e0       	ldi	r25, 0x06	; 6
    1c12:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			LCD_vidMoveCursor(2, 1);					// move LCD cursor
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString("or user");			// display message on LCD
    1c1e:	88 e4       	ldi	r24, 0x48	; 72
    1c20:	96 e0       	ldi	r25, 0x06	; 6
    1c22:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			LCD_vidMoveCursor(3, 1);					// move LCD cursor
    1c26:	61 e0       	ldi	r22, 0x01	; 1
    1c28:	83 e0       	ldi	r24, 0x03	; 3
    1c2a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
			LCD_vidDisplayString("Rem times:");			// display message on LCD 
    1c2e:	80 e5       	ldi	r24, 0x50	; 80
    1c30:	96 e0       	ldi	r25, 0x06	; 6
    1c32:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
			LCD_vidDisplayNumber(3-wrong_pass_count);	// display number of reaming tries
    1c36:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <wrong_pass_count>
    1c3a:	63 e0       	ldi	r22, 0x03	; 3
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	68 1b       	sub	r22, r24
    1c40:	71 09       	sbc	r23, r1
    1c42:	07 2e       	mov	r0, r23
    1c44:	00 0c       	add	r0, r0
    1c46:	88 0b       	sbc	r24, r24
    1c48:	99 0b       	sbc	r25, r25
    1c4a:	0e 94 40 0a 	call	0x1480	; 0x1480 <LCD_vidDisplayNumber>
    1c4e:	2f ef       	ldi	r18, 0xFF	; 255
    1c50:	80 e7       	ldi	r24, 0x70	; 112
    1c52:	92 e0       	ldi	r25, 0x02	; 2
    1c54:	21 50       	subi	r18, 0x01	; 1
    1c56:	80 40       	sbci	r24, 0x00	; 0
    1c58:	90 40       	sbci	r25, 0x00	; 0
    1c5a:	e1 f7       	brne	.-8      	; 0x1c54 <check_admin_pass+0x15a>
    1c5c:	00 c0       	rjmp	.+0      	; 0x1c5e <check_admin_pass+0x164>
    1c5e:	00 00       	nop
    1c60:	08 95       	ret

00001c62 <add_user>:
		/*Function Description: void function take void and return void                                                
								add user to the system							*/
		/************************************************************************/
void add_user()
{
	LCD_vidClearScreen();								// clear LCD screen
    1c62:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
	LCD_vidDisplayString("-- Add User --");					// display message on LCD
    1c66:	8b e5       	ldi	r24, 0x5B	; 91
    1c68:	96 e0       	ldi	r25, 0x06	; 6
    1c6a:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    1c6e:	61 e0       	ldi	r22, 0x01	; 1
    1c70:	83 e0       	ldi	r24, 0x03	; 3
    1c72:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("Set user ID:");				// display message on LCD
    1c76:	8a e6       	ldi	r24, 0x6A	; 106
    1c78:	96 e0       	ldi	r25, 0x06	; 6
    1c7a:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);								// move LCD cursor to fourth line
    1c7e:	61 e0       	ldi	r22, 0x01	; 1
    1c80:	84 e0       	ldi	r24, 0x04	; 4
    1c82:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">>");							// display message on LCD
    1c86:	81 ee       	ldi	r24, 0xE1	; 225
    1c88:	95 e0       	ldi	r25, 0x05	; 5
    1c8a:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	UserId = u8GetKeyPressed();							// take choice from user
    1c8e:	0e 94 52 06 	call	0xca4	; 0xca4 <u8GetKeyPressed>
    1c92:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <UserId>
    1c96:	2f ef       	ldi	r18, 0xFF	; 255
    1c98:	81 ee       	ldi	r24, 0xE1	; 225
    1c9a:	94 e0       	ldi	r25, 0x04	; 4
    1c9c:	21 50       	subi	r18, 0x01	; 1
    1c9e:	80 40       	sbci	r24, 0x00	; 0
    1ca0:	90 40       	sbci	r25, 0x00	; 0
    1ca2:	e1 f7       	brne	.-8      	; 0x1c9c <add_user+0x3a>
    1ca4:	00 c0       	rjmp	.+0      	; 0x1ca6 <add_user+0x44>
    1ca6:	00 00       	nop
	_delay_ms(200);										// wait for 200 m second
	LCD_vidClearScreen();								// clear LCD screen
    1ca8:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
	LCD_vidDisplayString("Set UserName:");				// display message on LCD
    1cac:	87 e7       	ldi	r24, 0x77	; 119
    1cae:	96 e0       	ldi	r25, 0x06	; 6
    1cb0:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">>");							// display message on LCD
    1cbc:	81 ee       	ldi	r24, 0xE1	; 225
    1cbe:	95 e0       	ldi	r25, 0x05	; 5
    1cc0:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	Scan_user();										// take username & pass from user
    1cc4:	0e 94 13 0c 	call	0x1826	; 0x1826 <Scan_user>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    1cc8:	61 e0       	ldi	r22, 0x01	; 1
    1cca:	83 e0       	ldi	r24, 0x03	; 3
    1ccc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("Please,Set Pass:");			// display message on LCD
    1cd0:	85 e8       	ldi	r24, 0x85	; 133
    1cd2:	96 e0       	ldi	r25, 0x06	; 6
    1cd4:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);								// move LCD cursor to next line
    1cd8:	61 e0       	ldi	r22, 0x01	; 1
    1cda:	84 e0       	ldi	r24, 0x04	; 4
    1cdc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">>");							// display message on LCD
    1ce0:	81 ee       	ldi	r24, 0xE1	; 225
    1ce2:	95 e0       	ldi	r25, 0x05	; 5
    1ce4:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	Scan_pass();										// take username & pass from user
    1ce8:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Scan_pass>
	write_EEPROM(UserId);								// write this id in EEPROM
    1cec:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <UserId>
    1cf0:	0e 94 44 0c 	call	0x1888	; 0x1888 <write_EEPROM>
	LCD_vidClearScreen();								// clear LCD screen
    1cf4:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
	LCD_vidDisplayString("User Added ");				// display message on LCD
    1cf8:	86 e9       	ldi	r24, 0x96	; 150
    1cfa:	96 e0       	ldi	r25, 0x06	; 6
    1cfc:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1d00:	61 e0       	ldi	r22, 0x01	; 1
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("Successfully");				// display message on LCD
    1d08:	89 eb       	ldi	r24, 0xB9	; 185
    1d0a:	95 e0       	ldi	r25, 0x05	; 5
    1d0c:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
    1d10:	2f e7       	ldi	r18, 0x7F	; 127
    1d12:	8a e1       	ldi	r24, 0x1A	; 26
    1d14:	96 e0       	ldi	r25, 0x06	; 6
    1d16:	21 50       	subi	r18, 0x01	; 1
    1d18:	80 40       	sbci	r24, 0x00	; 0
    1d1a:	90 40       	sbci	r25, 0x00	; 0
    1d1c:	e1 f7       	brne	.-8      	; 0x1d16 <add_user+0xb4>
    1d1e:	00 c0       	rjmp	.+0      	; 0x1d20 <add_user+0xbe>
    1d20:	00 00       	nop
	_delay_ms(250);										// wait for 250 m second
	admin_menue();										// call function that display admin control menu
    1d22:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <admin_menue>
    1d26:	08 95       	ret

00001d28 <User_menue>:
		/*Function Description: void function take void and return void                                                
								display user control menu						*/
		/************************************************************************/
void User_menue()
{
	LCD_vidClearScreen();								// clear LCD screen
    1d28:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
	LCD_vidDisplayString("1.Room Lighting");			// display message on LCD
    1d2c:	82 ea       	ldi	r24, 0xA2	; 162
    1d2e:	96 e0       	ldi	r25, 0x06	; 6
    1d30:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1d34:	61 e0       	ldi	r22, 0x01	; 1
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("2.Air Condition");			// display message on LCD
    1d3c:	82 eb       	ldi	r24, 0xB2	; 178
    1d3e:	96 e0       	ldi	r25, 0x06	; 6
    1d40:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    1d44:	61 e0       	ldi	r22, 0x01	; 1
    1d46:	83 e0       	ldi	r24, 0x03	; 3
    1d48:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("3.Log Out");					// display message on LCD
    1d4c:	82 ec       	ldi	r24, 0xC2	; 194
    1d4e:	96 e0       	ldi	r25, 0x06	; 6
    1d50:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);								// move LCD cursor to fourth line
    1d54:	61 e0       	ldi	r22, 0x01	; 1
    1d56:	84 e0       	ldi	r24, 0x04	; 4
    1d58:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">> ");					// display message on LCD
    1d5c:	87 e0       	ldi	r24, 0x07	; 7
    1d5e:	97 e0       	ldi	r25, 0x07	; 7
    1d60:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	choice = u8GetKeyPressed();							// take choice from the user
    1d64:	0e 94 52 06 	call	0xca4	; 0xca4 <u8GetKeyPressed>
    1d68:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <choice>
    1d6c:	2f e7       	ldi	r18, 0x7F	; 127
    1d6e:	89 ea       	ldi	r24, 0xA9	; 169
    1d70:	93 e0       	ldi	r25, 0x03	; 3
    1d72:	21 50       	subi	r18, 0x01	; 1
    1d74:	80 40       	sbci	r24, 0x00	; 0
    1d76:	90 40       	sbci	r25, 0x00	; 0
    1d78:	e1 f7       	brne	.-8      	; 0x1d72 <User_menue+0x4a>
    1d7a:	00 c0       	rjmp	.+0      	; 0x1d7c <User_menue+0x54>
    1d7c:	00 00       	nop
	_delay_ms(150);										// wait for 150 m second
	switch(choice)										// switch for choice
    1d7e:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <choice>
    1d82:	82 33       	cpi	r24, 0x32	; 50
    1d84:	39 f0       	breq	.+14     	; 0x1d94 <User_menue+0x6c>
    1d86:	83 33       	cpi	r24, 0x33	; 51
    1d88:	41 f0       	breq	.+16     	; 0x1d9a <User_menue+0x72>
    1d8a:	81 33       	cpi	r24, 0x31	; 49
    1d8c:	49 f4       	brne	.+18     	; 0x1da0 <User_menue+0x78>
	{
		case '1':										// if choice equal 1
			Print();									// call function that display rooms control
    1d8e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <Print>
		break;											// break
    1d92:	08 95       	ret
		case '2' :										// if choice equal 2
			Air_condition();							// call function that control air condition
    1d94:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Air_condition>
		break;											// break
    1d98:	08 95       	ret
		case '3' :										// if choice equal 3
			LogOut();									// call function that logout from the system
    1d9a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LogOut>
		break;											// break
    1d9e:	08 95       	ret
		default:										// default case
			LCD_vidClearScreen();						// clear LCD screen
    1da0:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
			LCD_vidDisplayString("Wrong input");		// display message on LCD
    1da4:	8a e3       	ldi	r24, 0x3A	; 58
    1da6:	95 e0       	ldi	r25, 0x05	; 5
    1da8:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
    1dac:	2f e7       	ldi	r18, 0x7F	; 127
    1dae:	8a e1       	ldi	r24, 0x1A	; 26
    1db0:	96 e0       	ldi	r25, 0x06	; 6
    1db2:	21 50       	subi	r18, 0x01	; 1
    1db4:	80 40       	sbci	r24, 0x00	; 0
    1db6:	90 40       	sbci	r25, 0x00	; 0
    1db8:	e1 f7       	brne	.-8      	; 0x1db2 <User_menue+0x8a>
    1dba:	00 c0       	rjmp	.+0      	; 0x1dbc <User_menue+0x94>
    1dbc:	00 00       	nop
			_delay_ms(250);								// wait for 250 m second
			User_menue();								// call function that display user control menu
    1dbe:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <User_menue>
    1dc2:	08 95       	ret

00001dc4 <Print>:
		/*Function Description: void function take void and return void                                                
								display rooms menu & control it					*/
		/************************************************************************/
void Print()
{
	u8 show_menu = MAIN_MENU;							// set variable to main menu	
    1dc4:	d1 e0       	ldi	r29, 0x01	; 1
    1dc6:	1f ef       	ldi	r17, 0xFF	; 255
			control_rooms(ROOM5_MENU);					// call function that control room 5 lightning
			show_menu = MAIN_MENU;						// set menu to main menu
			break;										// stop case
			case ROOM6_MENU:							// if room 6 menu
			control_rooms(ROOM6_MENU);					// call function that control room 6 lightning
			show_menu = MAIN_MENU;						// set menu to main menu
    1dc8:	c1 e0       	ldi	r28, 0x01	; 1
{
	u8 show_menu = MAIN_MENU;							// set variable to main menu	
	while(1)											//while loop to Show the menu
	{
		u8ReturnedValue = NOT_PRESSED;					//Set the key pressed by the user to its default value
		switch (show_menu)								// switch form menus
    1dca:	8d 2f       	mov	r24, r29
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	fc 01       	movw	r30, r24
    1dd0:	31 97       	sbiw	r30, 0x01	; 1
    1dd2:	e8 30       	cpi	r30, 0x08	; 8
    1dd4:	f1 05       	cpc	r31, r1
    1dd6:	d8 f7       	brcc	.-10     	; 0x1dce <Print+0xa>
    1dd8:	e5 59       	subi	r30, 0x95	; 149
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__tablejump2__>
    1de0:	10 93 e5 07 	sts	0x07E5, r17	; 0x8007e5 <u8ReturnedValue>
		{
			case MAIN_MENU:								// if main menu
			do											// do while loop
			{
				LCD_vidClearScreen();					// clear LCD screen
    1de4:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
				LCD_vidDisplayString("1:Room1 2:Room2 ");// display message on LCD screen
    1de8:	8c ec       	ldi	r24, 0xCC	; 204
    1dea:	96 e0       	ldi	r25, 0x06	; 6
    1dec:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
				LCD_vidMoveCursor(2,1);					// move LCD cursor to second line
    1df0:	6c 2f       	mov	r22, r28
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
				LCD_vidDisplayString("3:Room3 4:Room4 ");// display message on LCD screen
    1df8:	8d ed       	ldi	r24, 0xDD	; 221
    1dfa:	96 e0       	ldi	r25, 0x06	; 6
    1dfc:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
				LCD_vidMoveCursor(3,1);					// move LCD cursor to third line
    1e00:	6c 2f       	mov	r22, r28
    1e02:	83 e0       	ldi	r24, 0x03	; 3
    1e04:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
				LCD_vidDisplayString("5:Room5 6:Room6");// display message on LCD screen
    1e08:	8e ee       	ldi	r24, 0xEE	; 238
    1e0a:	96 e0       	ldi	r25, 0x06	; 6
    1e0c:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
				LCD_vidMoveCursor(4,1);					// move LCD cursor to fourth line
    1e10:	6c 2f       	mov	r22, r28
    1e12:	84 e0       	ldi	r24, 0x04	; 4
    1e14:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
				LCD_vidDisplayString("0:Return >> ");	// display message on LCD screen
    1e18:	8e ef       	ldi	r24, 0xFE	; 254
    1e1a:	96 e0       	ldi	r25, 0x06	; 6
    1e1c:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
				u8ReturnedValue = u8GetKeyPressed();	// take choice from user 
    1e20:	0e 94 52 06 	call	0xca4	; 0xca4 <u8GetKeyPressed>
    1e24:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
    1e28:	2f ef       	ldi	r18, 0xFF	; 255
    1e2a:	81 ee       	ldi	r24, 0xE1	; 225
    1e2c:	94 e0       	ldi	r25, 0x04	; 4
    1e2e:	21 50       	subi	r18, 0x01	; 1
    1e30:	80 40       	sbci	r24, 0x00	; 0
    1e32:	90 40       	sbci	r25, 0x00	; 0
    1e34:	e1 f7       	brne	.-8      	; 0x1e2e <Print+0x6a>
    1e36:	00 c0       	rjmp	.+0      	; 0x1e38 <Print+0x74>
    1e38:	00 00       	nop
				_delay_ms(200);							// wait for 200 m second
				if (u8ReturnedValue == '1')				// if choice equal 1
    1e3a:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
    1e3e:	81 33       	cpi	r24, 0x31	; 49
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <Print+0x80>
    1e42:	60 c0       	rjmp	.+192    	; 0x1f04 <Print+0x140>
				{
					show_menu = ROOM1_MENU;				// display room 1 menu
				}
				else if (u8ReturnedValue == '2')		// if choice equal 2
    1e44:	82 33       	cpi	r24, 0x32	; 50
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <Print+0x86>
    1e48:	5f c0       	rjmp	.+190    	; 0x1f08 <Print+0x144>
				{
					show_menu = ROOM2_MENU;				// display room 2 menu
				}
				else if (u8ReturnedValue == '3')		// if choice equal 3
    1e4a:	83 33       	cpi	r24, 0x33	; 51
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <Print+0x8c>
    1e4e:	5e c0       	rjmp	.+188    	; 0x1f0c <Print+0x148>
				{
					show_menu = ROOM3_MENU;				// display room 3 menu
				}
				else if (u8ReturnedValue == '4')		// if choice equal 4
    1e50:	84 33       	cpi	r24, 0x34	; 52
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <Print+0x92>
    1e54:	5d c0       	rjmp	.+186    	; 0x1f10 <Print+0x14c>
				{
					show_menu = ROOM4_MENU;				// display room 4 menu
				}
				else if (u8ReturnedValue == '5')		// if choice equal 5
    1e56:	85 33       	cpi	r24, 0x35	; 53
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <Print+0x98>
    1e5a:	5c c0       	rjmp	.+184    	; 0x1f14 <Print+0x150>
				{
					show_menu = ROOM5_MENU;				// display room 5 menu
				}
				else if (u8ReturnedValue == '6')		// if choice equal 6
    1e5c:	86 33       	cpi	r24, 0x36	; 54
    1e5e:	09 f4       	brne	.+2      	; 0x1e62 <Print+0x9e>
    1e60:	5b c0       	rjmp	.+182    	; 0x1f18 <Print+0x154>
				{
					show_menu = ROOM6_MENU;				// display room 6 menu
				}
				else if (u8ReturnedValue=='0')			// if choice equal 0
    1e62:	80 33       	cpi	r24, 0x30	; 48
    1e64:	61 f4       	brne	.+24     	; 0x1e7e <Print+0xba>
				{
					u8 login = Isadmin();
    1e66:	0e 94 df 0c 	call	0x19be	; 0x19be <Isadmin>
					if(login == 1)					// if returned value of Isadmin function equal to 1
    1e6a:	81 30       	cpi	r24, 0x01	; 1
    1e6c:	19 f4       	brne	.+6      	; 0x1e74 <Print+0xb0>
					{
						Home_control_Menue();			// call function that return to admin home control
    1e6e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Home_control_Menue>
    1e72:	17 c0       	rjmp	.+46     	; 0x1ea2 <Print+0xde>
					}
					else if(login == 0) 				// if not
    1e74:	81 11       	cpse	r24, r1
    1e76:	a9 cf       	rjmp	.-174    	; 0x1dca <Print+0x6>
					{
						User_menue();					// call function that return to user home control
    1e78:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <User_menue>
    1e7c:	12 c0       	rjmp	.+36     	; 0x1ea2 <Print+0xde>
					}
				}
				else if(u8ReturnedValue != NOT_PRESSED)	// if user enter any thing else 
    1e7e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <Print+0xc0>
    1e82:	b0 cf       	rjmp	.-160    	; 0x1de4 <Print+0x20>
				{
					LCD_vidClearScreen();				// clear LCD screen
    1e84:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
					LCD_vidDisplayString("Wrong input");// display message on LCD screen
    1e88:	8a e3       	ldi	r24, 0x3A	; 58
    1e8a:	95 e0       	ldi	r25, 0x05	; 5
    1e8c:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
    1e90:	2f ef       	ldi	r18, 0xFF	; 255
    1e92:	81 ee       	ldi	r24, 0xE1	; 225
    1e94:	94 e0       	ldi	r25, 0x04	; 4
    1e96:	21 50       	subi	r18, 0x01	; 1
    1e98:	80 40       	sbci	r24, 0x00	; 0
    1e9a:	90 40       	sbci	r25, 0x00	; 0
    1e9c:	e1 f7       	brne	.-8      	; 0x1e96 <Print+0xd2>
    1e9e:	00 c0       	rjmp	.+0      	; 0x1ea0 <Print+0xdc>
    1ea0:	00 00       	nop
					_delay_ms(200);						// wait for 200m second
				}
			} while  ((u8ReturnedValue < '0') || (u8ReturnedValue > '6') );// loop still work if choice less than 0 or greater than 6
    1ea2:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <u8ReturnedValue>
    1ea6:	80 53       	subi	r24, 0x30	; 48
    1ea8:	87 30       	cpi	r24, 0x07	; 7
    1eaa:	08 f0       	brcs	.+2      	; 0x1eae <Print+0xea>
    1eac:	9b cf       	rjmp	.-202    	; 0x1de4 <Print+0x20>
    1eae:	8d cf       	rjmp	.-230    	; 0x1dca <Print+0x6>
    1eb0:	10 93 e5 07 	sts	0x07E5, r17	; 0x8007e5 <u8ReturnedValue>
			break;										// stop case
			case ROOM1_MENU:							// if room 1 menu
			control_rooms(ROOM1_MENU);					// call function that control room 1 lightning
    1eb4:	83 e0       	ldi	r24, 0x03	; 3
    1eb6:	0e 94 66 06 	call	0xccc	; 0xccc <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1eba:	dc 2f       	mov	r29, r28
			break;										// stop case
    1ebc:	86 cf       	rjmp	.-244    	; 0x1dca <Print+0x6>
    1ebe:	10 93 e5 07 	sts	0x07E5, r17	; 0x8007e5 <u8ReturnedValue>
			case ROOM2_MENU:							// if room 2 menu
			control_rooms(ROOM2_MENU);					// call function that control room 2 lightning
    1ec2:	84 e0       	ldi	r24, 0x04	; 4
    1ec4:	0e 94 66 06 	call	0xccc	; 0xccc <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1ec8:	dc 2f       	mov	r29, r28
			break;										// stop case
    1eca:	7f cf       	rjmp	.-258    	; 0x1dca <Print+0x6>
    1ecc:	10 93 e5 07 	sts	0x07E5, r17	; 0x8007e5 <u8ReturnedValue>
			case ROOM3_MENU:							// if room 3 menu
			control_rooms(ROOM3_MENU);					// call function that control room 3 lightning
    1ed0:	85 e0       	ldi	r24, 0x05	; 5
    1ed2:	0e 94 66 06 	call	0xccc	; 0xccc <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1ed6:	dc 2f       	mov	r29, r28
			break;										// stop case
    1ed8:	78 cf       	rjmp	.-272    	; 0x1dca <Print+0x6>
    1eda:	10 93 e5 07 	sts	0x07E5, r17	; 0x8007e5 <u8ReturnedValue>
			case ROOM4_MENU:							// if room 4 menu
			control_rooms(ROOM4_MENU);					// call function that control room 4 lightning
    1ede:	86 e0       	ldi	r24, 0x06	; 6
    1ee0:	0e 94 66 06 	call	0xccc	; 0xccc <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1ee4:	dc 2f       	mov	r29, r28
			break;										// stop case
    1ee6:	71 cf       	rjmp	.-286    	; 0x1dca <Print+0x6>
    1ee8:	10 93 e5 07 	sts	0x07E5, r17	; 0x8007e5 <u8ReturnedValue>
			case ROOM5_MENU:							// if room 5 menu
			control_rooms(ROOM5_MENU);					// call function that control room 5 lightning
    1eec:	87 e0       	ldi	r24, 0x07	; 7
    1eee:	0e 94 66 06 	call	0xccc	; 0xccc <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1ef2:	dc 2f       	mov	r29, r28
			break;										// stop case
    1ef4:	6a cf       	rjmp	.-300    	; 0x1dca <Print+0x6>
    1ef6:	10 93 e5 07 	sts	0x07E5, r17	; 0x8007e5 <u8ReturnedValue>
			case ROOM6_MENU:							// if room 6 menu
			control_rooms(ROOM6_MENU);					// call function that control room 6 lightning
    1efa:	88 e0       	ldi	r24, 0x08	; 8
    1efc:	0e 94 66 06 	call	0xccc	; 0xccc <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1f00:	dc 2f       	mov	r29, r28
			break;										// stop case
    1f02:	63 cf       	rjmp	.-314    	; 0x1dca <Print+0x6>
				LCD_vidDisplayString("0:Return >> ");	// display message on LCD screen
				u8ReturnedValue = u8GetKeyPressed();	// take choice from user 
				_delay_ms(200);							// wait for 200 m second
				if (u8ReturnedValue == '1')				// if choice equal 1
				{
					show_menu = ROOM1_MENU;				// display room 1 menu
    1f04:	d3 e0       	ldi	r29, 0x03	; 3
    1f06:	61 cf       	rjmp	.-318    	; 0x1dca <Print+0x6>
				}
				else if (u8ReturnedValue == '2')		// if choice equal 2
				{
					show_menu = ROOM2_MENU;				// display room 2 menu
    1f08:	d4 e0       	ldi	r29, 0x04	; 4
    1f0a:	5f cf       	rjmp	.-322    	; 0x1dca <Print+0x6>
				}
				else if (u8ReturnedValue == '3')		// if choice equal 3
				{
					show_menu = ROOM3_MENU;				// display room 3 menu
    1f0c:	d5 e0       	ldi	r29, 0x05	; 5
    1f0e:	5d cf       	rjmp	.-326    	; 0x1dca <Print+0x6>
				}
				else if (u8ReturnedValue == '4')		// if choice equal 4
				{
					show_menu = ROOM4_MENU;				// display room 4 menu
    1f10:	d6 e0       	ldi	r29, 0x06	; 6
    1f12:	5b cf       	rjmp	.-330    	; 0x1dca <Print+0x6>
				}
				else if (u8ReturnedValue == '5')		// if choice equal 5
				{
					show_menu = ROOM5_MENU;				// display room 5 menu
    1f14:	d7 e0       	ldi	r29, 0x07	; 7
    1f16:	59 cf       	rjmp	.-334    	; 0x1dca <Print+0x6>
				}
				else if (u8ReturnedValue == '6')		// if choice equal 6
				{
					show_menu = ROOM6_MENU;				// display room 6 menu
    1f18:	d8 e0       	ldi	r29, 0x08	; 8
    1f1a:	57 cf       	rjmp	.-338    	; 0x1dca <Print+0x6>

00001f1c <check_user_pass>:
		/*Function Description: void function take void and return void                                                
								check username & pass for user if correct or not*/
		/************************************************************************/
void check_user_pass()
{	
	LCD_vidClearScreen();								// move LCD cursor to first line
    1f1c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
	LCD_vidDisplayString("  User LOGIN ");				// display message on LCD
    1f20:	8b e0       	ldi	r24, 0x0B	; 11
    1f22:	97 e0       	ldi	r25, 0x07	; 7
    1f24:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1f28:	61 e0       	ldi	r22, 0x01	; 1
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("ID from (0-9) ");				// display message on LCD
    1f30:	89 e1       	ldi	r24, 0x19	; 25
    1f32:	97 e0       	ldi	r25, 0x07	; 7
    1f34:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	83 e0       	ldi	r24, 0x03	; 3
    1f3c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("Enter User ID:");				// display message on LCD
    1f40:	88 e2       	ldi	r24, 0x28	; 40
    1f42:	97 e0       	ldi	r25, 0x07	; 7
    1f44:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);								// move LCD cursor to fourth line
    1f48:	61 e0       	ldi	r22, 0x01	; 1
    1f4a:	84 e0       	ldi	r24, 0x04	; 4
    1f4c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">> ");						// display message on LCD
    1f50:	87 e0       	ldi	r24, 0x07	; 7
    1f52:	97 e0       	ldi	r25, 0x07	; 7
    1f54:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	UserId = u8GetKeyPressed();							// take user id from user
    1f58:	0e 94 52 06 	call	0xca4	; 0xca4 <u8GetKeyPressed>
    1f5c:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <UserId>
	read_EEPROM(UserId);								// read this user id from EEPROM
    1f60:	0e 94 96 0c 	call	0x192c	; 0x192c <read_EEPROM>
    1f64:	2f ef       	ldi	r18, 0xFF	; 255
    1f66:	81 ee       	ldi	r24, 0xE1	; 225
    1f68:	94 e0       	ldi	r25, 0x04	; 4
    1f6a:	21 50       	subi	r18, 0x01	; 1
    1f6c:	80 40       	sbci	r24, 0x00	; 0
    1f6e:	90 40       	sbci	r25, 0x00	; 0
    1f70:	e1 f7       	brne	.-8      	; 0x1f6a <check_user_pass+0x4e>
    1f72:	00 c0       	rjmp	.+0      	; 0x1f74 <check_user_pass+0x58>
    1f74:	00 00       	nop
	_delay_ms(200);										// wait 200 m second
	LCD_vidClearScreen();								// move LCD cursor to next line
    1f76:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
	LCD_vidDisplayString("Enter UserName:");			// display message on LCD
    1f7a:	88 e0       	ldi	r24, 0x08	; 8
    1f7c:	96 e0       	ldi	r25, 0x06	; 6
    1f7e:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1f82:	61 e0       	ldi	r22, 0x01	; 1
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">>");							// display message on LCD
    1f8a:	81 ee       	ldi	r24, 0xE1	; 225
    1f8c:	95 e0       	ldi	r25, 0x05	; 5
    1f8e:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	Scan_user();										// take username & pass from user
    1f92:	0e 94 13 0c 	call	0x1826	; 0x1826 <Scan_user>
    1f96:	e0 ef       	ldi	r30, 0xF0	; 240
    1f98:	f7 e0       	ldi	r31, 0x07	; 7
    1f9a:	ac ee       	ldi	r26, 0xEC	; 236
    1f9c:	b7 e0       	ldi	r27, 0x07	; 7
    1f9e:	24 ef       	ldi	r18, 0xF4	; 244
    1fa0:	37 e0       	ldi	r19, 0x07	; 7
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
	{
		if (user[i] == EEPROM_user[i])					// check if two value are equal or not
    1fa4:	91 91       	ld	r25, Z+
    1fa6:	8d 91       	ld	r24, X+
    1fa8:	98 13       	cpse	r25, r24
    1faa:	01 c0       	rjmp	.+2      	; 0x1fae <check_user_pass+0x92>
		{
			check_user++;								// if that increase the check variable by one
    1fac:	4f 5f       	subi	r20, 0xFF	; 255
	LCD_vidDisplayString("Enter UserName:");			// display message on LCD
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
	LCD_vidDisplayString(">>");							// display message on LCD
	Scan_user();										// take username & pass from user
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
    1fae:	e2 17       	cp	r30, r18
    1fb0:	f3 07       	cpc	r31, r19
    1fb2:	c1 f7       	brne	.-16     	; 0x1fa4 <check_user_pass+0x88>
    1fb4:	40 93 e7 07 	sts	0x07E7, r20	; 0x8007e7 <check_user>
		}
		else											//if not
		{
		}
	}
	LCD_vidMoveCursor(3,1);								// move LCD cursor to first line
    1fb8:	61 e0       	ldi	r22, 0x01	; 1
    1fba:	83 e0       	ldi	r24, 0x03	; 3
    1fbc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString("Enter Password:");			// display message on LCD
    1fc0:	88 e1       	ldi	r24, 0x18	; 24
    1fc2:	96 e0       	ldi	r25, 0x06	; 6
    1fc4:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(4, 1);							// move LCD cursor to next line
    1fc8:	61 e0       	ldi	r22, 0x01	; 1
    1fca:	84 e0       	ldi	r24, 0x04	; 4
    1fcc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">>");							// display message on LCD
    1fd0:	81 ee       	ldi	r24, 0xE1	; 225
    1fd2:	95 e0       	ldi	r25, 0x05	; 5
    1fd4:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	Scan_pass();										// take pass from user
    1fd8:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Scan_pass>
    1fdc:	e8 ee       	ldi	r30, 0xE8	; 232
    1fde:	f7 e0       	ldi	r31, 0x07	; 7
    1fe0:	a9 ef       	ldi	r26, 0xF9	; 249
    1fe2:	b7 e0       	ldi	r27, 0x07	; 7
    1fe4:	2c ee       	ldi	r18, 0xEC	; 236
    1fe6:	37 e0       	ldi	r19, 0x07	; 7
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
	{
		if (pass[i] == EEPROM_pass[i])					// check if two value are equal or not
    1fea:	91 91       	ld	r25, Z+
    1fec:	8d 91       	ld	r24, X+
    1fee:	98 13       	cpse	r25, r24
    1ff0:	01 c0       	rjmp	.+2      	; 0x1ff4 <check_user_pass+0xd8>
		{
			check++;									// if that increase the check variable by one
    1ff2:	4f 5f       	subi	r20, 0xFF	; 255
	LCD_vidDisplayString("Enter Password:");			// display message on LCD
	LCD_vidMoveCursor(4, 1);							// move LCD cursor to next line
	LCD_vidDisplayString(">>");							// display message on LCD
	Scan_pass();										// take pass from user
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
    1ff4:	e2 17       	cp	r30, r18
    1ff6:	f3 07       	cpc	r31, r19
    1ff8:	c1 f7       	brne	.-16     	; 0x1fea <check_user_pass+0xce>
    1ffa:	40 93 f8 07 	sts	0x07F8, r20	; 0x8007f8 <check>
		}
		else                                            // if not
		{
		}
	}
	LCD_vidClearScreen();								// clear LCD screen
    1ffe:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
	if(check == 4 && check_user == 4)					// check if check variable equal 4 or not (correct pass)
    2002:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <check>
    2006:	84 30       	cpi	r24, 0x04	; 4
    2008:	c1 f5       	brne	.+112    	; 0x207a <check_user_pass+0x15e>
    200a:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <check_user>
    200e:	84 30       	cpi	r24, 0x04	; 4
    2010:	a1 f5       	brne	.+104    	; 0x207a <check_user_pass+0x15e>
	{		
		LED_vidTurnOn(GPIOD, PIN4);						// turn on user mode led
    2012:	64 e0       	ldi	r22, 0x04	; 4
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	83 e0       	ldi	r24, 0x03	; 3
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 90 0a 	call	0x1520	; 0x1520 <LED_vidTurnOn>
		LED_vidTurnOff(GPIOD,PIN3);						// turn off admin mode led
    201e:	63 e0       	ldi	r22, 0x03	; 3
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	83 e0       	ldi	r24, 0x03	; 3
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
		LED_vidTurnOff(GPIOB,PIN5);						// turn off block mode led
    202a:	65 e0       	ldi	r22, 0x05	; 5
    202c:	70 e0       	ldi	r23, 0x00	; 0
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
		LCD_vidDisplayString("Correct Password");		// display message on LCD
    2036:	88 e2       	ldi	r24, 0x28	; 40
    2038:	96 e0       	ldi	r25, 0x06	; 6
    203a:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,1);
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString("Login ");					// display message on screen
    2046:	8a e5       	ldi	r24, 0x5A	; 90
    2048:	97 e0       	ldi	r25, 0x07	; 7
    204a:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(3,1);
    204e:	61 e0       	ldi	r22, 0x01	; 1
    2050:	83 e0       	ldi	r24, 0x03	; 3
    2052:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString("Successfully");			// display message on screen
    2056:	89 eb       	ldi	r24, 0xB9	; 185
    2058:	95 e0       	ldi	r25, 0x05	; 5
    205a:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
    205e:	2f e7       	ldi	r18, 0x7F	; 127
    2060:	8a e1       	ldi	r24, 0x1A	; 26
    2062:	96 e0       	ldi	r25, 0x06	; 6
    2064:	21 50       	subi	r18, 0x01	; 1
    2066:	80 40       	sbci	r24, 0x00	; 0
    2068:	90 40       	sbci	r25, 0x00	; 0
    206a:	e1 f7       	brne	.-8      	; 0x2064 <check_user_pass+0x148>
    206c:	00 c0       	rjmp	.+0      	; 0x206e <check_user_pass+0x152>
    206e:	00 00       	nop
		_delay_ms(250);									// delay 250m second to see message
		wrong_pass_count = 0;							// reset wrong_pass_count variable by reinitialize by 0
    2070:	10 92 e3 07 	sts	0x07E3, r1	; 0x8007e3 <wrong_pass_count>
		User_menue(); 									// call function that display user control menu
    2074:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <User_menue>
		{
		}
	}
	LCD_vidClearScreen();								// clear LCD screen
	if(check == 4 && check_user == 4)					// check if check variable equal 4 or not (correct pass)
	{		
    2078:	25 c0       	rjmp	.+74     	; 0x20c4 <check_user_pass+0x1a8>
		wrong_pass_count = 0;							// reset wrong_pass_count variable by reinitialize by 0
		User_menue(); 									// call function that display user control menu
	}
	else												// if not
	{
		wrong_pass_count++;								// increase wrong_pass_count variable by one
    207a:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <wrong_pass_count>
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <wrong_pass_count>
		LCD_vidDisplayString("Wrong password");			// display message on LCD
    2084:	89 e3       	ldi	r24, 0x39	; 57
    2086:	96 e0       	ldi	r25, 0x06	; 6
    2088:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(2, 1);						// move LCD cursor to second line
    208c:	61 e0       	ldi	r22, 0x01	; 1
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString("or user");				// display message on LCD
    2094:	88 e4       	ldi	r24, 0x48	; 72
    2096:	96 e0       	ldi	r25, 0x06	; 6
    2098:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(3, 1);						// move LCD cursor to next line
    209c:	61 e0       	ldi	r22, 0x01	; 1
    209e:	83 e0       	ldi	r24, 0x03	; 3
    20a0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString("Rem times:");				// display message on LCD
    20a4:	80 e5       	ldi	r24, 0x50	; 80
    20a6:	96 e0       	ldi	r25, 0x06	; 6
    20a8:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidDisplayNumber(3-wrong_pass_count);		// display number of reaming tries
    20ac:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <wrong_pass_count>
    20b0:	63 e0       	ldi	r22, 0x03	; 3
    20b2:	70 e0       	ldi	r23, 0x00	; 0
    20b4:	68 1b       	sub	r22, r24
    20b6:	71 09       	sbc	r23, r1
    20b8:	07 2e       	mov	r0, r23
    20ba:	00 0c       	add	r0, r0
    20bc:	88 0b       	sbc	r24, r24
    20be:	99 0b       	sbc	r25, r25
    20c0:	0e 94 40 0a 	call	0x1480	; 0x1480 <LCD_vidDisplayNumber>
    20c4:	2f ef       	ldi	r18, 0xFF	; 255
    20c6:	80 e7       	ldi	r24, 0x70	; 112
    20c8:	92 e0       	ldi	r25, 0x02	; 2
    20ca:	21 50       	subi	r18, 0x01	; 1
    20cc:	80 40       	sbci	r24, 0x00	; 0
    20ce:	90 40       	sbci	r25, 0x00	; 0
    20d0:	e1 f7       	brne	.-8      	; 0x20ca <check_user_pass+0x1ae>
    20d2:	00 c0       	rjmp	.+0      	; 0x20d4 <check_user_pass+0x1b8>
    20d4:	00 00       	nop
    20d6:	08 95       	ret

000020d8 <start>:
		/*Function Description: void function take void and return void
		                        set pass if not set or read pass if already set	*/
		/************************************************************************/
void start()
{
	pass_check = EEPROM_u8Read(PASS_address_check);		// check if pass set or not by reading value in PASS_address_check
    20d8:	80 e5       	ldi	r24, 0x50	; 80
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	0e 94 0d 09 	call	0x121a	; 0x121a <EEPROM_u8Read>
    20e0:	80 93 fd 07 	sts	0x07FD, r24	; 0x8007fd <pass_check>
	if (pass_check != 0)								// check if value of pass_check equal to 0 or not 
    20e4:	88 23       	and	r24, r24
    20e6:	09 f4       	brne	.+2      	; 0x20ea <start+0x12>
    20e8:	6e c0       	rjmp	.+220    	; 0x21c6 <start+0xee>
	{
		LCD_vidDisplayString("Set Admin Name:");		// display message on LCD
    20ea:	87 e3       	ldi	r24, 0x37	; 55
    20ec:	97 e0       	ldi	r25, 0x07	; 7
    20ee:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,1);							// move cursor of LCD to second line
    20f2:	61 e0       	ldi	r22, 0x01	; 1
    20f4:	82 e0       	ldi	r24, 0x02	; 2
    20f6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">>");						// display message on LCD
    20fa:	81 ee       	ldi	r24, 0xE1	; 225
    20fc:	95 e0       	ldi	r25, 0x05	; 5
    20fe:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		Scan_user();									// call function that take username from user
    2102:	0e 94 13 0c 	call	0x1826	; 0x1826 <Scan_user>
		LCD_vidMoveCursor(3,1);							// move cursor of LCD third line
    2106:	61 e0       	ldi	r22, 0x01	; 1
    2108:	83 e0       	ldi	r24, 0x03	; 3
    210a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString("Please,Set Pass:");		// display message on LCD
    210e:	85 e8       	ldi	r24, 0x85	; 133
    2110:	96 e0       	ldi	r25, 0x06	; 6
    2112:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(4,1);							// move LCD cursor to fourth line
    2116:	61 e0       	ldi	r22, 0x01	; 1
    2118:	84 e0       	ldi	r24, 0x04	; 4
    211a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">>");						// display message on LCD screen
    211e:	81 ee       	ldi	r24, 0xE1	; 225
    2120:	95 e0       	ldi	r25, 0x05	; 5
    2122:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		Scan_pass();									// call function that take pass from user
    2126:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Scan_pass>
		write_EEPROM(0x0);								// call function that write username and pass in EEPROM
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	0e 94 44 0c 	call	0x1888	; 0x1888 <write_EEPROM>
		LCD_vidClearScreen();							// clear LCD screen 
    2130:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		LCD_vidDisplayString("Admin Set ");				// display message on LCD screen
    2134:	87 e4       	ldi	r24, 0x47	; 71
    2136:	97 e0       	ldi	r25, 0x07	; 7
    2138:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,1);							// move cursor of LCD to second line
    213c:	61 e0       	ldi	r22, 0x01	; 1
    213e:	82 e0       	ldi	r24, 0x02	; 2
    2140:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString("Successfully");			// display message on LCD screen
    2144:	89 eb       	ldi	r24, 0xB9	; 185
    2146:	95 e0       	ldi	r25, 0x05	; 5
    2148:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
    214c:	2f ef       	ldi	r18, 0xFF	; 255
    214e:	81 ee       	ldi	r24, 0xE1	; 225
    2150:	94 e0       	ldi	r25, 0x04	; 4
    2152:	21 50       	subi	r18, 0x01	; 1
    2154:	80 40       	sbci	r24, 0x00	; 0
    2156:	90 40       	sbci	r25, 0x00	; 0
    2158:	e1 f7       	brne	.-8      	; 0x2152 <start+0x7a>
    215a:	00 c0       	rjmp	.+0      	; 0x215c <start+0x84>
    215c:	00 00       	nop
		_delay_ms(200);									// wait for 200 m second
		EEPROM_vidWrite(PASS_address_check, 0);			// change value in PASS_address_check to zero (as pass is set)
    215e:	60 e0       	ldi	r22, 0x00	; 0
    2160:	70 e0       	ldi	r23, 0x00	; 0
    2162:	80 e5       	ldi	r24, 0x50	; 80
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	0e 94 04 09 	call	0x1208	; 0x1208 <EEPROM_vidWrite>
		pass_check = EEPROM_u8Read(PASS_address_check);	// check if pass is set or not by reading value in PASS_address_check 
    216a:	80 e5       	ldi	r24, 0x50	; 80
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	0e 94 0d 09 	call	0x121a	; 0x121a <EEPROM_u8Read>
    2172:	80 93 fd 07 	sts	0x07FD, r24	; 0x8007fd <pass_check>
		LCD_vidClearScreen();							// clear LCD screen
    2176:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		LCD_vidDisplayString("1.Admin Login ");			// display message on LCD screen
    217a:	82 e5       	ldi	r24, 0x52	; 82
    217c:	97 e0       	ldi	r25, 0x07	; 7
    217e:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,1);							// move cursor of LCD to second line
    2182:	61 e0       	ldi	r22, 0x01	; 1
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString("2.User Login ");			// display message on LCD screen
    218a:	81 e6       	ldi	r24, 0x61	; 97
    218c:	97 e0       	ldi	r25, 0x07	; 7
    218e:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(3,1);							// move cursor of LCD to third line
    2192:	61 e0       	ldi	r22, 0x01	; 1
    2194:	83 e0       	ldi	r24, 0x03	; 3
    2196:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">>");						// display message on LCD screen
    219a:	81 ee       	ldi	r24, 0xE1	; 225
    219c:	95 e0       	ldi	r25, 0x05	; 5
    219e:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		choice = u8GetKeyPressed();						// take choice from user
    21a2:	0e 94 52 06 	call	0xca4	; 0xca4 <u8GetKeyPressed>
    21a6:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <choice>
    21aa:	2f e7       	ldi	r18, 0x7F	; 127
    21ac:	89 ea       	ldi	r24, 0xA9	; 169
    21ae:	93 e0       	ldi	r25, 0x03	; 3
    21b0:	21 50       	subi	r18, 0x01	; 1
    21b2:	80 40       	sbci	r24, 0x00	; 0
    21b4:	90 40       	sbci	r25, 0x00	; 0
    21b6:	e1 f7       	brne	.-8      	; 0x21b0 <start+0xd8>
    21b8:	00 c0       	rjmp	.+0      	; 0x21ba <start+0xe2>
    21ba:	00 00       	nop
		_delay_ms(150);									// wait for 150 m second
		logInFlag=choice;								// store choice in login flag variable
    21bc:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <choice>
    21c0:	80 93 ff 07 	sts	0x07FF, r24	; 0x8007ff <logInFlag>
    21c4:	08 95       	ret
	}
	else												// if not
	{  
		LCD_vidClearScreen();							// clear LCD screen
    21c6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		LCD_vidDisplayString("1.Admin Login ");			// display message on LCD screen
    21ca:	82 e5       	ldi	r24, 0x52	; 82
    21cc:	97 e0       	ldi	r25, 0x07	; 7
    21ce:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,1);							// move cursor of LCD to second line
    21d2:	61 e0       	ldi	r22, 0x01	; 1
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString("2.User Login ");			// display message on LCD screen
    21da:	81 e6       	ldi	r24, 0x61	; 97
    21dc:	97 e0       	ldi	r25, 0x07	; 7
    21de:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LCD_vidMoveCursor(3,1);							// move cursor of LCD to third line
    21e2:	61 e0       	ldi	r22, 0x01	; 1
    21e4:	83 e0       	ldi	r24, 0x03	; 3
    21e6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">>");						// display message on LCD screen
    21ea:	81 ee       	ldi	r24, 0xE1	; 225
    21ec:	95 e0       	ldi	r25, 0x05	; 5
    21ee:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		choice = u8GetKeyPressed();						// take choice from user
    21f2:	0e 94 52 06 	call	0xca4	; 0xca4 <u8GetKeyPressed>
    21f6:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <choice>
    21fa:	2f e7       	ldi	r18, 0x7F	; 127
    21fc:	89 ea       	ldi	r24, 0xA9	; 169
    21fe:	93 e0       	ldi	r25, 0x03	; 3
    2200:	21 50       	subi	r18, 0x01	; 1
    2202:	80 40       	sbci	r24, 0x00	; 0
    2204:	90 40       	sbci	r25, 0x00	; 0
    2206:	e1 f7       	brne	.-8      	; 0x2200 <start+0x128>
    2208:	00 c0       	rjmp	.+0      	; 0x220a <start+0x132>
    220a:	00 00       	nop
		_delay_ms(150);									// wait for 150 m second
		logInFlag=choice;								// store choice in login flag variable
    220c:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <choice>
    2210:	80 93 ff 07 	sts	0x07FF, r24	; 0x8007ff <logInFlag>
		if (choice == '1')
    2214:	81 33       	cpi	r24, 0x31	; 49
    2216:	19 f4       	brne	.+6      	; 0x221e <start+0x146>
		{
			check_admin_pass();
    2218:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <check_admin_pass>
    221c:	08 95       	ret
		}
		else if (choice == '2')
    221e:	82 33       	cpi	r24, 0x32	; 50
    2220:	19 f4       	brne	.+6      	; 0x2228 <start+0x150>
		{
			check_user_pass();
    2222:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <check_user_pass>
    2226:	08 95       	ret
		}
		else
		{
			LCD_vidClearScreen();
    2228:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
			LCD_vidDisplayString("wrong input");
    222c:	8f e6       	ldi	r24, 0x6F	; 111
    222e:	97 e0       	ldi	r25, 0x07	; 7
    2230:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
    2234:	2f e7       	ldi	r18, 0x7F	; 127
    2236:	89 ea       	ldi	r24, 0xA9	; 169
    2238:	93 e0       	ldi	r25, 0x03	; 3
    223a:	21 50       	subi	r18, 0x01	; 1
    223c:	80 40       	sbci	r24, 0x00	; 0
    223e:	90 40       	sbci	r25, 0x00	; 0
    2240:	e1 f7       	brne	.-8      	; 0x223a <start+0x162>
    2242:	00 c0       	rjmp	.+0      	; 0x2244 <start+0x16c>
    2244:	00 00       	nop
			_delay_ms(150);
			start();
    2246:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <start>
    224a:	08 95       	ret

0000224c <smart_lock>:
		/*Function Description: u8 type function take void and return variable form u8 type                                                 
								if pass wrong and exceed tries safe go on lock mode */
		/************************************************************************/
u8 smart_lock()
{
	if (choice=='1')									// if choice equal to 1
    224c:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <choice>
    2250:	81 33       	cpi	r24, 0x31	; 49
    2252:	29 f4       	brne	.+10     	; 0x225e <smart_lock+0x12>
	{
		logInFlag=0;									// set login flag to 0
    2254:	10 92 ff 07 	sts	0x07FF, r1	; 0x8007ff <logInFlag>
		check_admin_pass();								// call function that check admin username & pass
    2258:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <check_admin_pass>
    225c:	10 c0       	rjmp	.+32     	; 0x227e <smart_lock+0x32>
		Isadmin();										// call function that check login flag
	}
	else if (choice=='2')								// if choice equal to 2
    225e:	82 33       	cpi	r24, 0x32	; 50
    2260:	31 f4       	brne	.+12     	; 0x226e <smart_lock+0x22>
	{
		logInFlag=1;									// set login flag to 1
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	80 93 ff 07 	sts	0x07FF, r24	; 0x8007ff <logInFlag>
		check_user_pass();								// call function that check user username & pass
    2268:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <check_user_pass>
    226c:	08 c0       	rjmp	.+16     	; 0x227e <smart_lock+0x32>
		Isadmin();										// call function that check login flag
	}
	else												// if not 
	{
		LCD_vidClearScreen();							// clear LCD screen
    226e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		LCD_vidDisplayString("Wrong Choice");			// display message on LCD
    2272:	85 ea       	ldi	r24, 0xA5	; 165
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		start();										// call function that start the system
    227a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <start>
	}
	if (wrong_pass_count == 3)							// check if user exceed maximum number of tries or not
    227e:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <wrong_pass_count>
    2282:	83 30       	cpi	r24, 0x03	; 3
    2284:	81 f5       	brne	.+96     	; 0x22e6 <smart_lock+0x9a>
	{
		wrong_pass_count = 0;							// set wrong pass counter to 0
    2286:	10 92 e3 07 	sts	0x07E3, r1	; 0x8007e3 <wrong_pass_count>
		LCD_vidClearScreen();							// clear LCD screen
    228a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		LCD_vidDisplayString("Locked Mode!!");			// display message on LCD
    228e:	8b e7       	ldi	r24, 0x7B	; 123
    2290:	97 e0       	ldi	r25, 0x07	; 7
    2292:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		LED_vidTurnOn(GPIOB, PIN5);						// turn on block mode led
    2296:	65 e0       	ldi	r22, 0x05	; 5
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	0e 94 90 0a 	call	0x1520	; 0x1520 <LED_vidTurnOn>
		LED_vidTurnOff(GPIOD,PIN4);						// turn off user mode led
    22a2:	64 e0       	ldi	r22, 0x04	; 4
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	83 e0       	ldi	r24, 0x03	; 3
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
		LED_vidTurnOff(GPIOD,PIN3);						// turn off admin mode led
    22ae:	63 e0       	ldi	r22, 0x03	; 3
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	83 e0       	ldi	r24, 0x03	; 3
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	0e 94 94 0a 	call	0x1528	; 0x1528 <LED_vidTurnOff>
		DIO_vidWritePin(GPIOD,PIN7,HIGH);				// output hight on pin to turn on buzzer
    22ba:	41 e0       	ldi	r20, 0x01	; 1
    22bc:	67 e0       	ldi	r22, 0x07	; 7
    22be:	83 e0       	ldi	r24, 0x03	; 3
    22c0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
    22c4:	2a ea       	ldi	r18, 0xAA	; 170
    22c6:	36 ee       	ldi	r19, 0xE6	; 230
    22c8:	86 e9       	ldi	r24, 0x96	; 150
    22ca:	91 e0       	ldi	r25, 0x01	; 1
    22cc:	21 50       	subi	r18, 0x01	; 1
    22ce:	30 40       	sbci	r19, 0x00	; 0
    22d0:	80 40       	sbci	r24, 0x00	; 0
    22d2:	90 40       	sbci	r25, 0x00	; 0
    22d4:	d9 f7       	brne	.-10     	; 0x22cc <smart_lock+0x80>
    22d6:	00 00       	nop
		_delay_ms(20000);								// wait for 20 second
		DIO_vidWritePin(GPIOD,PIN7,LOW);				// output hight on pin to turn off buzzer
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	67 e0       	ldi	r22, 0x07	; 7
    22dc:	83 e0       	ldi	r24, 0x03	; 3
    22de:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_vidWritePin>
		start();										// call function that start the system
    22e2:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <start>
	}
	return wrong_pass_count;							// return value of wrong_pass_count variable
}
    22e6:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <wrong_pass_count>
    22ea:	08 95       	ret

000022ec <Open_Door>:
		/*Function Description: void function take void and return void                                                
								control door opening & closing					*/
		/************************************************************************/
void Open_Door()
{
	LCD_vidClearScreen();								// clear LCD screen
    22ec:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
	LCD_vidDisplayString("DOOR IS: ");					// display message on LCD
    22f0:	89 e8       	ldi	r24, 0x89	; 137
    22f2:	97 e0       	ldi	r25, 0x07	; 7
    22f4:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	if(door == 1)										// if door equal to 1
    22f8:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <__data_end>
    22fc:	81 30       	cpi	r24, 0x01	; 1
    22fe:	29 f4       	brne	.+10     	; 0x230a <Open_Door+0x1e>
	{
		LCD_vidDisplayString("OPEN");					// display message on LCD
    2300:	83 e9       	ldi	r24, 0x93	; 147
    2302:	97 e0       	ldi	r25, 0x07	; 7
    2304:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
    2308:	06 c0       	rjmp	.+12     	; 0x2316 <Open_Door+0x2a>
	}
	else if(door == 0)									// if door equal to 0	
    230a:	81 11       	cpse	r24, r1
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <Open_Door+0x2a>
	{
		LCD_vidDisplayString("CLOSE");					// display message on LCD
    230e:	88 e9       	ldi	r24, 0x98	; 152
    2310:	97 e0       	ldi	r25, 0x07	; 7
    2312:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	}	
	LCD_vidMoveCursor(2,1);								// move cursor to second line	
    2316:	61 e0       	ldi	r22, 0x01	; 1
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">> 1-open door ");			// display message on LCD
    231e:	8e e9       	ldi	r24, 0x9E	; 158
    2320:	97 e0       	ldi	r25, 0x07	; 7
    2322:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move cursor to third line
    2326:	61 e0       	ldi	r22, 0x01	; 1
    2328:	83 e0       	ldi	r24, 0x03	; 3
    232a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">> 2-close door ");			// display message on LCD
    232e:	8e ea       	ldi	r24, 0xAE	; 174
    2330:	97 e0       	ldi	r25, 0x07	; 7
    2332:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);								// move cursor to fourth line
    2336:	61 e0       	ldi	r22, 0x01	; 1
    2338:	84 e0       	ldi	r24, 0x04	; 4
    233a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">> 0-RET ");					// display message on LCD
    233e:	80 e3       	ldi	r24, 0x30	; 48
    2340:	95 e0       	ldi	r25, 0x05	; 5
    2342:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
//	_delay_ms(250);										// wait for 250 m second
	u8ReturnedValue = u8GetKeyPressed();				// take choice from user
    2346:	0e 94 52 06 	call	0xca4	; 0xca4 <u8GetKeyPressed>
    234a:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <u8ReturnedValue>
//	_delay_ms(200);										// wait for 200 m second
	if (u8ReturnedValue == '1')							// if choice equal 1
    234e:	81 33       	cpi	r24, 0x31	; 49
    2350:	b9 f4       	brne	.+46     	; 0x2380 <Open_Door+0x94>
	{
		LCD_vidClearScreen();							// clear LCD screen
    2352:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		LCD_vidDisplayString("door opening----");		// display message on LCD
    2356:	8f eb       	ldi	r24, 0xBF	; 191
    2358:	97 e0       	ldi	r25, 0x07	; 7
    235a:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		Servo_Clockwise(angle);							// turn on the servo on clock wise
    235e:	8a e5       	ldi	r24, 0x5A	; 90
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 aa 0b 	call	0x1754	; 0x1754 <Servo_Clockwise>
    2366:	2f ef       	ldi	r18, 0xFF	; 255
    2368:	89 e6       	ldi	r24, 0x69	; 105
    236a:	98 e1       	ldi	r25, 0x18	; 24
    236c:	21 50       	subi	r18, 0x01	; 1
    236e:	80 40       	sbci	r24, 0x00	; 0
    2370:	90 40       	sbci	r25, 0x00	; 0
    2372:	e1 f7       	brne	.-8      	; 0x236c <Open_Door+0x80>
    2374:	00 c0       	rjmp	.+0      	; 0x2376 <Open_Door+0x8a>
    2376:	00 00       	nop
		_delay_ms(1000);								// wait for one second
		door= 1;										// set door equal 1
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <__data_end>
    237e:	25 c0       	rjmp	.+74     	; 0x23ca <Open_Door+0xde>
	}
	else if(u8ReturnedValue == '2')						// if choice equal 2
    2380:	82 33       	cpi	r24, 0x32	; 50
    2382:	b1 f4       	brne	.+44     	; 0x23b0 <Open_Door+0xc4>
	{
		LCD_vidClearScreen();							// clear LCD screen
    2384:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		LCD_vidDisplayString("door closing----");		// display message on LCD
    2388:	80 ed       	ldi	r24, 0xD0	; 208
    238a:	97 e0       	ldi	r25, 0x07	; 7
    238c:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		Servo_Counterclockwise(angle);					// turn on the servo on anti clock wise
    2390:	8a e5       	ldi	r24, 0x5A	; 90
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Servo_Counterclockwise>
    2398:	2f ef       	ldi	r18, 0xFF	; 255
    239a:	89 e6       	ldi	r24, 0x69	; 105
    239c:	98 e1       	ldi	r25, 0x18	; 24
    239e:	21 50       	subi	r18, 0x01	; 1
    23a0:	80 40       	sbci	r24, 0x00	; 0
    23a2:	90 40       	sbci	r25, 0x00	; 0
    23a4:	e1 f7       	brne	.-8      	; 0x239e <Open_Door+0xb2>
    23a6:	00 c0       	rjmp	.+0      	; 0x23a8 <Open_Door+0xbc>
    23a8:	00 00       	nop
		_delay_ms(1000);								// wait for one second
		door = 0;										// set door equal 0
    23aa:	10 92 e2 07 	sts	0x07E2, r1	; 0x8007e2 <__data_end>
    23ae:	0d c0       	rjmp	.+26     	; 0x23ca <Open_Door+0xde>
	}
	else if (u8ReturnedValue == '0')					// if choice equal 0
    23b0:	80 33       	cpi	r24, 0x30	; 48
    23b2:	19 f4       	brne	.+6      	; 0x23ba <Open_Door+0xce>
	{
		Home_control_Menue();							// call function that display admin control menu
    23b4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Home_control_Menue>
    23b8:	08 c0       	rjmp	.+16     	; 0x23ca <Open_Door+0xde>
	}
	else												// if not 
	{
		LCD_vidClearScreen();							// clear LCD screen
    23ba:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_vidClearScreen>
		LCD_vidDisplayString("wrong input");			// display message on LCD
    23be:	8f e6       	ldi	r24, 0x6F	; 111
    23c0:	97 e0       	ldi	r25, 0x07	; 7
    23c2:	0e 94 31 0a 	call	0x1462	; 0x1462 <LCD_vidDisplayString>
		Open_Door();									// call function that control door opening
    23c6:	0e 94 76 11 	call	0x22ec	; 0x22ec <Open_Door>
	}
	Home_control_Menue();								// call function that display admin control menu 
    23ca:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Home_control_Menue>
    23ce:	08 95       	ret

000023d0 <USART_vidInit>:
    CB_RX = copy_CB;
}

void USART_vidSetCBUDRE(void(*copy_CB)(void))
{
    CB_UDR = copy_CB;
    23d0:	20 b5       	in	r18, 0x20	; 32
    23d2:	2f 77       	andi	r18, 0x7F	; 127
    23d4:	20 bd       	out	0x20, r18	; 32
    23d6:	20 b5       	in	r18, 0x20	; 32
    23d8:	2f 7b       	andi	r18, 0xBF	; 191
    23da:	20 bd       	out	0x20, r18	; 32
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	aa 1f       	adc	r26, r26
    23e6:	bb 1f       	adc	r27, r27
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	aa 1f       	adc	r26, r26
    23ee:	bb 1f       	adc	r27, r27
    23f0:	9c 01       	movw	r18, r24
    23f2:	ad 01       	movw	r20, r26
    23f4:	22 0f       	add	r18, r18
    23f6:	33 1f       	adc	r19, r19
    23f8:	44 1f       	adc	r20, r20
    23fa:	55 1f       	adc	r21, r21
    23fc:	22 0f       	add	r18, r18
    23fe:	33 1f       	adc	r19, r19
    2400:	44 1f       	adc	r20, r20
    2402:	55 1f       	adc	r21, r21
    2404:	60 e0       	ldi	r22, 0x00	; 0
    2406:	72 e1       	ldi	r23, 0x12	; 18
    2408:	8a e7       	ldi	r24, 0x7A	; 122
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <__udivmodsi4>
    2410:	21 50       	subi	r18, 0x01	; 1
    2412:	31 09       	sbc	r19, r1
    2414:	80 b5       	in	r24, 0x20	; 32
    2416:	82 60       	ori	r24, 0x02	; 2
    2418:	80 bd       	out	0x20, r24	; 32
    241a:	80 b5       	in	r24, 0x20	; 32
    241c:	84 60       	ori	r24, 0x04	; 4
    241e:	80 bd       	out	0x20, r24	; 32
    2420:	52 98       	cbi	0x0a, 2	; 10
    2422:	80 b5       	in	r24, 0x20	; 32
    2424:	8f 7e       	andi	r24, 0xEF	; 239
    2426:	80 bd       	out	0x20, r24	; 32
    2428:	80 b5       	in	r24, 0x20	; 32
    242a:	8f 7d       	andi	r24, 0xDF	; 223
    242c:	80 bd       	out	0x20, r24	; 32
    242e:	80 b5       	in	r24, 0x20	; 32
    2430:	88 60       	ori	r24, 0x08	; 8
    2432:	80 bd       	out	0x20, r24	; 32
    2434:	53 9a       	sbi	0x0a, 3	; 10
    2436:	54 9a       	sbi	0x0a, 4	; 10
    2438:	80 b5       	in	r24, 0x20	; 32
    243a:	80 68       	ori	r24, 0x80	; 128
    243c:	80 bd       	out	0x20, r24	; 32
    243e:	30 bd       	out	0x20, r19	; 32
    2440:	29 b9       	out	0x09, r18	; 9
    2442:	08 95       	ret

00002444 <USART_vidSendByte>:
    2444:	5d 9b       	sbis	0x0b, 5	; 11
    2446:	fe cf       	rjmp	.-4      	; 0x2444 <USART_vidSendByte>
    2448:	8c b9       	out	0x0c, r24	; 12
    244a:	08 95       	ret

0000244c <USART_u8RecieveByte>:
    244c:	5f 9b       	sbis	0x0b, 7	; 11
    244e:	fe cf       	rjmp	.-4      	; 0x244c <USART_u8RecieveByte>
    2450:	8c b1       	in	r24, 0x0c	; 12
    2452:	08 95       	ret

00002454 <USART_vidEnableTXInterrupt>:
    2454:	56 9a       	sbi	0x0a, 6	; 10
    2456:	08 95       	ret

00002458 <USART_vidEnableRXInterrupt>:
    2458:	57 9a       	sbi	0x0a, 7	; 10
    245a:	08 95       	ret

0000245c <USART_vidSendString>:
}

void USART_vidSendString(u8 *copy_ptrString)
{
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	ec 01       	movw	r28, r24
    while((*copy_ptrString) != '\0')
    2462:	88 81       	ld	r24, Y
    2464:	88 23       	and	r24, r24
    2466:	31 f0       	breq	.+12     	; 0x2474 <USART_vidSendString+0x18>
    2468:	21 96       	adiw	r28, 0x01	; 1
    {
        USART_vidSendByte(*copy_ptrString);
    246a:	0e 94 22 12 	call	0x2444	; 0x2444 <USART_vidSendByte>
    CB_UDR = copy_CB;
}

void USART_vidSendString(u8 *copy_ptrString)
{
    while((*copy_ptrString) != '\0')
    246e:	89 91       	ld	r24, Y+
    2470:	81 11       	cpse	r24, r1
    2472:	fb cf       	rjmp	.-10     	; 0x246a <USART_vidSendString+0xe>
    {
        USART_vidSendByte(*copy_ptrString);
        copy_ptrString++;
    }
}
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	08 95       	ret

0000247a <__subsf3>:
    247a:	50 58       	subi	r21, 0x80	; 128

0000247c <__addsf3>:
    247c:	bb 27       	eor	r27, r27
    247e:	aa 27       	eor	r26, r26
    2480:	0e 94 55 12 	call	0x24aa	; 0x24aa <__addsf3x>
    2484:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__fp_round>
    2488:	0e 94 1f 13 	call	0x263e	; 0x263e <__fp_pscA>
    248c:	38 f0       	brcs	.+14     	; 0x249c <__addsf3+0x20>
    248e:	0e 94 26 13 	call	0x264c	; 0x264c <__fp_pscB>
    2492:	20 f0       	brcs	.+8      	; 0x249c <__addsf3+0x20>
    2494:	39 f4       	brne	.+14     	; 0x24a4 <__addsf3+0x28>
    2496:	9f 3f       	cpi	r25, 0xFF	; 255
    2498:	19 f4       	brne	.+6      	; 0x24a0 <__addsf3+0x24>
    249a:	26 f4       	brtc	.+8      	; 0x24a4 <__addsf3+0x28>
    249c:	0c 94 1c 13 	jmp	0x2638	; 0x2638 <__fp_nan>
    24a0:	0e f4       	brtc	.+2      	; 0x24a4 <__addsf3+0x28>
    24a2:	e0 95       	com	r30
    24a4:	e7 fb       	bst	r30, 7
    24a6:	0c 94 16 13 	jmp	0x262c	; 0x262c <__fp_inf>

000024aa <__addsf3x>:
    24aa:	e9 2f       	mov	r30, r25
    24ac:	0e 94 3e 13 	call	0x267c	; 0x267c <__fp_split3>
    24b0:	58 f3       	brcs	.-42     	; 0x2488 <__addsf3+0xc>
    24b2:	ba 17       	cp	r27, r26
    24b4:	62 07       	cpc	r22, r18
    24b6:	73 07       	cpc	r23, r19
    24b8:	84 07       	cpc	r24, r20
    24ba:	95 07       	cpc	r25, r21
    24bc:	20 f0       	brcs	.+8      	; 0x24c6 <__addsf3x+0x1c>
    24be:	79 f4       	brne	.+30     	; 0x24de <__addsf3x+0x34>
    24c0:	a6 f5       	brtc	.+104    	; 0x252a <__addsf3x+0x80>
    24c2:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__fp_zero>
    24c6:	0e f4       	brtc	.+2      	; 0x24ca <__addsf3x+0x20>
    24c8:	e0 95       	com	r30
    24ca:	0b 2e       	mov	r0, r27
    24cc:	ba 2f       	mov	r27, r26
    24ce:	a0 2d       	mov	r26, r0
    24d0:	0b 01       	movw	r0, r22
    24d2:	b9 01       	movw	r22, r18
    24d4:	90 01       	movw	r18, r0
    24d6:	0c 01       	movw	r0, r24
    24d8:	ca 01       	movw	r24, r20
    24da:	a0 01       	movw	r20, r0
    24dc:	11 24       	eor	r1, r1
    24de:	ff 27       	eor	r31, r31
    24e0:	59 1b       	sub	r21, r25
    24e2:	99 f0       	breq	.+38     	; 0x250a <__addsf3x+0x60>
    24e4:	59 3f       	cpi	r21, 0xF9	; 249
    24e6:	50 f4       	brcc	.+20     	; 0x24fc <__addsf3x+0x52>
    24e8:	50 3e       	cpi	r21, 0xE0	; 224
    24ea:	68 f1       	brcs	.+90     	; 0x2546 <__addsf3x+0x9c>
    24ec:	1a 16       	cp	r1, r26
    24ee:	f0 40       	sbci	r31, 0x00	; 0
    24f0:	a2 2f       	mov	r26, r18
    24f2:	23 2f       	mov	r18, r19
    24f4:	34 2f       	mov	r19, r20
    24f6:	44 27       	eor	r20, r20
    24f8:	58 5f       	subi	r21, 0xF8	; 248
    24fa:	f3 cf       	rjmp	.-26     	; 0x24e2 <__addsf3x+0x38>
    24fc:	46 95       	lsr	r20
    24fe:	37 95       	ror	r19
    2500:	27 95       	ror	r18
    2502:	a7 95       	ror	r26
    2504:	f0 40       	sbci	r31, 0x00	; 0
    2506:	53 95       	inc	r21
    2508:	c9 f7       	brne	.-14     	; 0x24fc <__addsf3x+0x52>
    250a:	7e f4       	brtc	.+30     	; 0x252a <__addsf3x+0x80>
    250c:	1f 16       	cp	r1, r31
    250e:	ba 0b       	sbc	r27, r26
    2510:	62 0b       	sbc	r22, r18
    2512:	73 0b       	sbc	r23, r19
    2514:	84 0b       	sbc	r24, r20
    2516:	ba f0       	brmi	.+46     	; 0x2546 <__addsf3x+0x9c>
    2518:	91 50       	subi	r25, 0x01	; 1
    251a:	a1 f0       	breq	.+40     	; 0x2544 <__addsf3x+0x9a>
    251c:	ff 0f       	add	r31, r31
    251e:	bb 1f       	adc	r27, r27
    2520:	66 1f       	adc	r22, r22
    2522:	77 1f       	adc	r23, r23
    2524:	88 1f       	adc	r24, r24
    2526:	c2 f7       	brpl	.-16     	; 0x2518 <__addsf3x+0x6e>
    2528:	0e c0       	rjmp	.+28     	; 0x2546 <__addsf3x+0x9c>
    252a:	ba 0f       	add	r27, r26
    252c:	62 1f       	adc	r22, r18
    252e:	73 1f       	adc	r23, r19
    2530:	84 1f       	adc	r24, r20
    2532:	48 f4       	brcc	.+18     	; 0x2546 <__addsf3x+0x9c>
    2534:	87 95       	ror	r24
    2536:	77 95       	ror	r23
    2538:	67 95       	ror	r22
    253a:	b7 95       	ror	r27
    253c:	f7 95       	ror	r31
    253e:	9e 3f       	cpi	r25, 0xFE	; 254
    2540:	08 f0       	brcs	.+2      	; 0x2544 <__addsf3x+0x9a>
    2542:	b0 cf       	rjmp	.-160    	; 0x24a4 <__addsf3+0x28>
    2544:	93 95       	inc	r25
    2546:	88 0f       	add	r24, r24
    2548:	08 f0       	brcs	.+2      	; 0x254c <__addsf3x+0xa2>
    254a:	99 27       	eor	r25, r25
    254c:	ee 0f       	add	r30, r30
    254e:	97 95       	ror	r25
    2550:	87 95       	ror	r24
    2552:	08 95       	ret

00002554 <__fixunssfsi>:
    2554:	0e 94 46 13 	call	0x268c	; 0x268c <__fp_splitA>
    2558:	88 f0       	brcs	.+34     	; 0x257c <__fixunssfsi+0x28>
    255a:	9f 57       	subi	r25, 0x7F	; 127
    255c:	98 f0       	brcs	.+38     	; 0x2584 <__fixunssfsi+0x30>
    255e:	b9 2f       	mov	r27, r25
    2560:	99 27       	eor	r25, r25
    2562:	b7 51       	subi	r27, 0x17	; 23
    2564:	b0 f0       	brcs	.+44     	; 0x2592 <__fixunssfsi+0x3e>
    2566:	e1 f0       	breq	.+56     	; 0x25a0 <__fixunssfsi+0x4c>
    2568:	66 0f       	add	r22, r22
    256a:	77 1f       	adc	r23, r23
    256c:	88 1f       	adc	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	1a f0       	brmi	.+6      	; 0x2578 <__fixunssfsi+0x24>
    2572:	ba 95       	dec	r27
    2574:	c9 f7       	brne	.-14     	; 0x2568 <__fixunssfsi+0x14>
    2576:	14 c0       	rjmp	.+40     	; 0x25a0 <__fixunssfsi+0x4c>
    2578:	b1 30       	cpi	r27, 0x01	; 1
    257a:	91 f0       	breq	.+36     	; 0x25a0 <__fixunssfsi+0x4c>
    257c:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__fp_zero>
    2580:	b1 e0       	ldi	r27, 0x01	; 1
    2582:	08 95       	ret
    2584:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__fp_zero>
    2588:	67 2f       	mov	r22, r23
    258a:	78 2f       	mov	r23, r24
    258c:	88 27       	eor	r24, r24
    258e:	b8 5f       	subi	r27, 0xF8	; 248
    2590:	39 f0       	breq	.+14     	; 0x25a0 <__fixunssfsi+0x4c>
    2592:	b9 3f       	cpi	r27, 0xF9	; 249
    2594:	cc f3       	brlt	.-14     	; 0x2588 <__fixunssfsi+0x34>
    2596:	86 95       	lsr	r24
    2598:	77 95       	ror	r23
    259a:	67 95       	ror	r22
    259c:	b3 95       	inc	r27
    259e:	d9 f7       	brne	.-10     	; 0x2596 <__fixunssfsi+0x42>
    25a0:	3e f4       	brtc	.+14     	; 0x25b0 <__fixunssfsi+0x5c>
    25a2:	90 95       	com	r25
    25a4:	80 95       	com	r24
    25a6:	70 95       	com	r23
    25a8:	61 95       	neg	r22
    25aa:	7f 4f       	sbci	r23, 0xFF	; 255
    25ac:	8f 4f       	sbci	r24, 0xFF	; 255
    25ae:	9f 4f       	sbci	r25, 0xFF	; 255
    25b0:	08 95       	ret

000025b2 <__floatunsisf>:
    25b2:	e8 94       	clt
    25b4:	09 c0       	rjmp	.+18     	; 0x25c8 <__floatsisf+0x12>

000025b6 <__floatsisf>:
    25b6:	97 fb       	bst	r25, 7
    25b8:	3e f4       	brtc	.+14     	; 0x25c8 <__floatsisf+0x12>
    25ba:	90 95       	com	r25
    25bc:	80 95       	com	r24
    25be:	70 95       	com	r23
    25c0:	61 95       	neg	r22
    25c2:	7f 4f       	sbci	r23, 0xFF	; 255
    25c4:	8f 4f       	sbci	r24, 0xFF	; 255
    25c6:	9f 4f       	sbci	r25, 0xFF	; 255
    25c8:	99 23       	and	r25, r25
    25ca:	a9 f0       	breq	.+42     	; 0x25f6 <__floatsisf+0x40>
    25cc:	f9 2f       	mov	r31, r25
    25ce:	96 e9       	ldi	r25, 0x96	; 150
    25d0:	bb 27       	eor	r27, r27
    25d2:	93 95       	inc	r25
    25d4:	f6 95       	lsr	r31
    25d6:	87 95       	ror	r24
    25d8:	77 95       	ror	r23
    25da:	67 95       	ror	r22
    25dc:	b7 95       	ror	r27
    25de:	f1 11       	cpse	r31, r1
    25e0:	f8 cf       	rjmp	.-16     	; 0x25d2 <__floatsisf+0x1c>
    25e2:	fa f4       	brpl	.+62     	; 0x2622 <__floatsisf+0x6c>
    25e4:	bb 0f       	add	r27, r27
    25e6:	11 f4       	brne	.+4      	; 0x25ec <__floatsisf+0x36>
    25e8:	60 ff       	sbrs	r22, 0
    25ea:	1b c0       	rjmp	.+54     	; 0x2622 <__floatsisf+0x6c>
    25ec:	6f 5f       	subi	r22, 0xFF	; 255
    25ee:	7f 4f       	sbci	r23, 0xFF	; 255
    25f0:	8f 4f       	sbci	r24, 0xFF	; 255
    25f2:	9f 4f       	sbci	r25, 0xFF	; 255
    25f4:	16 c0       	rjmp	.+44     	; 0x2622 <__floatsisf+0x6c>
    25f6:	88 23       	and	r24, r24
    25f8:	11 f0       	breq	.+4      	; 0x25fe <__floatsisf+0x48>
    25fa:	96 e9       	ldi	r25, 0x96	; 150
    25fc:	11 c0       	rjmp	.+34     	; 0x2620 <__floatsisf+0x6a>
    25fe:	77 23       	and	r23, r23
    2600:	21 f0       	breq	.+8      	; 0x260a <__floatsisf+0x54>
    2602:	9e e8       	ldi	r25, 0x8E	; 142
    2604:	87 2f       	mov	r24, r23
    2606:	76 2f       	mov	r23, r22
    2608:	05 c0       	rjmp	.+10     	; 0x2614 <__floatsisf+0x5e>
    260a:	66 23       	and	r22, r22
    260c:	71 f0       	breq	.+28     	; 0x262a <__floatsisf+0x74>
    260e:	96 e8       	ldi	r25, 0x86	; 134
    2610:	86 2f       	mov	r24, r22
    2612:	70 e0       	ldi	r23, 0x00	; 0
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	2a f0       	brmi	.+10     	; 0x2622 <__floatsisf+0x6c>
    2618:	9a 95       	dec	r25
    261a:	66 0f       	add	r22, r22
    261c:	77 1f       	adc	r23, r23
    261e:	88 1f       	adc	r24, r24
    2620:	da f7       	brpl	.-10     	; 0x2618 <__floatsisf+0x62>
    2622:	88 0f       	add	r24, r24
    2624:	96 95       	lsr	r25
    2626:	87 95       	ror	r24
    2628:	97 f9       	bld	r25, 7
    262a:	08 95       	ret

0000262c <__fp_inf>:
    262c:	97 f9       	bld	r25, 7
    262e:	9f 67       	ori	r25, 0x7F	; 127
    2630:	80 e8       	ldi	r24, 0x80	; 128
    2632:	70 e0       	ldi	r23, 0x00	; 0
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	08 95       	ret

00002638 <__fp_nan>:
    2638:	9f ef       	ldi	r25, 0xFF	; 255
    263a:	80 ec       	ldi	r24, 0xC0	; 192
    263c:	08 95       	ret

0000263e <__fp_pscA>:
    263e:	00 24       	eor	r0, r0
    2640:	0a 94       	dec	r0
    2642:	16 16       	cp	r1, r22
    2644:	17 06       	cpc	r1, r23
    2646:	18 06       	cpc	r1, r24
    2648:	09 06       	cpc	r0, r25
    264a:	08 95       	ret

0000264c <__fp_pscB>:
    264c:	00 24       	eor	r0, r0
    264e:	0a 94       	dec	r0
    2650:	12 16       	cp	r1, r18
    2652:	13 06       	cpc	r1, r19
    2654:	14 06       	cpc	r1, r20
    2656:	05 06       	cpc	r0, r21
    2658:	08 95       	ret

0000265a <__fp_round>:
    265a:	09 2e       	mov	r0, r25
    265c:	03 94       	inc	r0
    265e:	00 0c       	add	r0, r0
    2660:	11 f4       	brne	.+4      	; 0x2666 <__fp_round+0xc>
    2662:	88 23       	and	r24, r24
    2664:	52 f0       	brmi	.+20     	; 0x267a <__fp_round+0x20>
    2666:	bb 0f       	add	r27, r27
    2668:	40 f4       	brcc	.+16     	; 0x267a <__fp_round+0x20>
    266a:	bf 2b       	or	r27, r31
    266c:	11 f4       	brne	.+4      	; 0x2672 <__fp_round+0x18>
    266e:	60 ff       	sbrs	r22, 0
    2670:	04 c0       	rjmp	.+8      	; 0x267a <__fp_round+0x20>
    2672:	6f 5f       	subi	r22, 0xFF	; 255
    2674:	7f 4f       	sbci	r23, 0xFF	; 255
    2676:	8f 4f       	sbci	r24, 0xFF	; 255
    2678:	9f 4f       	sbci	r25, 0xFF	; 255
    267a:	08 95       	ret

0000267c <__fp_split3>:
    267c:	57 fd       	sbrc	r21, 7
    267e:	90 58       	subi	r25, 0x80	; 128
    2680:	44 0f       	add	r20, r20
    2682:	55 1f       	adc	r21, r21
    2684:	59 f0       	breq	.+22     	; 0x269c <__fp_splitA+0x10>
    2686:	5f 3f       	cpi	r21, 0xFF	; 255
    2688:	71 f0       	breq	.+28     	; 0x26a6 <__fp_splitA+0x1a>
    268a:	47 95       	ror	r20

0000268c <__fp_splitA>:
    268c:	88 0f       	add	r24, r24
    268e:	97 fb       	bst	r25, 7
    2690:	99 1f       	adc	r25, r25
    2692:	61 f0       	breq	.+24     	; 0x26ac <__fp_splitA+0x20>
    2694:	9f 3f       	cpi	r25, 0xFF	; 255
    2696:	79 f0       	breq	.+30     	; 0x26b6 <__fp_splitA+0x2a>
    2698:	87 95       	ror	r24
    269a:	08 95       	ret
    269c:	12 16       	cp	r1, r18
    269e:	13 06       	cpc	r1, r19
    26a0:	14 06       	cpc	r1, r20
    26a2:	55 1f       	adc	r21, r21
    26a4:	f2 cf       	rjmp	.-28     	; 0x268a <__fp_split3+0xe>
    26a6:	46 95       	lsr	r20
    26a8:	f1 df       	rcall	.-30     	; 0x268c <__fp_splitA>
    26aa:	08 c0       	rjmp	.+16     	; 0x26bc <__fp_splitA+0x30>
    26ac:	16 16       	cp	r1, r22
    26ae:	17 06       	cpc	r1, r23
    26b0:	18 06       	cpc	r1, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	f1 cf       	rjmp	.-30     	; 0x2698 <__fp_splitA+0xc>
    26b6:	86 95       	lsr	r24
    26b8:	71 05       	cpc	r23, r1
    26ba:	61 05       	cpc	r22, r1
    26bc:	08 94       	sec
    26be:	08 95       	ret

000026c0 <__fp_zero>:
    26c0:	e8 94       	clt

000026c2 <__fp_szero>:
    26c2:	bb 27       	eor	r27, r27
    26c4:	66 27       	eor	r22, r22
    26c6:	77 27       	eor	r23, r23
    26c8:	cb 01       	movw	r24, r22
    26ca:	97 f9       	bld	r25, 7
    26cc:	08 95       	ret

000026ce <__mulsf3>:
    26ce:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__mulsf3x>
    26d2:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__fp_round>
    26d6:	0e 94 1f 13 	call	0x263e	; 0x263e <__fp_pscA>
    26da:	38 f0       	brcs	.+14     	; 0x26ea <__mulsf3+0x1c>
    26dc:	0e 94 26 13 	call	0x264c	; 0x264c <__fp_pscB>
    26e0:	20 f0       	brcs	.+8      	; 0x26ea <__mulsf3+0x1c>
    26e2:	95 23       	and	r25, r21
    26e4:	11 f0       	breq	.+4      	; 0x26ea <__mulsf3+0x1c>
    26e6:	0c 94 16 13 	jmp	0x262c	; 0x262c <__fp_inf>
    26ea:	0c 94 1c 13 	jmp	0x2638	; 0x2638 <__fp_nan>
    26ee:	11 24       	eor	r1, r1
    26f0:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__fp_szero>

000026f4 <__mulsf3x>:
    26f4:	0e 94 3e 13 	call	0x267c	; 0x267c <__fp_split3>
    26f8:	70 f3       	brcs	.-36     	; 0x26d6 <__mulsf3+0x8>

000026fa <__mulsf3_pse>:
    26fa:	95 9f       	mul	r25, r21
    26fc:	c1 f3       	breq	.-16     	; 0x26ee <__mulsf3+0x20>
    26fe:	95 0f       	add	r25, r21
    2700:	50 e0       	ldi	r21, 0x00	; 0
    2702:	55 1f       	adc	r21, r21
    2704:	62 9f       	mul	r22, r18
    2706:	f0 01       	movw	r30, r0
    2708:	72 9f       	mul	r23, r18
    270a:	bb 27       	eor	r27, r27
    270c:	f0 0d       	add	r31, r0
    270e:	b1 1d       	adc	r27, r1
    2710:	63 9f       	mul	r22, r19
    2712:	aa 27       	eor	r26, r26
    2714:	f0 0d       	add	r31, r0
    2716:	b1 1d       	adc	r27, r1
    2718:	aa 1f       	adc	r26, r26
    271a:	64 9f       	mul	r22, r20
    271c:	66 27       	eor	r22, r22
    271e:	b0 0d       	add	r27, r0
    2720:	a1 1d       	adc	r26, r1
    2722:	66 1f       	adc	r22, r22
    2724:	82 9f       	mul	r24, r18
    2726:	22 27       	eor	r18, r18
    2728:	b0 0d       	add	r27, r0
    272a:	a1 1d       	adc	r26, r1
    272c:	62 1f       	adc	r22, r18
    272e:	73 9f       	mul	r23, r19
    2730:	b0 0d       	add	r27, r0
    2732:	a1 1d       	adc	r26, r1
    2734:	62 1f       	adc	r22, r18
    2736:	83 9f       	mul	r24, r19
    2738:	a0 0d       	add	r26, r0
    273a:	61 1d       	adc	r22, r1
    273c:	22 1f       	adc	r18, r18
    273e:	74 9f       	mul	r23, r20
    2740:	33 27       	eor	r19, r19
    2742:	a0 0d       	add	r26, r0
    2744:	61 1d       	adc	r22, r1
    2746:	23 1f       	adc	r18, r19
    2748:	84 9f       	mul	r24, r20
    274a:	60 0d       	add	r22, r0
    274c:	21 1d       	adc	r18, r1
    274e:	82 2f       	mov	r24, r18
    2750:	76 2f       	mov	r23, r22
    2752:	6a 2f       	mov	r22, r26
    2754:	11 24       	eor	r1, r1
    2756:	9f 57       	subi	r25, 0x7F	; 127
    2758:	50 40       	sbci	r21, 0x00	; 0
    275a:	9a f0       	brmi	.+38     	; 0x2782 <__mulsf3_pse+0x88>
    275c:	f1 f0       	breq	.+60     	; 0x279a <__mulsf3_pse+0xa0>
    275e:	88 23       	and	r24, r24
    2760:	4a f0       	brmi	.+18     	; 0x2774 <__mulsf3_pse+0x7a>
    2762:	ee 0f       	add	r30, r30
    2764:	ff 1f       	adc	r31, r31
    2766:	bb 1f       	adc	r27, r27
    2768:	66 1f       	adc	r22, r22
    276a:	77 1f       	adc	r23, r23
    276c:	88 1f       	adc	r24, r24
    276e:	91 50       	subi	r25, 0x01	; 1
    2770:	50 40       	sbci	r21, 0x00	; 0
    2772:	a9 f7       	brne	.-22     	; 0x275e <__mulsf3_pse+0x64>
    2774:	9e 3f       	cpi	r25, 0xFE	; 254
    2776:	51 05       	cpc	r21, r1
    2778:	80 f0       	brcs	.+32     	; 0x279a <__mulsf3_pse+0xa0>
    277a:	0c 94 16 13 	jmp	0x262c	; 0x262c <__fp_inf>
    277e:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__fp_szero>
    2782:	5f 3f       	cpi	r21, 0xFF	; 255
    2784:	e4 f3       	brlt	.-8      	; 0x277e <__mulsf3_pse+0x84>
    2786:	98 3e       	cpi	r25, 0xE8	; 232
    2788:	d4 f3       	brlt	.-12     	; 0x277e <__mulsf3_pse+0x84>
    278a:	86 95       	lsr	r24
    278c:	77 95       	ror	r23
    278e:	67 95       	ror	r22
    2790:	b7 95       	ror	r27
    2792:	f7 95       	ror	r31
    2794:	e7 95       	ror	r30
    2796:	9f 5f       	subi	r25, 0xFF	; 255
    2798:	c1 f7       	brne	.-16     	; 0x278a <__mulsf3_pse+0x90>
    279a:	fe 2b       	or	r31, r30
    279c:	88 0f       	add	r24, r24
    279e:	91 1d       	adc	r25, r1
    27a0:	96 95       	lsr	r25
    27a2:	87 95       	ror	r24
    27a4:	97 f9       	bld	r25, 7
    27a6:	08 95       	ret

000027a8 <__udivmodsi4>:
    27a8:	a1 e2       	ldi	r26, 0x21	; 33
    27aa:	1a 2e       	mov	r1, r26
    27ac:	aa 1b       	sub	r26, r26
    27ae:	bb 1b       	sub	r27, r27
    27b0:	fd 01       	movw	r30, r26
    27b2:	0d c0       	rjmp	.+26     	; 0x27ce <__udivmodsi4_ep>

000027b4 <__udivmodsi4_loop>:
    27b4:	aa 1f       	adc	r26, r26
    27b6:	bb 1f       	adc	r27, r27
    27b8:	ee 1f       	adc	r30, r30
    27ba:	ff 1f       	adc	r31, r31
    27bc:	a2 17       	cp	r26, r18
    27be:	b3 07       	cpc	r27, r19
    27c0:	e4 07       	cpc	r30, r20
    27c2:	f5 07       	cpc	r31, r21
    27c4:	20 f0       	brcs	.+8      	; 0x27ce <__udivmodsi4_ep>
    27c6:	a2 1b       	sub	r26, r18
    27c8:	b3 0b       	sbc	r27, r19
    27ca:	e4 0b       	sbc	r30, r20
    27cc:	f5 0b       	sbc	r31, r21

000027ce <__udivmodsi4_ep>:
    27ce:	66 1f       	adc	r22, r22
    27d0:	77 1f       	adc	r23, r23
    27d2:	88 1f       	adc	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	1a 94       	dec	r1
    27d8:	69 f7       	brne	.-38     	; 0x27b4 <__udivmodsi4_loop>
    27da:	60 95       	com	r22
    27dc:	70 95       	com	r23
    27de:	80 95       	com	r24
    27e0:	90 95       	com	r25
    27e2:	9b 01       	movw	r18, r22
    27e4:	ac 01       	movw	r20, r24
    27e6:	bd 01       	movw	r22, r26
    27e8:	cf 01       	movw	r24, r30
    27ea:	08 95       	ret

000027ec <__tablejump2__>:
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	05 90       	lpm	r0, Z+
    27f2:	f4 91       	lpm	r31, Z
    27f4:	e0 2d       	mov	r30, r0
    27f6:	09 94       	ijmp

000027f8 <sprintf>:
    27f8:	ae e0       	ldi	r26, 0x0E	; 14
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	e2 e0       	ldi	r30, 0x02	; 2
    27fe:	f4 e1       	ldi	r31, 0x14	; 20
    2800:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x1c>
    2804:	0d 89       	ldd	r16, Y+21	; 0x15
    2806:	1e 89       	ldd	r17, Y+22	; 0x16
    2808:	86 e0       	ldi	r24, 0x06	; 6
    280a:	8c 83       	std	Y+4, r24	; 0x04
    280c:	1a 83       	std	Y+2, r17	; 0x02
    280e:	09 83       	std	Y+1, r16	; 0x01
    2810:	8f ef       	ldi	r24, 0xFF	; 255
    2812:	9f e7       	ldi	r25, 0x7F	; 127
    2814:	9e 83       	std	Y+6, r25	; 0x06
    2816:	8d 83       	std	Y+5, r24	; 0x05
    2818:	ae 01       	movw	r20, r28
    281a:	47 5e       	subi	r20, 0xE7	; 231
    281c:	5f 4f       	sbci	r21, 0xFF	; 255
    281e:	6f 89       	ldd	r22, Y+23	; 0x17
    2820:	78 8d       	ldd	r23, Y+24	; 0x18
    2822:	ce 01       	movw	r24, r28
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	0e 94 1e 14 	call	0x283c	; 0x283c <vfprintf>
    282a:	ef 81       	ldd	r30, Y+7	; 0x07
    282c:	f8 85       	ldd	r31, Y+8	; 0x08
    282e:	e0 0f       	add	r30, r16
    2830:	f1 1f       	adc	r31, r17
    2832:	10 82       	st	Z, r1
    2834:	2e 96       	adiw	r28, 0x0e	; 14
    2836:	e4 e0       	ldi	r30, 0x04	; 4
    2838:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x1c>

0000283c <vfprintf>:
    283c:	ab e0       	ldi	r26, 0x0B	; 11
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	e4 e2       	ldi	r30, 0x24	; 36
    2842:	f4 e1       	ldi	r31, 0x14	; 20
    2844:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__prologue_saves__>
    2848:	6c 01       	movw	r12, r24
    284a:	7b 01       	movw	r14, r22
    284c:	8a 01       	movw	r16, r20
    284e:	fc 01       	movw	r30, r24
    2850:	17 82       	std	Z+7, r1	; 0x07
    2852:	16 82       	std	Z+6, r1	; 0x06
    2854:	83 81       	ldd	r24, Z+3	; 0x03
    2856:	81 ff       	sbrs	r24, 1
    2858:	cc c1       	rjmp	.+920    	; 0x2bf2 <vfprintf+0x3b6>
    285a:	ce 01       	movw	r24, r28
    285c:	01 96       	adiw	r24, 0x01	; 1
    285e:	3c 01       	movw	r6, r24
    2860:	f6 01       	movw	r30, r12
    2862:	93 81       	ldd	r25, Z+3	; 0x03
    2864:	f7 01       	movw	r30, r14
    2866:	93 fd       	sbrc	r25, 3
    2868:	85 91       	lpm	r24, Z+
    286a:	93 ff       	sbrs	r25, 3
    286c:	81 91       	ld	r24, Z+
    286e:	7f 01       	movw	r14, r30
    2870:	88 23       	and	r24, r24
    2872:	09 f4       	brne	.+2      	; 0x2876 <vfprintf+0x3a>
    2874:	ba c1       	rjmp	.+884    	; 0x2bea <vfprintf+0x3ae>
    2876:	85 32       	cpi	r24, 0x25	; 37
    2878:	39 f4       	brne	.+14     	; 0x2888 <vfprintf+0x4c>
    287a:	93 fd       	sbrc	r25, 3
    287c:	85 91       	lpm	r24, Z+
    287e:	93 ff       	sbrs	r25, 3
    2880:	81 91       	ld	r24, Z+
    2882:	7f 01       	movw	r14, r30
    2884:	85 32       	cpi	r24, 0x25	; 37
    2886:	29 f4       	brne	.+10     	; 0x2892 <vfprintf+0x56>
    2888:	b6 01       	movw	r22, r12
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <fputc>
    2890:	e7 cf       	rjmp	.-50     	; 0x2860 <vfprintf+0x24>
    2892:	91 2c       	mov	r9, r1
    2894:	21 2c       	mov	r2, r1
    2896:	31 2c       	mov	r3, r1
    2898:	ff e1       	ldi	r31, 0x1F	; 31
    289a:	f3 15       	cp	r31, r3
    289c:	d8 f0       	brcs	.+54     	; 0x28d4 <vfprintf+0x98>
    289e:	8b 32       	cpi	r24, 0x2B	; 43
    28a0:	79 f0       	breq	.+30     	; 0x28c0 <vfprintf+0x84>
    28a2:	38 f4       	brcc	.+14     	; 0x28b2 <vfprintf+0x76>
    28a4:	80 32       	cpi	r24, 0x20	; 32
    28a6:	79 f0       	breq	.+30     	; 0x28c6 <vfprintf+0x8a>
    28a8:	83 32       	cpi	r24, 0x23	; 35
    28aa:	a1 f4       	brne	.+40     	; 0x28d4 <vfprintf+0x98>
    28ac:	23 2d       	mov	r18, r3
    28ae:	20 61       	ori	r18, 0x10	; 16
    28b0:	1d c0       	rjmp	.+58     	; 0x28ec <vfprintf+0xb0>
    28b2:	8d 32       	cpi	r24, 0x2D	; 45
    28b4:	61 f0       	breq	.+24     	; 0x28ce <vfprintf+0x92>
    28b6:	80 33       	cpi	r24, 0x30	; 48
    28b8:	69 f4       	brne	.+26     	; 0x28d4 <vfprintf+0x98>
    28ba:	23 2d       	mov	r18, r3
    28bc:	21 60       	ori	r18, 0x01	; 1
    28be:	16 c0       	rjmp	.+44     	; 0x28ec <vfprintf+0xb0>
    28c0:	83 2d       	mov	r24, r3
    28c2:	82 60       	ori	r24, 0x02	; 2
    28c4:	38 2e       	mov	r3, r24
    28c6:	e3 2d       	mov	r30, r3
    28c8:	e4 60       	ori	r30, 0x04	; 4
    28ca:	3e 2e       	mov	r3, r30
    28cc:	2a c0       	rjmp	.+84     	; 0x2922 <vfprintf+0xe6>
    28ce:	f3 2d       	mov	r31, r3
    28d0:	f8 60       	ori	r31, 0x08	; 8
    28d2:	1d c0       	rjmp	.+58     	; 0x290e <vfprintf+0xd2>
    28d4:	37 fc       	sbrc	r3, 7
    28d6:	2d c0       	rjmp	.+90     	; 0x2932 <vfprintf+0xf6>
    28d8:	20 ed       	ldi	r18, 0xD0	; 208
    28da:	28 0f       	add	r18, r24
    28dc:	2a 30       	cpi	r18, 0x0A	; 10
    28de:	40 f0       	brcs	.+16     	; 0x28f0 <vfprintf+0xb4>
    28e0:	8e 32       	cpi	r24, 0x2E	; 46
    28e2:	b9 f4       	brne	.+46     	; 0x2912 <vfprintf+0xd6>
    28e4:	36 fc       	sbrc	r3, 6
    28e6:	81 c1       	rjmp	.+770    	; 0x2bea <vfprintf+0x3ae>
    28e8:	23 2d       	mov	r18, r3
    28ea:	20 64       	ori	r18, 0x40	; 64
    28ec:	32 2e       	mov	r3, r18
    28ee:	19 c0       	rjmp	.+50     	; 0x2922 <vfprintf+0xe6>
    28f0:	36 fe       	sbrs	r3, 6
    28f2:	06 c0       	rjmp	.+12     	; 0x2900 <vfprintf+0xc4>
    28f4:	8a e0       	ldi	r24, 0x0A	; 10
    28f6:	98 9e       	mul	r9, r24
    28f8:	20 0d       	add	r18, r0
    28fa:	11 24       	eor	r1, r1
    28fc:	92 2e       	mov	r9, r18
    28fe:	11 c0       	rjmp	.+34     	; 0x2922 <vfprintf+0xe6>
    2900:	ea e0       	ldi	r30, 0x0A	; 10
    2902:	2e 9e       	mul	r2, r30
    2904:	20 0d       	add	r18, r0
    2906:	11 24       	eor	r1, r1
    2908:	22 2e       	mov	r2, r18
    290a:	f3 2d       	mov	r31, r3
    290c:	f0 62       	ori	r31, 0x20	; 32
    290e:	3f 2e       	mov	r3, r31
    2910:	08 c0       	rjmp	.+16     	; 0x2922 <vfprintf+0xe6>
    2912:	8c 36       	cpi	r24, 0x6C	; 108
    2914:	21 f4       	brne	.+8      	; 0x291e <vfprintf+0xe2>
    2916:	83 2d       	mov	r24, r3
    2918:	80 68       	ori	r24, 0x80	; 128
    291a:	38 2e       	mov	r3, r24
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <vfprintf+0xe6>
    291e:	88 36       	cpi	r24, 0x68	; 104
    2920:	41 f4       	brne	.+16     	; 0x2932 <vfprintf+0xf6>
    2922:	f7 01       	movw	r30, r14
    2924:	93 fd       	sbrc	r25, 3
    2926:	85 91       	lpm	r24, Z+
    2928:	93 ff       	sbrs	r25, 3
    292a:	81 91       	ld	r24, Z+
    292c:	7f 01       	movw	r14, r30
    292e:	81 11       	cpse	r24, r1
    2930:	b3 cf       	rjmp	.-154    	; 0x2898 <vfprintf+0x5c>
    2932:	98 2f       	mov	r25, r24
    2934:	9f 7d       	andi	r25, 0xDF	; 223
    2936:	95 54       	subi	r25, 0x45	; 69
    2938:	93 30       	cpi	r25, 0x03	; 3
    293a:	28 f4       	brcc	.+10     	; 0x2946 <vfprintf+0x10a>
    293c:	0c 5f       	subi	r16, 0xFC	; 252
    293e:	1f 4f       	sbci	r17, 0xFF	; 255
    2940:	9f e3       	ldi	r25, 0x3F	; 63
    2942:	99 83       	std	Y+1, r25	; 0x01
    2944:	0d c0       	rjmp	.+26     	; 0x2960 <vfprintf+0x124>
    2946:	83 36       	cpi	r24, 0x63	; 99
    2948:	31 f0       	breq	.+12     	; 0x2956 <vfprintf+0x11a>
    294a:	83 37       	cpi	r24, 0x73	; 115
    294c:	71 f0       	breq	.+28     	; 0x296a <vfprintf+0x12e>
    294e:	83 35       	cpi	r24, 0x53	; 83
    2950:	09 f0       	breq	.+2      	; 0x2954 <vfprintf+0x118>
    2952:	59 c0       	rjmp	.+178    	; 0x2a06 <vfprintf+0x1ca>
    2954:	21 c0       	rjmp	.+66     	; 0x2998 <vfprintf+0x15c>
    2956:	f8 01       	movw	r30, r16
    2958:	80 81       	ld	r24, Z
    295a:	89 83       	std	Y+1, r24	; 0x01
    295c:	0e 5f       	subi	r16, 0xFE	; 254
    295e:	1f 4f       	sbci	r17, 0xFF	; 255
    2960:	88 24       	eor	r8, r8
    2962:	83 94       	inc	r8
    2964:	91 2c       	mov	r9, r1
    2966:	53 01       	movw	r10, r6
    2968:	13 c0       	rjmp	.+38     	; 0x2990 <vfprintf+0x154>
    296a:	28 01       	movw	r4, r16
    296c:	f2 e0       	ldi	r31, 0x02	; 2
    296e:	4f 0e       	add	r4, r31
    2970:	51 1c       	adc	r5, r1
    2972:	f8 01       	movw	r30, r16
    2974:	a0 80       	ld	r10, Z
    2976:	b1 80       	ldd	r11, Z+1	; 0x01
    2978:	36 fe       	sbrs	r3, 6
    297a:	03 c0       	rjmp	.+6      	; 0x2982 <vfprintf+0x146>
    297c:	69 2d       	mov	r22, r9
    297e:	70 e0       	ldi	r23, 0x00	; 0
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <vfprintf+0x14a>
    2982:	6f ef       	ldi	r22, 0xFF	; 255
    2984:	7f ef       	ldi	r23, 0xFF	; 255
    2986:	c5 01       	movw	r24, r10
    2988:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <strnlen>
    298c:	4c 01       	movw	r8, r24
    298e:	82 01       	movw	r16, r4
    2990:	f3 2d       	mov	r31, r3
    2992:	ff 77       	andi	r31, 0x7F	; 127
    2994:	3f 2e       	mov	r3, r31
    2996:	16 c0       	rjmp	.+44     	; 0x29c4 <vfprintf+0x188>
    2998:	28 01       	movw	r4, r16
    299a:	22 e0       	ldi	r18, 0x02	; 2
    299c:	42 0e       	add	r4, r18
    299e:	51 1c       	adc	r5, r1
    29a0:	f8 01       	movw	r30, r16
    29a2:	a0 80       	ld	r10, Z
    29a4:	b1 80       	ldd	r11, Z+1	; 0x01
    29a6:	36 fe       	sbrs	r3, 6
    29a8:	03 c0       	rjmp	.+6      	; 0x29b0 <vfprintf+0x174>
    29aa:	69 2d       	mov	r22, r9
    29ac:	70 e0       	ldi	r23, 0x00	; 0
    29ae:	02 c0       	rjmp	.+4      	; 0x29b4 <vfprintf+0x178>
    29b0:	6f ef       	ldi	r22, 0xFF	; 255
    29b2:	7f ef       	ldi	r23, 0xFF	; 255
    29b4:	c5 01       	movw	r24, r10
    29b6:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strnlen_P>
    29ba:	4c 01       	movw	r8, r24
    29bc:	f3 2d       	mov	r31, r3
    29be:	f0 68       	ori	r31, 0x80	; 128
    29c0:	3f 2e       	mov	r3, r31
    29c2:	82 01       	movw	r16, r4
    29c4:	33 fc       	sbrc	r3, 3
    29c6:	1b c0       	rjmp	.+54     	; 0x29fe <vfprintf+0x1c2>
    29c8:	82 2d       	mov	r24, r2
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	88 16       	cp	r8, r24
    29ce:	99 06       	cpc	r9, r25
    29d0:	b0 f4       	brcc	.+44     	; 0x29fe <vfprintf+0x1c2>
    29d2:	b6 01       	movw	r22, r12
    29d4:	80 e2       	ldi	r24, 0x20	; 32
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <fputc>
    29dc:	2a 94       	dec	r2
    29de:	f4 cf       	rjmp	.-24     	; 0x29c8 <vfprintf+0x18c>
    29e0:	f5 01       	movw	r30, r10
    29e2:	37 fc       	sbrc	r3, 7
    29e4:	85 91       	lpm	r24, Z+
    29e6:	37 fe       	sbrs	r3, 7
    29e8:	81 91       	ld	r24, Z+
    29ea:	5f 01       	movw	r10, r30
    29ec:	b6 01       	movw	r22, r12
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <fputc>
    29f4:	21 10       	cpse	r2, r1
    29f6:	2a 94       	dec	r2
    29f8:	21 e0       	ldi	r18, 0x01	; 1
    29fa:	82 1a       	sub	r8, r18
    29fc:	91 08       	sbc	r9, r1
    29fe:	81 14       	cp	r8, r1
    2a00:	91 04       	cpc	r9, r1
    2a02:	71 f7       	brne	.-36     	; 0x29e0 <vfprintf+0x1a4>
    2a04:	e8 c0       	rjmp	.+464    	; 0x2bd6 <vfprintf+0x39a>
    2a06:	84 36       	cpi	r24, 0x64	; 100
    2a08:	11 f0       	breq	.+4      	; 0x2a0e <vfprintf+0x1d2>
    2a0a:	89 36       	cpi	r24, 0x69	; 105
    2a0c:	41 f5       	brne	.+80     	; 0x2a5e <vfprintf+0x222>
    2a0e:	f8 01       	movw	r30, r16
    2a10:	37 fe       	sbrs	r3, 7
    2a12:	07 c0       	rjmp	.+14     	; 0x2a22 <vfprintf+0x1e6>
    2a14:	60 81       	ld	r22, Z
    2a16:	71 81       	ldd	r23, Z+1	; 0x01
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	93 81       	ldd	r25, Z+3	; 0x03
    2a1c:	0c 5f       	subi	r16, 0xFC	; 252
    2a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a20:	08 c0       	rjmp	.+16     	; 0x2a32 <vfprintf+0x1f6>
    2a22:	60 81       	ld	r22, Z
    2a24:	71 81       	ldd	r23, Z+1	; 0x01
    2a26:	07 2e       	mov	r0, r23
    2a28:	00 0c       	add	r0, r0
    2a2a:	88 0b       	sbc	r24, r24
    2a2c:	99 0b       	sbc	r25, r25
    2a2e:	0e 5f       	subi	r16, 0xFE	; 254
    2a30:	1f 4f       	sbci	r17, 0xFF	; 255
    2a32:	f3 2d       	mov	r31, r3
    2a34:	ff 76       	andi	r31, 0x6F	; 111
    2a36:	3f 2e       	mov	r3, r31
    2a38:	97 ff       	sbrs	r25, 7
    2a3a:	09 c0       	rjmp	.+18     	; 0x2a4e <vfprintf+0x212>
    2a3c:	90 95       	com	r25
    2a3e:	80 95       	com	r24
    2a40:	70 95       	com	r23
    2a42:	61 95       	neg	r22
    2a44:	7f 4f       	sbci	r23, 0xFF	; 255
    2a46:	8f 4f       	sbci	r24, 0xFF	; 255
    2a48:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4a:	f0 68       	ori	r31, 0x80	; 128
    2a4c:	3f 2e       	mov	r3, r31
    2a4e:	2a e0       	ldi	r18, 0x0A	; 10
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	a3 01       	movw	r20, r6
    2a54:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__ultoa_invert>
    2a58:	88 2e       	mov	r8, r24
    2a5a:	86 18       	sub	r8, r6
    2a5c:	45 c0       	rjmp	.+138    	; 0x2ae8 <vfprintf+0x2ac>
    2a5e:	85 37       	cpi	r24, 0x75	; 117
    2a60:	31 f4       	brne	.+12     	; 0x2a6e <vfprintf+0x232>
    2a62:	23 2d       	mov	r18, r3
    2a64:	2f 7e       	andi	r18, 0xEF	; 239
    2a66:	b2 2e       	mov	r11, r18
    2a68:	2a e0       	ldi	r18, 0x0A	; 10
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	25 c0       	rjmp	.+74     	; 0x2ab8 <vfprintf+0x27c>
    2a6e:	93 2d       	mov	r25, r3
    2a70:	99 7f       	andi	r25, 0xF9	; 249
    2a72:	b9 2e       	mov	r11, r25
    2a74:	8f 36       	cpi	r24, 0x6F	; 111
    2a76:	c1 f0       	breq	.+48     	; 0x2aa8 <vfprintf+0x26c>
    2a78:	18 f4       	brcc	.+6      	; 0x2a80 <vfprintf+0x244>
    2a7a:	88 35       	cpi	r24, 0x58	; 88
    2a7c:	79 f0       	breq	.+30     	; 0x2a9c <vfprintf+0x260>
    2a7e:	b5 c0       	rjmp	.+362    	; 0x2bea <vfprintf+0x3ae>
    2a80:	80 37       	cpi	r24, 0x70	; 112
    2a82:	19 f0       	breq	.+6      	; 0x2a8a <vfprintf+0x24e>
    2a84:	88 37       	cpi	r24, 0x78	; 120
    2a86:	21 f0       	breq	.+8      	; 0x2a90 <vfprintf+0x254>
    2a88:	b0 c0       	rjmp	.+352    	; 0x2bea <vfprintf+0x3ae>
    2a8a:	e9 2f       	mov	r30, r25
    2a8c:	e0 61       	ori	r30, 0x10	; 16
    2a8e:	be 2e       	mov	r11, r30
    2a90:	b4 fe       	sbrs	r11, 4
    2a92:	0d c0       	rjmp	.+26     	; 0x2aae <vfprintf+0x272>
    2a94:	fb 2d       	mov	r31, r11
    2a96:	f4 60       	ori	r31, 0x04	; 4
    2a98:	bf 2e       	mov	r11, r31
    2a9a:	09 c0       	rjmp	.+18     	; 0x2aae <vfprintf+0x272>
    2a9c:	34 fe       	sbrs	r3, 4
    2a9e:	0a c0       	rjmp	.+20     	; 0x2ab4 <vfprintf+0x278>
    2aa0:	29 2f       	mov	r18, r25
    2aa2:	26 60       	ori	r18, 0x06	; 6
    2aa4:	b2 2e       	mov	r11, r18
    2aa6:	06 c0       	rjmp	.+12     	; 0x2ab4 <vfprintf+0x278>
    2aa8:	28 e0       	ldi	r18, 0x08	; 8
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	05 c0       	rjmp	.+10     	; 0x2ab8 <vfprintf+0x27c>
    2aae:	20 e1       	ldi	r18, 0x10	; 16
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	02 c0       	rjmp	.+4      	; 0x2ab8 <vfprintf+0x27c>
    2ab4:	20 e1       	ldi	r18, 0x10	; 16
    2ab6:	32 e0       	ldi	r19, 0x02	; 2
    2ab8:	f8 01       	movw	r30, r16
    2aba:	b7 fe       	sbrs	r11, 7
    2abc:	07 c0       	rjmp	.+14     	; 0x2acc <vfprintf+0x290>
    2abe:	60 81       	ld	r22, Z
    2ac0:	71 81       	ldd	r23, Z+1	; 0x01
    2ac2:	82 81       	ldd	r24, Z+2	; 0x02
    2ac4:	93 81       	ldd	r25, Z+3	; 0x03
    2ac6:	0c 5f       	subi	r16, 0xFC	; 252
    2ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aca:	06 c0       	rjmp	.+12     	; 0x2ad8 <vfprintf+0x29c>
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	0e 5f       	subi	r16, 0xFE	; 254
    2ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad8:	a3 01       	movw	r20, r6
    2ada:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__ultoa_invert>
    2ade:	88 2e       	mov	r8, r24
    2ae0:	86 18       	sub	r8, r6
    2ae2:	fb 2d       	mov	r31, r11
    2ae4:	ff 77       	andi	r31, 0x7F	; 127
    2ae6:	3f 2e       	mov	r3, r31
    2ae8:	36 fe       	sbrs	r3, 6
    2aea:	0d c0       	rjmp	.+26     	; 0x2b06 <vfprintf+0x2ca>
    2aec:	23 2d       	mov	r18, r3
    2aee:	2e 7f       	andi	r18, 0xFE	; 254
    2af0:	a2 2e       	mov	r10, r18
    2af2:	89 14       	cp	r8, r9
    2af4:	58 f4       	brcc	.+22     	; 0x2b0c <vfprintf+0x2d0>
    2af6:	34 fe       	sbrs	r3, 4
    2af8:	0b c0       	rjmp	.+22     	; 0x2b10 <vfprintf+0x2d4>
    2afa:	32 fc       	sbrc	r3, 2
    2afc:	09 c0       	rjmp	.+18     	; 0x2b10 <vfprintf+0x2d4>
    2afe:	83 2d       	mov	r24, r3
    2b00:	8e 7e       	andi	r24, 0xEE	; 238
    2b02:	a8 2e       	mov	r10, r24
    2b04:	05 c0       	rjmp	.+10     	; 0x2b10 <vfprintf+0x2d4>
    2b06:	b8 2c       	mov	r11, r8
    2b08:	a3 2c       	mov	r10, r3
    2b0a:	03 c0       	rjmp	.+6      	; 0x2b12 <vfprintf+0x2d6>
    2b0c:	b8 2c       	mov	r11, r8
    2b0e:	01 c0       	rjmp	.+2      	; 0x2b12 <vfprintf+0x2d6>
    2b10:	b9 2c       	mov	r11, r9
    2b12:	a4 fe       	sbrs	r10, 4
    2b14:	0f c0       	rjmp	.+30     	; 0x2b34 <vfprintf+0x2f8>
    2b16:	fe 01       	movw	r30, r28
    2b18:	e8 0d       	add	r30, r8
    2b1a:	f1 1d       	adc	r31, r1
    2b1c:	80 81       	ld	r24, Z
    2b1e:	80 33       	cpi	r24, 0x30	; 48
    2b20:	21 f4       	brne	.+8      	; 0x2b2a <vfprintf+0x2ee>
    2b22:	9a 2d       	mov	r25, r10
    2b24:	99 7e       	andi	r25, 0xE9	; 233
    2b26:	a9 2e       	mov	r10, r25
    2b28:	09 c0       	rjmp	.+18     	; 0x2b3c <vfprintf+0x300>
    2b2a:	a2 fe       	sbrs	r10, 2
    2b2c:	06 c0       	rjmp	.+12     	; 0x2b3a <vfprintf+0x2fe>
    2b2e:	b3 94       	inc	r11
    2b30:	b3 94       	inc	r11
    2b32:	04 c0       	rjmp	.+8      	; 0x2b3c <vfprintf+0x300>
    2b34:	8a 2d       	mov	r24, r10
    2b36:	86 78       	andi	r24, 0x86	; 134
    2b38:	09 f0       	breq	.+2      	; 0x2b3c <vfprintf+0x300>
    2b3a:	b3 94       	inc	r11
    2b3c:	a3 fc       	sbrc	r10, 3
    2b3e:	11 c0       	rjmp	.+34     	; 0x2b62 <vfprintf+0x326>
    2b40:	a0 fe       	sbrs	r10, 0
    2b42:	06 c0       	rjmp	.+12     	; 0x2b50 <vfprintf+0x314>
    2b44:	b2 14       	cp	r11, r2
    2b46:	88 f4       	brcc	.+34     	; 0x2b6a <vfprintf+0x32e>
    2b48:	28 0c       	add	r2, r8
    2b4a:	92 2c       	mov	r9, r2
    2b4c:	9b 18       	sub	r9, r11
    2b4e:	0e c0       	rjmp	.+28     	; 0x2b6c <vfprintf+0x330>
    2b50:	b2 14       	cp	r11, r2
    2b52:	60 f4       	brcc	.+24     	; 0x2b6c <vfprintf+0x330>
    2b54:	b6 01       	movw	r22, r12
    2b56:	80 e2       	ldi	r24, 0x20	; 32
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <fputc>
    2b5e:	b3 94       	inc	r11
    2b60:	f7 cf       	rjmp	.-18     	; 0x2b50 <vfprintf+0x314>
    2b62:	b2 14       	cp	r11, r2
    2b64:	18 f4       	brcc	.+6      	; 0x2b6c <vfprintf+0x330>
    2b66:	2b 18       	sub	r2, r11
    2b68:	02 c0       	rjmp	.+4      	; 0x2b6e <vfprintf+0x332>
    2b6a:	98 2c       	mov	r9, r8
    2b6c:	21 2c       	mov	r2, r1
    2b6e:	a4 fe       	sbrs	r10, 4
    2b70:	10 c0       	rjmp	.+32     	; 0x2b92 <vfprintf+0x356>
    2b72:	b6 01       	movw	r22, r12
    2b74:	80 e3       	ldi	r24, 0x30	; 48
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <fputc>
    2b7c:	a2 fe       	sbrs	r10, 2
    2b7e:	17 c0       	rjmp	.+46     	; 0x2bae <vfprintf+0x372>
    2b80:	a1 fc       	sbrc	r10, 1
    2b82:	03 c0       	rjmp	.+6      	; 0x2b8a <vfprintf+0x34e>
    2b84:	88 e7       	ldi	r24, 0x78	; 120
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	02 c0       	rjmp	.+4      	; 0x2b8e <vfprintf+0x352>
    2b8a:	88 e5       	ldi	r24, 0x58	; 88
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	b6 01       	movw	r22, r12
    2b90:	0c c0       	rjmp	.+24     	; 0x2baa <vfprintf+0x36e>
    2b92:	8a 2d       	mov	r24, r10
    2b94:	86 78       	andi	r24, 0x86	; 134
    2b96:	59 f0       	breq	.+22     	; 0x2bae <vfprintf+0x372>
    2b98:	a1 fe       	sbrs	r10, 1
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <vfprintf+0x364>
    2b9c:	8b e2       	ldi	r24, 0x2B	; 43
    2b9e:	01 c0       	rjmp	.+2      	; 0x2ba2 <vfprintf+0x366>
    2ba0:	80 e2       	ldi	r24, 0x20	; 32
    2ba2:	a7 fc       	sbrc	r10, 7
    2ba4:	8d e2       	ldi	r24, 0x2D	; 45
    2ba6:	b6 01       	movw	r22, r12
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <fputc>
    2bae:	89 14       	cp	r8, r9
    2bb0:	38 f4       	brcc	.+14     	; 0x2bc0 <vfprintf+0x384>
    2bb2:	b6 01       	movw	r22, r12
    2bb4:	80 e3       	ldi	r24, 0x30	; 48
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <fputc>
    2bbc:	9a 94       	dec	r9
    2bbe:	f7 cf       	rjmp	.-18     	; 0x2bae <vfprintf+0x372>
    2bc0:	8a 94       	dec	r8
    2bc2:	f3 01       	movw	r30, r6
    2bc4:	e8 0d       	add	r30, r8
    2bc6:	f1 1d       	adc	r31, r1
    2bc8:	80 81       	ld	r24, Z
    2bca:	b6 01       	movw	r22, r12
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <fputc>
    2bd2:	81 10       	cpse	r8, r1
    2bd4:	f5 cf       	rjmp	.-22     	; 0x2bc0 <vfprintf+0x384>
    2bd6:	22 20       	and	r2, r2
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <vfprintf+0x3a0>
    2bda:	42 ce       	rjmp	.-892    	; 0x2860 <vfprintf+0x24>
    2bdc:	b6 01       	movw	r22, r12
    2bde:	80 e2       	ldi	r24, 0x20	; 32
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <fputc>
    2be6:	2a 94       	dec	r2
    2be8:	f6 cf       	rjmp	.-20     	; 0x2bd6 <vfprintf+0x39a>
    2bea:	f6 01       	movw	r30, r12
    2bec:	86 81       	ldd	r24, Z+6	; 0x06
    2bee:	97 81       	ldd	r25, Z+7	; 0x07
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <vfprintf+0x3ba>
    2bf2:	8f ef       	ldi	r24, 0xFF	; 255
    2bf4:	9f ef       	ldi	r25, 0xFF	; 255
    2bf6:	2b 96       	adiw	r28, 0x0b	; 11
    2bf8:	e2 e1       	ldi	r30, 0x12	; 18
    2bfa:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__epilogue_restores__>

00002bfe <strnlen_P>:
    2bfe:	fc 01       	movw	r30, r24
    2c00:	05 90       	lpm	r0, Z+
    2c02:	61 50       	subi	r22, 0x01	; 1
    2c04:	70 40       	sbci	r23, 0x00	; 0
    2c06:	01 10       	cpse	r0, r1
    2c08:	d8 f7       	brcc	.-10     	; 0x2c00 <strnlen_P+0x2>
    2c0a:	80 95       	com	r24
    2c0c:	90 95       	com	r25
    2c0e:	8e 0f       	add	r24, r30
    2c10:	9f 1f       	adc	r25, r31
    2c12:	08 95       	ret

00002c14 <strnlen>:
    2c14:	fc 01       	movw	r30, r24
    2c16:	61 50       	subi	r22, 0x01	; 1
    2c18:	70 40       	sbci	r23, 0x00	; 0
    2c1a:	01 90       	ld	r0, Z+
    2c1c:	01 10       	cpse	r0, r1
    2c1e:	d8 f7       	brcc	.-10     	; 0x2c16 <strnlen+0x2>
    2c20:	80 95       	com	r24
    2c22:	90 95       	com	r25
    2c24:	8e 0f       	add	r24, r30
    2c26:	9f 1f       	adc	r25, r31
    2c28:	08 95       	ret

00002c2a <fputc>:
    2c2a:	0f 93       	push	r16
    2c2c:	1f 93       	push	r17
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
    2c32:	fb 01       	movw	r30, r22
    2c34:	23 81       	ldd	r18, Z+3	; 0x03
    2c36:	21 fd       	sbrc	r18, 1
    2c38:	03 c0       	rjmp	.+6      	; 0x2c40 <fputc+0x16>
    2c3a:	8f ef       	ldi	r24, 0xFF	; 255
    2c3c:	9f ef       	ldi	r25, 0xFF	; 255
    2c3e:	2c c0       	rjmp	.+88     	; 0x2c98 <fputc+0x6e>
    2c40:	22 ff       	sbrs	r18, 2
    2c42:	16 c0       	rjmp	.+44     	; 0x2c70 <fputc+0x46>
    2c44:	46 81       	ldd	r20, Z+6	; 0x06
    2c46:	57 81       	ldd	r21, Z+7	; 0x07
    2c48:	24 81       	ldd	r18, Z+4	; 0x04
    2c4a:	35 81       	ldd	r19, Z+5	; 0x05
    2c4c:	42 17       	cp	r20, r18
    2c4e:	53 07       	cpc	r21, r19
    2c50:	44 f4       	brge	.+16     	; 0x2c62 <fputc+0x38>
    2c52:	a0 81       	ld	r26, Z
    2c54:	b1 81       	ldd	r27, Z+1	; 0x01
    2c56:	9d 01       	movw	r18, r26
    2c58:	2f 5f       	subi	r18, 0xFF	; 255
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	31 83       	std	Z+1, r19	; 0x01
    2c5e:	20 83       	st	Z, r18
    2c60:	8c 93       	st	X, r24
    2c62:	26 81       	ldd	r18, Z+6	; 0x06
    2c64:	37 81       	ldd	r19, Z+7	; 0x07
    2c66:	2f 5f       	subi	r18, 0xFF	; 255
    2c68:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6a:	37 83       	std	Z+7, r19	; 0x07
    2c6c:	26 83       	std	Z+6, r18	; 0x06
    2c6e:	14 c0       	rjmp	.+40     	; 0x2c98 <fputc+0x6e>
    2c70:	8b 01       	movw	r16, r22
    2c72:	ec 01       	movw	r28, r24
    2c74:	fb 01       	movw	r30, r22
    2c76:	00 84       	ldd	r0, Z+8	; 0x08
    2c78:	f1 85       	ldd	r31, Z+9	; 0x09
    2c7a:	e0 2d       	mov	r30, r0
    2c7c:	09 95       	icall
    2c7e:	89 2b       	or	r24, r25
    2c80:	e1 f6       	brne	.-72     	; 0x2c3a <fputc+0x10>
    2c82:	d8 01       	movw	r26, r16
    2c84:	16 96       	adiw	r26, 0x06	; 6
    2c86:	8d 91       	ld	r24, X+
    2c88:	9c 91       	ld	r25, X
    2c8a:	17 97       	sbiw	r26, 0x07	; 7
    2c8c:	01 96       	adiw	r24, 0x01	; 1
    2c8e:	17 96       	adiw	r26, 0x07	; 7
    2c90:	9c 93       	st	X, r25
    2c92:	8e 93       	st	-X, r24
    2c94:	16 97       	sbiw	r26, 0x06	; 6
    2c96:	ce 01       	movw	r24, r28
    2c98:	df 91       	pop	r29
    2c9a:	cf 91       	pop	r28
    2c9c:	1f 91       	pop	r17
    2c9e:	0f 91       	pop	r16
    2ca0:	08 95       	ret

00002ca2 <__ultoa_invert>:
    2ca2:	fa 01       	movw	r30, r20
    2ca4:	aa 27       	eor	r26, r26
    2ca6:	28 30       	cpi	r18, 0x08	; 8
    2ca8:	51 f1       	breq	.+84     	; 0x2cfe <__ultoa_invert+0x5c>
    2caa:	20 31       	cpi	r18, 0x10	; 16
    2cac:	81 f1       	breq	.+96     	; 0x2d0e <__ultoa_invert+0x6c>
    2cae:	e8 94       	clt
    2cb0:	6f 93       	push	r22
    2cb2:	6e 7f       	andi	r22, 0xFE	; 254
    2cb4:	6e 5f       	subi	r22, 0xFE	; 254
    2cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb8:	8f 4f       	sbci	r24, 0xFF	; 255
    2cba:	9f 4f       	sbci	r25, 0xFF	; 255
    2cbc:	af 4f       	sbci	r26, 0xFF	; 255
    2cbe:	b1 e0       	ldi	r27, 0x01	; 1
    2cc0:	3e d0       	rcall	.+124    	; 0x2d3e <__ultoa_invert+0x9c>
    2cc2:	b4 e0       	ldi	r27, 0x04	; 4
    2cc4:	3c d0       	rcall	.+120    	; 0x2d3e <__ultoa_invert+0x9c>
    2cc6:	67 0f       	add	r22, r23
    2cc8:	78 1f       	adc	r23, r24
    2cca:	89 1f       	adc	r24, r25
    2ccc:	9a 1f       	adc	r25, r26
    2cce:	a1 1d       	adc	r26, r1
    2cd0:	68 0f       	add	r22, r24
    2cd2:	79 1f       	adc	r23, r25
    2cd4:	8a 1f       	adc	r24, r26
    2cd6:	91 1d       	adc	r25, r1
    2cd8:	a1 1d       	adc	r26, r1
    2cda:	6a 0f       	add	r22, r26
    2cdc:	71 1d       	adc	r23, r1
    2cde:	81 1d       	adc	r24, r1
    2ce0:	91 1d       	adc	r25, r1
    2ce2:	a1 1d       	adc	r26, r1
    2ce4:	20 d0       	rcall	.+64     	; 0x2d26 <__ultoa_invert+0x84>
    2ce6:	09 f4       	brne	.+2      	; 0x2cea <__ultoa_invert+0x48>
    2ce8:	68 94       	set
    2cea:	3f 91       	pop	r19
    2cec:	2a e0       	ldi	r18, 0x0A	; 10
    2cee:	26 9f       	mul	r18, r22
    2cf0:	11 24       	eor	r1, r1
    2cf2:	30 19       	sub	r19, r0
    2cf4:	30 5d       	subi	r19, 0xD0	; 208
    2cf6:	31 93       	st	Z+, r19
    2cf8:	de f6       	brtc	.-74     	; 0x2cb0 <__ultoa_invert+0xe>
    2cfa:	cf 01       	movw	r24, r30
    2cfc:	08 95       	ret
    2cfe:	46 2f       	mov	r20, r22
    2d00:	47 70       	andi	r20, 0x07	; 7
    2d02:	40 5d       	subi	r20, 0xD0	; 208
    2d04:	41 93       	st	Z+, r20
    2d06:	b3 e0       	ldi	r27, 0x03	; 3
    2d08:	0f d0       	rcall	.+30     	; 0x2d28 <__ultoa_invert+0x86>
    2d0a:	c9 f7       	brne	.-14     	; 0x2cfe <__ultoa_invert+0x5c>
    2d0c:	f6 cf       	rjmp	.-20     	; 0x2cfa <__ultoa_invert+0x58>
    2d0e:	46 2f       	mov	r20, r22
    2d10:	4f 70       	andi	r20, 0x0F	; 15
    2d12:	40 5d       	subi	r20, 0xD0	; 208
    2d14:	4a 33       	cpi	r20, 0x3A	; 58
    2d16:	18 f0       	brcs	.+6      	; 0x2d1e <__ultoa_invert+0x7c>
    2d18:	49 5d       	subi	r20, 0xD9	; 217
    2d1a:	31 fd       	sbrc	r19, 1
    2d1c:	40 52       	subi	r20, 0x20	; 32
    2d1e:	41 93       	st	Z+, r20
    2d20:	02 d0       	rcall	.+4      	; 0x2d26 <__ultoa_invert+0x84>
    2d22:	a9 f7       	brne	.-22     	; 0x2d0e <__ultoa_invert+0x6c>
    2d24:	ea cf       	rjmp	.-44     	; 0x2cfa <__ultoa_invert+0x58>
    2d26:	b4 e0       	ldi	r27, 0x04	; 4
    2d28:	a6 95       	lsr	r26
    2d2a:	97 95       	ror	r25
    2d2c:	87 95       	ror	r24
    2d2e:	77 95       	ror	r23
    2d30:	67 95       	ror	r22
    2d32:	ba 95       	dec	r27
    2d34:	c9 f7       	brne	.-14     	; 0x2d28 <__ultoa_invert+0x86>
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	61 05       	cpc	r22, r1
    2d3a:	71 05       	cpc	r23, r1
    2d3c:	08 95       	ret
    2d3e:	9b 01       	movw	r18, r22
    2d40:	ac 01       	movw	r20, r24
    2d42:	0a 2e       	mov	r0, r26
    2d44:	06 94       	lsr	r0
    2d46:	57 95       	ror	r21
    2d48:	47 95       	ror	r20
    2d4a:	37 95       	ror	r19
    2d4c:	27 95       	ror	r18
    2d4e:	ba 95       	dec	r27
    2d50:	c9 f7       	brne	.-14     	; 0x2d44 <__ultoa_invert+0xa2>
    2d52:	62 0f       	add	r22, r18
    2d54:	73 1f       	adc	r23, r19
    2d56:	84 1f       	adc	r24, r20
    2d58:	95 1f       	adc	r25, r21
    2d5a:	a0 1d       	adc	r26, r0
    2d5c:	08 95       	ret

00002d5e <__prologue_saves__>:
    2d5e:	2f 92       	push	r2
    2d60:	3f 92       	push	r3
    2d62:	4f 92       	push	r4
    2d64:	5f 92       	push	r5
    2d66:	6f 92       	push	r6
    2d68:	7f 92       	push	r7
    2d6a:	8f 92       	push	r8
    2d6c:	9f 92       	push	r9
    2d6e:	af 92       	push	r10
    2d70:	bf 92       	push	r11
    2d72:	cf 92       	push	r12
    2d74:	df 92       	push	r13
    2d76:	ef 92       	push	r14
    2d78:	ff 92       	push	r15
    2d7a:	0f 93       	push	r16
    2d7c:	1f 93       	push	r17
    2d7e:	cf 93       	push	r28
    2d80:	df 93       	push	r29
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	ca 1b       	sub	r28, r26
    2d88:	db 0b       	sbc	r29, r27
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	de bf       	out	0x3e, r29	; 62
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	cd bf       	out	0x3d, r28	; 61
    2d94:	09 94       	ijmp

00002d96 <__epilogue_restores__>:
    2d96:	2a 88       	ldd	r2, Y+18	; 0x12
    2d98:	39 88       	ldd	r3, Y+17	; 0x11
    2d9a:	48 88       	ldd	r4, Y+16	; 0x10
    2d9c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d9e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2da0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2da2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2da4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2da6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2da8:	b9 84       	ldd	r11, Y+9	; 0x09
    2daa:	c8 84       	ldd	r12, Y+8	; 0x08
    2dac:	df 80       	ldd	r13, Y+7	; 0x07
    2dae:	ee 80       	ldd	r14, Y+6	; 0x06
    2db0:	fd 80       	ldd	r15, Y+5	; 0x05
    2db2:	0c 81       	ldd	r16, Y+4	; 0x04
    2db4:	1b 81       	ldd	r17, Y+3	; 0x03
    2db6:	aa 81       	ldd	r26, Y+2	; 0x02
    2db8:	b9 81       	ldd	r27, Y+1	; 0x01
    2dba:	ce 0f       	add	r28, r30
    2dbc:	d1 1d       	adc	r29, r1
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	de bf       	out	0x3e, r29	; 62
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	cd bf       	out	0x3d, r28	; 61
    2dc8:	ed 01       	movw	r28, r26
    2dca:	08 95       	ret

00002dcc <_exit>:
    2dcc:	f8 94       	cli

00002dce <__stop_program>:
    2dce:	ff cf       	rjmp	.-2      	; 0x2dce <__stop_program>
