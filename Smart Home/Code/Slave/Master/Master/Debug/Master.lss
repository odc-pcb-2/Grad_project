
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000074a  00800060  00002b2e  00002bc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008007aa  008007aa  0000330c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000330c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  000033a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000066e8  00000000  00000000  000037cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001815  00000000  00000000  00009eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002fc0  00000000  00000000  0000b6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000820  00000000  00000000  0000e68c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ddc  00000000  00000000  0000eeac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026c7  00000000  00000000  0000fc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  0001234f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	a1 00       	.word	0x00a1	; ????
      56:	a9 00       	.word	0x00a9	; ????
      58:	b2 00       	.word	0x00b2	; ????
      5a:	bb 00       	.word	0x00bb	; ????
      5c:	c4 00       	.word	0x00c4	; ????
      5e:	cd 00       	.word	0x00cd	; ????
      60:	d6 00       	.word	0x00d6	; ????
      62:	df 00       	.word	0x00df	; ????
      64:	1c 02       	muls	r17, r28
      66:	57 02       	muls	r21, r23
      68:	34 02       	muls	r19, r20
      6a:	40 02       	muls	r20, r16
      6c:	28 02       	muls	r18, r24
      6e:	4c 02       	muls	r20, r28
      70:	57 02       	muls	r21, r23
      72:	57 02       	muls	r21, r23
      74:	57 02       	muls	r21, r23
      76:	57 02       	muls	r21, r23
      78:	57 02       	muls	r21, r23
      7a:	57 02       	muls	r21, r23
      7c:	57 02       	muls	r21, r23
      7e:	57 02       	muls	r21, r23
      80:	57 02       	muls	r21, r23
      82:	57 02       	muls	r21, r23
      84:	57 02       	muls	r21, r23
      86:	57 02       	muls	r21, r23
      88:	57 02       	muls	r21, r23
      8a:	57 02       	muls	r21, r23
      8c:	57 02       	muls	r21, r23
      8e:	57 02       	muls	r21, r23
      90:	57 02       	muls	r21, r23
      92:	57 02       	muls	r21, r23
      94:	0c 02       	muls	r16, r28
      96:	57 02       	muls	r21, r23
      98:	57 02       	muls	r21, r23
      9a:	57 02       	muls	r21, r23
      9c:	57 02       	muls	r21, r23
      9e:	57 02       	muls	r21, r23
      a0:	57 02       	muls	r21, r23
      a2:	57 02       	muls	r21, r23
      a4:	22 02       	muls	r18, r18
      a6:	57 02       	muls	r21, r23
      a8:	3a 02       	muls	r19, r26
      aa:	46 02       	muls	r20, r22
      ac:	2e 02       	muls	r18, r30
      ae:	52 02       	muls	r21, r18
      b0:	57 02       	muls	r21, r23
      b2:	57 02       	muls	r21, r23
      b4:	57 02       	muls	r21, r23
      b6:	57 02       	muls	r21, r23
      b8:	57 02       	muls	r21, r23
      ba:	57 02       	muls	r21, r23
      bc:	57 02       	muls	r21, r23
      be:	57 02       	muls	r21, r23
      c0:	57 02       	muls	r21, r23
      c2:	57 02       	muls	r21, r23
      c4:	57 02       	muls	r21, r23
      c6:	57 02       	muls	r21, r23
      c8:	57 02       	muls	r21, r23
      ca:	57 02       	muls	r21, r23
      cc:	57 02       	muls	r21, r23
      ce:	57 02       	muls	r21, r23
      d0:	57 02       	muls	r21, r23
      d2:	57 02       	muls	r21, r23
      d4:	16 02       	muls	r17, r22
      d6:	55 0e       	add	r5, r21
      d8:	47 0e       	add	r4, r23
      da:	be 0e       	add	r11, r30
      dc:	c3 0e       	add	r12, r19
      de:	c8 0e       	add	r12, r24
      e0:	cd 0e       	add	r12, r29
      e2:	d2 0e       	add	r13, r18
      e4:	d7 0e       	add	r13, r23

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf e5       	ldi	r28, 0x5F	; 95
      ec:	d8 e0       	ldi	r29, 0x08	; 8
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	17 e0       	ldi	r17, 0x07	; 7
      f4:	a0 e6       	ldi	r26, 0x60	; 96
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	ee e2       	ldi	r30, 0x2E	; 46
      fa:	fb e2       	ldi	r31, 0x2B	; 43
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
      fe:	05 90       	lpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	aa 3a       	cpi	r26, 0xAA	; 170
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
     108:	27 e0       	ldi	r18, 0x07	; 7
     10a:	aa ea       	ldi	r26, 0xAA	; 170
     10c:	b7 e0       	ldi	r27, 0x07	; 7
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	ab 3c       	cpi	r26, 0xCB	; 203
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 66 0a 	call	0x14cc	; 0x14cc <main>
     11c:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <ADC_vidInit>:
#include "ADC_config.h"
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void ADC_vidInit(_enuADCChannels enuADCChannel)
{
     124:	e8 2f       	mov	r30, r24
    ADMUX &= 0xE0;
     126:	87 b1       	in	r24, 0x07	; 7
     128:	80 7e       	andi	r24, 0xE0	; 224
     12a:	87 b9       	out	0x07, r24	; 7
    switch (enuADCChannel)
     12c:	8e 2f       	mov	r24, r30
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	88 30       	cpi	r24, 0x08	; 8
     132:	91 05       	cpc	r25, r1
     134:	08 f0       	brcs	.+2      	; 0x138 <ADC_vidInit+0x14>
     136:	4b c0       	rjmp	.+150    	; 0x1ce <ADC_vidInit+0xaa>
     138:	fc 01       	movw	r30, r24
     13a:	e6 5d       	subi	r30, 0xD6	; 214
     13c:	ff 4f       	sbci	r31, 0xFF	; 255
     13e:	0c 94 a5 12 	jmp	0x254a	; 0x254a <__tablejump2__>
    {
    case ADC_CH0:
        DIO_vidSetPinMode(GPIOA, PIN0, INPUT);
     142:	40 e0       	ldi	r20, 0x00	; 0
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
        ADMUX |= ADC_CH0;
     14c:	87 b1       	in	r24, 0x07	; 7
     14e:	87 b9       	out	0x07, r24	; 7
        break;
     150:	3e c0       	rjmp	.+124    	; 0x1ce <ADC_vidInit+0xaa>
    case ADC_CH1:
        DIO_vidSetPinMode(GPIOA, PIN1, INPUT);
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
        ADMUX |= ADC_CH1;
     15c:	87 b1       	in	r24, 0x07	; 7
     15e:	81 60       	ori	r24, 0x01	; 1
     160:	87 b9       	out	0x07, r24	; 7
        break;
     162:	35 c0       	rjmp	.+106    	; 0x1ce <ADC_vidInit+0xaa>
    case ADC_CH2:
        DIO_vidSetPinMode(GPIOA, PIN2, INPUT);
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	62 e0       	ldi	r22, 0x02	; 2
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
        ADMUX |= ADC_CH2;
     16e:	87 b1       	in	r24, 0x07	; 7
     170:	82 60       	ori	r24, 0x02	; 2
     172:	87 b9       	out	0x07, r24	; 7
        break;
     174:	2c c0       	rjmp	.+88     	; 0x1ce <ADC_vidInit+0xaa>
    case ADC_CH3:
        DIO_vidSetPinMode(GPIOA, PIN3, INPUT);
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	63 e0       	ldi	r22, 0x03	; 3
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
        ADMUX |= ADC_CH3;
     180:	87 b1       	in	r24, 0x07	; 7
     182:	83 60       	ori	r24, 0x03	; 3
     184:	87 b9       	out	0x07, r24	; 7
        break;
     186:	23 c0       	rjmp	.+70     	; 0x1ce <ADC_vidInit+0xaa>
    case ADC_CH4:
        DIO_vidSetPinMode(GPIOA, PIN4, INPUT);
     188:	40 e0       	ldi	r20, 0x00	; 0
     18a:	64 e0       	ldi	r22, 0x04	; 4
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
        ADMUX |= ADC_CH4;
     192:	87 b1       	in	r24, 0x07	; 7
     194:	84 60       	ori	r24, 0x04	; 4
     196:	87 b9       	out	0x07, r24	; 7
        break;
     198:	1a c0       	rjmp	.+52     	; 0x1ce <ADC_vidInit+0xaa>
    case ADC_CH5:
        DIO_vidSetPinMode(GPIOA, PIN5, INPUT);
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	65 e0       	ldi	r22, 0x05	; 5
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
        ADMUX |= ADC_CH5;
     1a4:	87 b1       	in	r24, 0x07	; 7
     1a6:	85 60       	ori	r24, 0x05	; 5
     1a8:	87 b9       	out	0x07, r24	; 7
        break;
     1aa:	11 c0       	rjmp	.+34     	; 0x1ce <ADC_vidInit+0xaa>
    case ADC_CH6:
        DIO_vidSetPinMode(GPIOA, PIN6, INPUT);
     1ac:	40 e0       	ldi	r20, 0x00	; 0
     1ae:	66 e0       	ldi	r22, 0x06	; 6
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
        ADMUX |= ADC_CH6;
     1b6:	87 b1       	in	r24, 0x07	; 7
     1b8:	86 60       	ori	r24, 0x06	; 6
     1ba:	87 b9       	out	0x07, r24	; 7
        break;
     1bc:	08 c0       	rjmp	.+16     	; 0x1ce <ADC_vidInit+0xaa>
    case ADC_CH7:
        DIO_vidSetPinMode(GPIOA, PIN7, INPUT);
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	67 e0       	ldi	r22, 0x07	; 7
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
        ADMUX |= ADC_CH7;
     1c8:	87 b1       	in	r24, 0x07	; 7
     1ca:	87 60       	ori	r24, 0x07	; 7
     1cc:	87 b9       	out	0x07, r24	; 7
        break;
    default:
        break;
    }
    ADCSRA &= 0xF8;
     1ce:	86 b1       	in	r24, 0x06	; 6
     1d0:	88 7f       	andi	r24, 0xF8	; 248
     1d2:	86 b9       	out	0x06, r24	; 6
    ADCSRA |= ADC_PSC;
     1d4:	86 b1       	in	r24, 0x06	; 6
     1d6:	83 60       	ori	r24, 0x03	; 3
     1d8:	86 b9       	out	0x06, r24	; 6
    #elif   ADC_PSC == 3
    #elif   ADC_PSC == 4
    #elif   ADC_PSC == 5
    #else
    #endif*/
    ADMUX  &= 0xF8;
     1da:	87 b1       	in	r24, 0x07	; 7
     1dc:	88 7f       	andi	r24, 0xF8	; 248
     1de:	87 b9       	out	0x07, r24	; 7
    ADMUX  |= (ADC_VREF << 6);
     1e0:	87 b1       	in	r24, 0x07	; 7
     1e2:	80 6c       	ori	r24, 0xC0	; 192
     1e4:	87 b9       	out	0x07, r24	; 7

    #if ADC_STORE == 0
        CLR_BIT(ADMUX, ADLAR);
     1e6:	87 b1       	in	r24, 0x07	; 7
     1e8:	8f 7d       	andi	r24, 0xDF	; 223
     1ea:	87 b9       	out	0x07, r24	; 7
    #else
        SET_BIT(ADMUX, ADLAR);
    #endif

    SET_BIT(ADCSRA, ADATE);
     1ec:	86 b1       	in	r24, 0x06	; 6
     1ee:	80 62       	ori	r24, 0x20	; 32
     1f0:	86 b9       	out	0x06, r24	; 6
    SET_BIT(ADCSRA, ADEN);
     1f2:	86 b1       	in	r24, 0x06	; 6
     1f4:	80 68       	ori	r24, 0x80	; 128
     1f6:	86 b9       	out	0x06, r24	; 6
     1f8:	08 95       	ret

000001fa <ADC_u16Read>:
		/*                                                                      */
		/************************************************************************/
u16 ADC_u16Read(void)
{
    u16 u16ReturnedValue;
    SET_BIT(ADCSRA, ADSC);
     1fa:	86 b1       	in	r24, 0x06	; 6
     1fc:	80 64       	ori	r24, 0x40	; 64
     1fe:	86 b9       	out	0x06, r24	; 6
    while(GET_BIT(ADCSRA, ADIF) == 0);
     200:	34 9b       	sbis	0x06, 4	; 6
     202:	fe cf       	rjmp	.-4      	; 0x200 <ADC_u16Read+0x6>
    SET_BIT(ADCSRA, ADIF);
     204:	86 b1       	in	r24, 0x06	; 6
     206:	80 61       	ori	r24, 0x10	; 16
     208:	86 b9       	out	0x06, r24	; 6
    u16ReturnedValue  = (u16)ADCL;
     20a:	24 b1       	in	r18, 0x04	; 4
    u16ReturnedValue |= (u16)(ADCH<<8);
     20c:	35 b1       	in	r19, 0x05	; 5
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	93 2f       	mov	r25, r19
    return u16ReturnedValue;
}
     212:	82 2b       	or	r24, r18
     214:	08 95       	ret

00000216 <Home_control_Menue>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function display admin control menu		*/
		/************************************************************************/
void Home_control_Menue()
{
	LCD_vidClearScreen();						// clear LCD screen
     216:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
	LCD_vidDisplayString("1.Open door");		// display message on LCD
     21a:	80 e7       	ldi	r24, 0x70	; 112
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);						// move LCD cursor to line 2
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("2.Room Lighting");	// display message on LCD
     22e:	8c e7       	ldi	r24, 0x7C	; 124
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);						// move LCD cursor to line 3
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	83 e0       	ldi	r24, 0x03	; 3
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("3.Air condition");	// display message on LCD
     242:	8c e8       	ldi	r24, 0x8C	; 140
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);						// move LCD cursor to line 4
     24a:	61 e0       	ldi	r22, 0x01	; 1
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("4.Return");			// display message on LCD
     256:	8c e9       	ldi	r24, 0x9C	; 156
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	u8choice = u8GetKeyPressed();				// take choice and store it u8choice variable
     25e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <u8GetKeyPressed>
     262:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <u8choice>
	switch(u8choice)							// switch for u8choice variable
     266:	82 33       	cpi	r24, 0x32	; 50
     268:	61 f0       	breq	.+24     	; 0x282 <Home_control_Menue+0x6c>
     26a:	18 f4       	brcc	.+6      	; 0x272 <Home_control_Menue+0x5c>
     26c:	81 33       	cpi	r24, 0x31	; 49
     26e:	31 f0       	breq	.+12     	; 0x27c <Home_control_Menue+0x66>
     270:	11 c0       	rjmp	.+34     	; 0x294 <Home_control_Menue+0x7e>
     272:	83 33       	cpi	r24, 0x33	; 51
     274:	49 f0       	breq	.+18     	; 0x288 <Home_control_Menue+0x72>
     276:	84 33       	cpi	r24, 0x34	; 52
     278:	51 f0       	breq	.+20     	; 0x28e <Home_control_Menue+0x78>
     27a:	0c c0       	rjmp	.+24     	; 0x294 <Home_control_Menue+0x7e>
	{
		case '1':								// if input is equal '1'
			Open_Door();						// call function that open the door
     27c:	0e 94 09 10 	call	0x2012	; 0x2012 <Open_Door>
		break;									// break case
     280:	08 95       	ret
		case '2' :								// if input is equal '2'
			Print();							// call function that control rooms	
     282:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Print>
		break;									// break case
     286:	08 95       	ret
		case '3':								// if input is equal '3'
			Air_condition();					// call function that control air condition
     288:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Air_condition>
		break;									// break case
     28c:	08 95       	ret
		case '4':								// if input is equal '4'
			admin_menue();						// call function that return to home menu
     28e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <admin_menue>
		break;									// break case
     292:	08 95       	ret
		default:								// default case if not one of previous cases
			LCD_vidClearScreen();				// clear LCD screen
     294:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
			LCD_vidDisplayString("Wrong Choice");// display message on LCD
     298:	85 ea       	ldi	r24, 0xA5	; 165
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			Home_control_Menue();				// call the same function to reenter choice
     2a0:	0e 94 0b 01 	call	0x216	; 0x216 <Home_control_Menue>
     2a4:	08 95       	ret

000002a6 <back>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function that return user to previous menu */
		/************************************************************************/
 void back()
{
	  if(u8ReturnedValue=='0')				// if user choice equal to 0
     2a6:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     2aa:	80 33       	cpi	r24, 0x30	; 48
     2ac:	51 f4       	brne	.+20     	; 0x2c2 <back+0x1c>
	  {
		  if(Isadmin()==1)					// if returned value of Isadmin function equal to 1
     2ae:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Isadmin>
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	19 f4       	brne	.+6      	; 0x2bc <back+0x16>
		  {
			  Home_control_Menue();			// call function that return to admin home control
     2b6:	0e 94 0b 01 	call	0x216	; 0x216 <Home_control_Menue>
     2ba:	08 95       	ret
		  }
		  else								// if not 
		  {
			  User_menue();					// call function that return to user home control
     2bc:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <User_menue>
     2c0:	08 95       	ret
		  }
	  }
	  else								    // if not 
	  {
		 LCD_vidClearScreen();				// clear LCD screen
     2c2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		 LCD_vidDisplayString("Wrong Choice");// display message on LCD screen
     2c6:	85 ea       	ldi	r24, 0xA5	; 165
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ce:	83 e2       	ldi	r24, 0x23	; 35
     2d0:	94 ef       	ldi	r25, 0xF4	; 244
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <back+0x2c>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <back+0x32>
     2d8:	00 00       	nop
		 _delay_ms(250);					// wait for 250 m second
		 Air_condition();					// call function to reenter valid choice
     2da:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Air_condition>
     2de:	08 95       	ret

000002e0 <Air_condition>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function that control air condition		*/
		/************************************************************************/
void Air_condition()
{
	DC_Motor_vidInit();												// initialize the DC Motor
     2e0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <DC_Motor_vidInit>
	u8 temp,pre=1;													// declaration for two variable and initialize them with 1
	LCD_vidInit();													// initialize the LCD 	
     2e4:	0e 94 58 09 	call	0x12b0	; 0x12b0 <LCD_vidInit>
	LM35_vidInit(ADC_CH0);											// initialize the temperature sensor with channel 0 	
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	0e 94 1a 0a 	call	0x1434	; 0x1434 <LM35_vidInit>
	LCD_vidClearScreen();											// clear LCD screen 			
     2ee:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		/*Function Description: void function that control air condition		*/
		/************************************************************************/
void Air_condition()
{
	DC_Motor_vidInit();												// initialize the DC Motor
	u8 temp,pre=1;													// declaration for two variable and initialize them with 1
     2f2:	d1 e0       	ldi	r29, 0x01	; 1
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <Air_condition+0x18>
			{
				LCD_vidMoveCursor(1,1);								// move LCD cursor to line one
				LCD_vidDisplayString("Temperature =");				// display message on LCD
				LCD_vidDisplayNumber(temp);							// display temperature on LCD
				LCD_vidDisplayString("C");							// display message on LCD
				pre = temp;											// set previous value with recent read value
     2f6:	dc 2f       	mov	r29, r28
	LCD_vidInit();													// initialize the LCD 	
	LM35_vidInit(ADC_CH0);											// initialize the temperature sensor with channel 0 	
	LCD_vidClearScreen();											// clear LCD screen 			
	while (1)														// infinite while loop
	{
		u8ReturnedValue = KPD_u8GetPressedKey(GPIOC, HIGH_NIBBLE);	// take choice from user
     2f8:	61 e0       	ldi	r22, 0x01	; 1
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	0e 94 a5 08 	call	0x114a	; 0x114a <KPD_u8GetPressedKey>
     300:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
		if(u8ReturnedValue==NOT_PRESSED)							// if user still not enter any thing
     304:	8f 3f       	cpi	r24, 0xFF	; 255
     306:	09 f0       	breq	.+2      	; 0x30a <Air_condition+0x2a>
     308:	4f c0       	rjmp	.+158    	; 0x3a8 <Air_condition+0xc8>
		{
			temp = LM35_u8Read();									// read temperature from sensor 			
     30a:	0e 94 1d 0a 	call	0x143a	; 0x143a <LM35_u8Read>
     30e:	c8 2f       	mov	r28, r24
			if(temp != pre)											// if temperature is not change (equal to previous one)
     310:	d8 17       	cp	r29, r24
     312:	91 f3       	breq	.-28     	; 0x2f8 <Air_condition+0x18>
			{
				LCD_vidMoveCursor(1,1);								// move LCD cursor to line one
     314:	61 e0       	ldi	r22, 0x01	; 1
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
				LCD_vidDisplayString("Temperature =");				// display message on LCD
     31c:	82 eb       	ldi	r24, 0xB2	; 178
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
				LCD_vidDisplayNumber(temp);							// display temperature on LCD
     324:	6c 2f       	mov	r22, r28
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 c2 09 	call	0x1384	; 0x1384 <LCD_vidDisplayNumber>
				LCD_vidDisplayString("C");							// display message on LCD
     330:	80 ec       	ldi	r24, 0xC0	; 192
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
				pre = temp;											// set previous value with recent read value
				if(temp >= 28)										// if temperature is grater than or equal to 28
     338:	cc 31       	cpi	r28, 0x1C	; 28
     33a:	d0 f0       	brcs	.+52     	; 0x370 <Air_condition+0x90>
				{
					LED_vidTurnOn(GPIOD,PIN2);						// turn on air condition LED
     33c:	62 e0       	ldi	r22, 0x02	; 2
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 12 0a 	call	0x1424	; 0x1424 <LED_vidTurnOn>
					LCD_vidMoveCursor(2,1);							// move cursor to second line
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
					LCD_vidDisplayString("FAN ON ");				// display message on LCD
     350:	82 ec       	ldi	r24, 0xC2	; 194
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
					DC_Motor_vidTurnOn();							// turn on the DC Motor (air condition)
     358:	0e 94 b9 06 	call	0xd72	; 0xd72 <DC_Motor_vidTurnOn>
					LCD_vidMoveCursor(3,1);							// move cursor to third line
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	83 e0       	ldi	r24, 0x03	; 3
     360:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
					LCD_vidDisplayString("Press 0 to Back");		// display message on LCD
     364:	8a ec       	ldi	r24, 0xCA	; 202
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			{
				LCD_vidMoveCursor(1,1);								// move LCD cursor to line one
				LCD_vidDisplayString("Temperature =");				// display message on LCD
				LCD_vidDisplayNumber(temp);							// display temperature on LCD
				LCD_vidDisplayString("C");							// display message on LCD
				pre = temp;											// set previous value with recent read value
     36c:	dc 2f       	mov	r29, r28
     36e:	c4 cf       	rjmp	.-120    	; 0x2f8 <Air_condition+0x18>
					LCD_vidDisplayString("FAN ON ");				// display message on LCD
					DC_Motor_vidTurnOn();							// turn on the DC Motor (air condition)
					LCD_vidMoveCursor(3,1);							// move cursor to third line
					LCD_vidDisplayString("Press 0 to Back");		// display message on LCD
				}
				else if(temp <= 21 )								// if temperature is less than or equal to 21
     370:	c6 31       	cpi	r28, 0x16	; 22
     372:	08 f6       	brcc	.-126    	; 0x2f6 <Air_condition+0x16>
				{
					LED_vidTurnOff(GPIOD,PIN2);						// turn off air condition LED
     374:	62 e0       	ldi	r22, 0x02	; 2
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	83 e0       	ldi	r24, 0x03	; 3
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
					LCD_vidMoveCursor(2,1);							// move cursor to second line
     380:	61 e0       	ldi	r22, 0x01	; 1
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
					LCD_vidDisplayString("FAN OFF ");				// display message on LCD
     388:	8a ed       	ldi	r24, 0xDA	; 218
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
					DC_Motor_vidTurnOff();							// turn off the DC Motor (air condition)
     390:	0e 94 c4 06 	call	0xd88	; 0xd88 <DC_Motor_vidTurnOff>
					LCD_vidMoveCursor(3,1);							// move cursor to third line
     394:	61 e0       	ldi	r22, 0x01	; 1
     396:	83 e0       	ldi	r24, 0x03	; 3
     398:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
					LCD_vidDisplayString("Press 0 to Back");		// display message on LCD
     39c:	8a ec       	ldi	r24, 0xCA	; 202
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			{
				LCD_vidMoveCursor(1,1);								// move LCD cursor to line one
				LCD_vidDisplayString("Temperature =");				// display message on LCD
				LCD_vidDisplayNumber(temp);							// display temperature on LCD
				LCD_vidDisplayString("C");							// display message on LCD
				pre = temp;											// set previous value with recent read value
     3a4:	dc 2f       	mov	r29, r28
     3a6:	a8 cf       	rjmp	.-176    	; 0x2f8 <Air_condition+0x18>
				}
			}
		}
		else														// if not 
		{
			back();													// back to previous menu
     3a8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <back>
     3ac:	a5 cf       	rjmp	.-182    	; 0x2f8 <Air_condition+0x18>

000003ae <u8RecieveByte>:
		/*Function Description: function from type u8 take void and return u8
								receive byte from user							*/
		/************************************************************************/
u8 u8RecieveByte()
{
	u8ReturnedValue = USART_u8RecieveByte();			// receive data
     3ae:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <USART_u8RecieveByte>
     3b2:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     3b6:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
	u8ReturnedValue = USART_u8RecieveByte();			// receive data
     3ba:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <USART_u8RecieveByte>
     3be:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     3c2:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
	u8ReturnedValue = USART_u8RecieveByte();			// receive data
     3c6:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <USART_u8RecieveByte>
     3ca:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     3ce:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
}
     3d2:	08 95       	ret

000003d4 <Isadmin_Remoted>:
		/*Function Description: function from type u8 take void and return u8
								check who login user or admin & return only 0 or 1 (remoted)*/
		/************************************************************************/
u8 Isadmin_Remoted()
{	
	if (LogInFlag==1)									// if login flag equal to 1
     3d4:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <LogInFlag>
     3d8:	81 30       	cpi	r24, 0x01	; 1
     3da:	09 f0       	breq	.+2      	; 0x3de <Isadmin_Remoted+0xa>
	{
		return 1;										// return 1
	}
	else												// if not
	{
		return 0;										// return 0
     3dc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     3de:	08 95       	ret

000003e0 <control_Remoted_Rooms>:
		/*Function Description: void function take void and return void
								control rooms lightning (remoted)				*/
		/************************************************************************/
void control_Remoted_Rooms()
{
	USART_vidSendString("R1: Z & z   R2: B & b   R3: F & f   R4: D & d   R5: E & e R6: G & g   0.To Return");// send message to serial terminal
     3e0:	83 ee       	ldi	r24, 0xE3	; 227
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     3e8:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	while(u8ReturnedValue!='0')							// while loop work if choice not equal 0
     3ec:	60 c0       	rjmp	.+192    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
	{
		u8ReturnedValue = USART_u8RecieveByte();		// receive data
     3ee:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <USART_u8RecieveByte>
     3f2:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
		USART_vidEnableRXInterrupt();					// enable RX interrupt (finish receiving)
     3f6:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
		switch(u8ReturnedValue)							// switch choice
     3fa:	e0 91 ad 07 	lds	r30, 0x07AD	; 0x8007ad <u8ReturnedValue>
     3fe:	8e 2f       	mov	r24, r30
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	fc 01       	movw	r30, r24
     404:	e2 54       	subi	r30, 0x42	; 66
     406:	f1 09       	sbc	r31, r1
     408:	e9 33       	cpi	r30, 0x39	; 57
     40a:	f1 05       	cpc	r31, r1
     40c:	08 f0       	brcs	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     40e:	4f c0       	rjmp	.+158    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
     410:	ee 5c       	subi	r30, 0xCE	; 206
     412:	ff 4f       	sbci	r31, 0xFF	; 255
     414:	0c 94 a5 12 	jmp	0x254a	; 0x254a <__tablejump2__>
		{
			case 'Z' :									// if choice equal to Z
			USART_vidSendByte('Z');						// send message to serial terminal
     418:	8a e5       	ldi	r24, 0x5A	; 90
     41a:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     41e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
			LCD_vidDisplayString("R1: ON");				// display string on LCD
     422:	85 e3       	ldi	r24, 0x35	; 53
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			break;										// break
     42a:	41 c0       	rjmp	.+130    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			case 'z' :									// if choice equal to z
			USART_vidSendByte('z');						// send message to serial terminal
     42c:	8a e7       	ldi	r24, 0x7A	; 122
     42e:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     432:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
			break;										// break
     436:	3b c0       	rjmp	.+118    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			case 'B' :									// if choice equal to B
			USART_vidSendByte('B');						// send message to serial terminal
     438:	82 e4       	ldi	r24, 0x42	; 66
     43a:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     43e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
			break;										// break
     442:	35 c0       	rjmp	.+106    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			case 'b' :									// if choice equal to b
			USART_vidSendByte('b');						// send message to serial terminal
     444:	82 e6       	ldi	r24, 0x62	; 98
     446:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     44a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
			break;										// break 
     44e:	2f c0       	rjmp	.+94     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			case 'F' :									// if choice equal to F
			USART_vidSendByte('F');						// send message to serial terminal
     450:	86 e4       	ldi	r24, 0x46	; 70
     452:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     456:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
			break;										// break
     45a:	29 c0       	rjmp	.+82     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			case 'f' :									// if choice equal to f
			USART_vidSendByte('f');						// send message to serial terminal
     45c:	86 e6       	ldi	r24, 0x66	; 102
     45e:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     462:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
			break;										// break
     466:	23 c0       	rjmp	.+70     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			case 'D' :									// if choice equal to D
			USART_vidSendByte('D');						// send message to serial terminal
     468:	84 e4       	ldi	r24, 0x44	; 68
     46a:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     46e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
			break;										// break
     472:	1d c0       	rjmp	.+58     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			case 'd' :									// if choice equal to d
			USART_vidSendByte('d');						// send message to serial terminal
     474:	84 e6       	ldi	r24, 0x64	; 100
     476:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     47a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
			break;										// break
     47e:	17 c0       	rjmp	.+46     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			case 'E' :									// if choice equal to E
			USART_vidSendByte('E');						// send message to serial terminal
     480:	85 e4       	ldi	r24, 0x45	; 69
     482:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     486:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
			break;										// break
     48a:	11 c0       	rjmp	.+34     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			case 'e' :									// if choice equal to e
			USART_vidSendByte('e');						// send message to serial terminal
     48c:	85 e6       	ldi	r24, 0x65	; 101
     48e:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     492:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
			break;										// break
     496:	0b c0       	rjmp	.+22     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			case 'G' :									// if choice equal to G
			USART_vidSendByte('G');						// send message to serial terminal
     498:	87 e4       	ldi	r24, 0x47	; 71
     49a:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     49e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
			break;										// break
     4a2:	05 c0       	rjmp	.+10     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			case 'g' :									// if choice equal to g
			USART_vidSendByte('g');						// send message to serial terminal
     4a4:	87 e6       	ldi	r24, 0x67	; 103
     4a6:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     4aa:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
		/************************************************************************/
void control_Remoted_Rooms()
{
	USART_vidSendString("R1: Z & z   R2: B & b   R3: F & f   R4: D & d   R5: E & e R6: G & g   0.To Return");// send message to serial terminal
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
	while(u8ReturnedValue!='0')							// while loop work if choice not equal 0
     4ae:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     4b2:	80 33       	cpi	r24, 0x30	; 48
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     4b6:	9b cf       	rjmp	.-202    	; 0x3ee <control_Remoted_Rooms+0xe>
			USART_vidSendByte('g');						// send message to serial terminal
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
			break;										// break
		}
	}
	if (Isadmin_Remoted()==1)							// if is admin equal to 1
     4b8:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Isadmin_Remoted>
     4bc:	81 30       	cpi	r24, 0x01	; 1
     4be:	19 f4       	brne	.+6      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
	{
		Admin_Remoted_Menue();							// call function that control admin login
     4c0:	0e 94 ac 02 	call	0x558	; 0x558 <Admin_Remoted_Menue>
     4c4:	08 95       	ret
	}
	else												// if not
	{
		User_Remoted_Menue();							// call function that control user login
     4c6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <User_Remoted_Menue>
     4ca:	08 95       	ret

000004cc <control_home_remoted>:
		/*Function Description: void function take void and return void
								admin control (remoted)							*/
		/************************************************************************/
void control_home_remoted()
{
	USART_vidSendString("1.Openning Door  ");			// send message to serial terminal
     4cc:	8c e3       	ldi	r24, 0x3C	; 60
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     4d4:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	USART_vidSendString("2.Room Lighting  ");			// send message to serial terminal
     4d8:	8e e4       	ldi	r24, 0x4E	; 78
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     4e0:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	USART_vidSendString("3.Air condition  ");			// send message to serial terminal
     4e4:	80 e6       	ldi	r24, 0x60	; 96
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     4ec:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	USART_vidSendString("4.Return        ");			// send message to serial terminal
     4f0:	82 e7       	ldi	r24, 0x72	; 114
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     4f8:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     4fc:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <USART_u8RecieveByte>
     500:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     504:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     508:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <USART_u8RecieveByte>
     50c:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     510:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     514:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <USART_u8RecieveByte>
     518:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     51c:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
	switch(u8ReturnedValue)								// switch choice
     520:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     524:	82 33       	cpi	r24, 0x32	; 50
     526:	61 f0       	breq	.+24     	; 0x540 <control_home_remoted+0x74>
     528:	18 f4       	brcc	.+6      	; 0x530 <control_home_remoted+0x64>
     52a:	81 33       	cpi	r24, 0x31	; 49
     52c:	31 f0       	breq	.+12     	; 0x53a <control_home_remoted+0x6e>
     52e:	11 c0       	rjmp	.+34     	; 0x552 <control_home_remoted+0x86>
     530:	83 33       	cpi	r24, 0x33	; 51
     532:	49 f0       	breq	.+18     	; 0x546 <control_home_remoted+0x7a>
     534:	84 33       	cpi	r24, 0x34	; 52
     536:	51 f0       	breq	.+20     	; 0x54c <control_home_remoted+0x80>
     538:	0c c0       	rjmp	.+24     	; 0x552 <control_home_remoted+0x86>
	{
		case '1':										// if choice equal 1
		open_door();									// call function that control door 
     53a:	0e 94 a1 05 	call	0xb42	; 0xb42 <open_door>
		break;											// break
     53e:	08 95       	ret
		case '2':										// if choice equal 2
		control_Remoted_Rooms();						// call function that control rooms 
     540:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <control_Remoted_Rooms>
		break;											// break
     544:	08 95       	ret
		case '3':										// if choice equal 1
		Air_Condition_Remoted();						// call function that control air condition
     546:	0e 94 cf 03 	call	0x79e	; 0x79e <Air_Condition_Remoted>
		break;											// break
     54a:	08 95       	ret
		case '4':										// if choice equal 1
		Admin_Remoted_Menue();							// call function that display admin control menu
     54c:	0e 94 ac 02 	call	0x558	; 0x558 <Admin_Remoted_Menue>
		break;											// break
     550:	08 95       	ret
		default:										// default
		control_home_remoted();							// call function that return admin menu
     552:	0e 94 66 02 	call	0x4cc	; 0x4cc <control_home_remoted>
     556:	08 95       	ret

00000558 <Admin_Remoted_Menue>:
		/*Function Description: void function take void and return void
								display admin control menu (remoted)			*/
		/************************************************************************/
void Admin_Remoted_Menue()
{
	USART_vidSendString("1.Control Home       ");		// send message to serial terminal
     558:	83 e8       	ldi	r24, 0x83	; 131
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     560:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	USART_vidSendString("2.Add user           ");		// send message to serial terminal
     564:	89 e9       	ldi	r24, 0x99	; 153
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     56c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	USART_vidSendString("3.Log out            ");		// send message to serial terminal
     570:	8f ea       	ldi	r24, 0xAF	; 175
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     578:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <USART_u8RecieveByte>
     57c:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     580:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     584:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <USART_u8RecieveByte>
     588:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)		
     58c:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
	u8ReturnedValue=USART_u8RecieveByte();				// receive data
     590:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <USART_u8RecieveByte>
     594:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     598:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
	switch(u8ReturnedValue)								// switch choice
     59c:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     5a0:	82 33       	cpi	r24, 0x32	; 50
     5a2:	39 f0       	breq	.+14     	; 0x5b2 <Admin_Remoted_Menue+0x5a>
     5a4:	83 33       	cpi	r24, 0x33	; 51
     5a6:	41 f0       	breq	.+16     	; 0x5b8 <Admin_Remoted_Menue+0x60>
     5a8:	81 33       	cpi	r24, 0x31	; 49
     5aa:	41 f4       	brne	.+16     	; 0x5bc <Admin_Remoted_Menue+0x64>
	{
		case '1':										// if choice equal 1
		control_home_remoted();							// call function that control admin menu
     5ac:	0e 94 66 02 	call	0x4cc	; 0x4cc <control_home_remoted>
		break;											// break
     5b0:	08 95       	ret
		case '2':										// if choice equal 2
		Add_Remoted_User();								// call function that control user menu
     5b2:	0e 94 4c 05 	call	0xa98	; 0xa98 <Add_Remoted_User>
		break;											// break
     5b6:	08 95       	ret
		case '3':										// if choice equal 3
		LogOut_Remotly();								// call function that logout from system
     5b8:	0e 94 08 05 	call	0xa10	; 0xa10 <LogOut_Remotly>
     5bc:	08 95       	ret

000005be <check_admin_pass_remoted>:
		/*Function Description: void function take void and return void
								check username & pass for admin (remoted)		*/
		/************************************************************************/
void check_admin_pass_remoted()
{
	read_EEPROM(0x0);									// read EEPROM
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 81 0b 	call	0x1702	; 0x1702 <read_EEPROM>
	check_user=0;										// initialize check variable to 0
     5c6:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <check_user>
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	12 c0       	rjmp	.+36     	; 0x5f2 <check_admin_pass_remoted+0x34>
	{
		if (user[i] == EEPROM_user[i])					// check if two value are equal or not
     5ce:	82 2f       	mov	r24, r18
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	fc 01       	movw	r30, r24
     5d4:	e8 54       	subi	r30, 0x48	; 72
     5d6:	f8 4f       	sbci	r31, 0xF8	; 248
     5d8:	30 81       	ld	r19, Z
     5da:	fc 01       	movw	r30, r24
     5dc:	ec 54       	subi	r30, 0x4C	; 76
     5de:	f8 4f       	sbci	r31, 0xF8	; 248
     5e0:	80 81       	ld	r24, Z
     5e2:	38 13       	cpse	r19, r24
     5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <check_admin_pass_remoted+0x32>
		{
			check_user++;								// if that increase the check variable by one
     5e6:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <check_user>
     5ea:	8f 5f       	subi	r24, 0xFF	; 255
     5ec:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <check_user>
		/************************************************************************/
void check_admin_pass_remoted()
{
	read_EEPROM(0x0);									// read EEPROM
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     5f0:	2f 5f       	subi	r18, 0xFF	; 255
     5f2:	24 30       	cpi	r18, 0x04	; 4
     5f4:	60 f3       	brcs	.-40     	; 0x5ce <check_admin_pass_remoted+0x10>
		}
		else											// if not
		{
		}
	}
	check=0;											// initialize check variable to 0
     5f6:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <check>
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	12 c0       	rjmp	.+36     	; 0x622 <check_admin_pass_remoted+0x64>
	{
		if (pass[i] == EEPROM_pass[i])					// check if two value are equal or not
     5fe:	82 2f       	mov	r24, r18
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	fc 01       	movw	r30, r24
     604:	e0 55       	subi	r30, 0x50	; 80
     606:	f8 4f       	sbci	r31, 0xF8	; 248
     608:	30 81       	ld	r19, Z
     60a:	fc 01       	movw	r30, r24
     60c:	ef 53       	subi	r30, 0x3F	; 63
     60e:	f8 4f       	sbci	r31, 0xF8	; 248
     610:	80 81       	ld	r24, Z
     612:	38 13       	cpse	r19, r24
     614:	05 c0       	rjmp	.+10     	; 0x620 <check_admin_pass_remoted+0x62>
		{
			check++;									// if that increase the check variable by one
     616:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <check>
     61a:	8f 5f       	subi	r24, 0xFF	; 255
     61c:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <check>
		else											// if not
		{
		}
	}
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     620:	2f 5f       	subi	r18, 0xFF	; 255
     622:	24 30       	cpi	r18, 0x04	; 4
     624:	60 f3       	brcs	.-40     	; 0x5fe <check_admin_pass_remoted+0x40>
		}
		else											// if not
		{
		}
	}
	if(check == 4 && check_user == 4)					// check if check variable equal 4 or not (correct pass)
     626:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <check>
     62a:	84 30       	cpi	r24, 0x04	; 4
     62c:	d9 f4       	brne	.+54     	; 0x664 <check_admin_pass_remoted+0xa6>
     62e:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <check_user>
     632:	84 30       	cpi	r24, 0x04	; 4
     634:	b9 f4       	brne	.+46     	; 0x664 <check_admin_pass_remoted+0xa6>
	{
		USART_vidSendString("Correct Password                                                            ");// send message to serial terminal
     636:	85 ec       	ldi	r24, 0xC5	; 197
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     63e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
		LED_vidTurnOn(GPIOD,PIN3);						// turn on led
     642:	63 e0       	ldi	r22, 0x03	; 3
     644:	83 e0       	ldi	r24, 0x03	; 3
     646:	0e 94 12 0a 	call	0x1424	; 0x1424 <LED_vidTurnOn>
		LED_vidTurnOff(GPIOD,PIN4);						// turn off led
     64a:	64 e0       	ldi	r22, 0x04	; 4
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
		LED_vidTurnOff(GPIOB,PIN5);						// turn off led
     652:	65 e0       	ldi	r22, 0x05	; 5
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
		wrong_pass_count = 0;							// reset wrong_pass_count variable by reinitialize by 0	
     65a:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <wrong_pass_count>
		Admin_Remoted_Menue();							// call function that control admin menu
     65e:	0e 94 ac 02 	call	0x558	; 0x558 <Admin_Remoted_Menue>
     662:	08 95       	ret
	}
	else												// if not
	{
		wrong_pass_count++;								// increase wrong_pass_count variable by one
     664:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <wrong_pass_count>
     668:	8f 5f       	subi	r24, 0xFF	; 255
     66a:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <wrong_pass_count>
		USART_vidSendString("Password Wrong ");			// send message to serial terminal
     66e:	82 e1       	ldi	r24, 0x12	; 18
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     676:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
     67a:	2f e5       	ldi	r18, 0x5F	; 95
     67c:	8a ee       	ldi	r24, 0xEA	; 234
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	21 50       	subi	r18, 0x01	; 1
     682:	80 40       	sbci	r24, 0x00	; 0
     684:	90 40       	sbci	r25, 0x00	; 0
     686:	e1 f7       	brne	.-8      	; 0x680 <check_admin_pass_remoted+0xc2>
     688:	00 c0       	rjmp	.+0      	; 0x68a <check_admin_pass_remoted+0xcc>
     68a:	00 00       	nop
		_delay_ms(300);									// wait for 300 m second
		if (wrong_pass_count == 1)						// if wrong pass counter equal to 1
     68c:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <wrong_pass_count>
     690:	81 30       	cpi	r24, 0x01	; 1
     692:	29 f4       	brne	.+10     	; 0x69e <check_admin_pass_remoted+0xe0>
		USART_vidSendString(" 2 ");						// send message to serial terminal
     694:	82 e2       	ldi	r24, 0x22	; 34
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
     69c:	0d c0       	rjmp	.+26     	; 0x6b8 <check_admin_pass_remoted+0xfa>
		else if (wrong_pass_count == 2)					// if wrong pass counter equal to 2
     69e:	82 30       	cpi	r24, 0x02	; 2
     6a0:	29 f4       	brne	.+10     	; 0x6ac <check_admin_pass_remoted+0xee>
		USART_vidSendString(" 1 ");						// send message to serial terminal
     6a2:	86 e2       	ldi	r24, 0x26	; 38
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
     6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <check_admin_pass_remoted+0xfa>
		else if (wrong_pass_count == 3)					// if wrong pass counter equal to 3
     6ac:	83 30       	cpi	r24, 0x03	; 3
     6ae:	21 f4       	brne	.+8      	; 0x6b8 <check_admin_pass_remoted+0xfa>
		USART_vidSendString(" 0 ");						// send message to serial terminal
     6b0:	8a e2       	ldi	r24, 0x2A	; 42
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
		USART_vidSendString("tries remains ");// send message to serial terminal
     6b8:	87 e1       	ldi	r24, 0x17	; 23
     6ba:	93 e0       	ldi	r25, 0x03	; 3
     6bc:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     6c0:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
		if (wrong_pass_count == 3)						// if wrong pass counter equal to 3
     6c4:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <wrong_pass_count>
     6c8:	83 30       	cpi	r24, 0x03	; 3
     6ca:	39 f5       	brne	.+78     	; 0x71a <check_admin_pass_remoted+0x15c>
		{
			wrong_pass_count=0;							// set wrong pass counter to 0
     6cc:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <wrong_pass_count>
			USART_vidSendString("Lock mode!!");			// send message to serial terminal
     6d0:	8e e2       	ldi	r24, 0x2E	; 46
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     6d8:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
			LED_vidTurnOn(GPIOB, PIN5);					// turn on led
     6dc:	65 e0       	ldi	r22, 0x05	; 5
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 12 0a 	call	0x1424	; 0x1424 <LED_vidTurnOn>
			LED_vidTurnOff(GPIOD, PIN3);				// turn off led
     6e4:	63 e0       	ldi	r22, 0x03	; 3
     6e6:	83 e0       	ldi	r24, 0x03	; 3
     6e8:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
			LED_vidTurnOff(GPIOD, PIN4);				// turn of led
     6ec:	64 e0       	ldi	r22, 0x04	; 4
     6ee:	83 e0       	ldi	r24, 0x03	; 3
     6f0:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
			DIO_vidWritePin(GPIOD, PIN7, HIGH);			// output high on pin (turn on alarm)
     6f4:	41 e0       	ldi	r20, 0x01	; 1
     6f6:	67 e0       	ldi	r22, 0x07	; 7
     6f8:	83 e0       	ldi	r24, 0x03	; 3
     6fa:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
     6fe:	2f eb       	ldi	r18, 0xBF	; 191
     700:	86 ec       	ldi	r24, 0xC6	; 198
     702:	9d e2       	ldi	r25, 0x2D	; 45
     704:	21 50       	subi	r18, 0x01	; 1
     706:	80 40       	sbci	r24, 0x00	; 0
     708:	90 40       	sbci	r25, 0x00	; 0
     70a:	e1 f7       	brne	.-8      	; 0x704 <check_admin_pass_remoted+0x146>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <check_admin_pass_remoted+0x150>
     70e:	00 00       	nop
			_delay_ms(15000);							// wait for fifteen second
			DIO_vidWritePin(GPIOD, PIN7, LOW);			// output low on pin (turn off alarm)
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	67 e0       	ldi	r22, 0x07	; 7
     714:	83 e0       	ldi	r24, 0x03	; 3
     716:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
		}
		Admin_Remoted_Login();							// call function that control admin login
     71a:	0e 94 90 03 	call	0x720	; 0x720 <Admin_Remoted_Login>
     71e:	08 95       	ret

00000720 <Admin_Remoted_Login>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								scan username & pass from admin then check it (remoted)*/
		/************************************************************************/
void Admin_Remoted_Login()
{
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
	int i=0;											// declare variable and initialize it to 0
	USART_vidSendString("Enter User ");					// send message to serial terminal
     724:	8a e3       	ldi	r24, 0x3A	; 58
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     72c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     730:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     734:	c8 eb       	ldi	r28, 0xB8	; 184
     736:	d7 e0       	ldi	r29, 0x07	; 7
     738:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     73c:	88 83       	st	Y, r24
	i++;												// increase variable i by one
	u8RecieveByte();									// receive data
     73e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     742:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     746:	89 83       	std	Y+1, r24	; 0x01
	i++;												// increase variable i by one	
	u8RecieveByte();									// receive data
     748:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     74c:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     750:	8a 83       	std	Y+2, r24	; 0x02
	i++;												// increase variable i by one	
	u8RecieveByte();									// receive data
     752:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     756:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     75a:	8b 83       	std	Y+3, r24	; 0x03
	i++;												// increase variable i by one
	i=0;												// set variable i to 0
	USART_vidSendString("Enter Password");				// send message to serial terminal
     75c:	86 e4       	ldi	r24, 0x46	; 70
     75e:	92 e0       	ldi	r25, 0x02	; 2
     760:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)	
     764:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     768:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     76c:	c0 eb       	ldi	r28, 0xB0	; 176
     76e:	d7 e0       	ldi	r29, 0x07	; 7
     770:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     774:	88 83       	st	Y, r24
	i++;												// increase variable i by one
	u8RecieveByte();									// receive data
     776:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     77a:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     77e:	89 83       	std	Y+1, r24	; 0x01
	i++;												// increase variable i by one
	u8RecieveByte();									// receive data
     780:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     784:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     788:	8a 83       	std	Y+2, r24	; 0x02
	i++;												// increase variable i by one
	u8RecieveByte();									// receive data
     78a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     78e:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     792:	8b 83       	std	Y+3, r24	; 0x03
	i++;												// increase variable i by one
	check_admin_pass_remoted();							// call function that check username & pass for admin
     794:	0e 94 df 02 	call	0x5be	; 0x5be <check_admin_pass_remoted>
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <Air_Condition_Remoted>:
		/*Function Description: void function take void and return void
								control air condition	(remoted)				*/
		/************************************************************************/
void Air_Condition_Remoted()
{
	DC_Motor_vidInit();									// initialize DC Motor
     79e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <DC_Motor_vidInit>
	u8 temp,pre=1;										// declare two variable & initialize both with 1
	LM35_vidInit(ADC_CH0);								// initialize temperature sensor
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	0e 94 1a 0a 	call	0x1434	; 0x1434 <LM35_vidInit>
								control air condition	(remoted)				*/
		/************************************************************************/
void Air_Condition_Remoted()
{
	DC_Motor_vidInit();									// initialize DC Motor
	u8 temp,pre=1;										// declare two variable & initialize both with 1
     7a8:	d1 e0       	ldi	r29, 0x01	; 1
	LM35_vidInit(ADC_CH0);								// initialize temperature sensor
	while (1)											// infinite while loop
	{
		temp = LM35_u8Read();							// read temperature
     7aa:	0e 94 1d 0a 	call	0x143a	; 0x143a <LM35_u8Read>
     7ae:	c8 2f       	mov	r28, r24
		if(temp != pre)									// if temperature not equal to previous one
     7b0:	d8 17       	cp	r29, r24
     7b2:	d9 f3       	breq	.-10     	; 0x7aa <Air_Condition_Remoted+0xc>
		{
			pre = temp;									// set previous temperature to recent one
			if(temp >= 28)								// if temperature greater than or equal to 28
     7b4:	8c 31       	cpi	r24, 0x1C	; 28
     7b6:	68 f0       	brcs	.+26     	; 0x7d2 <Air_Condition_Remoted+0x34>
			{
				USART_vidSendString("Air condition ON                                                  ");// send message to serial terminal
     7b8:	85 e5       	ldi	r24, 0x55	; 85
     7ba:	92 e0       	ldi	r25, 0x02	; 2
     7bc:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     7c0:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
				LED_vidTurnOn(GPIOD, PIN2);				// turn on led
     7c4:	62 e0       	ldi	r22, 0x02	; 2
     7c6:	83 e0       	ldi	r24, 0x03	; 3
     7c8:	0e 94 12 0a 	call	0x1424	; 0x1424 <LED_vidTurnOn>
				DC_Motor_vidTurnOn();					// turn on DC Motor
     7cc:	0e 94 b9 06 	call	0xd72	; 0xd72 <DC_Motor_vidTurnOn>
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <Air_Condition_Remoted+0x50>
			}
			else if(temp <= 21 )
     7d2:	86 31       	cpi	r24, 0x16	; 22
     7d4:	60 f4       	brcc	.+24     	; 0x7ee <Air_Condition_Remoted+0x50>
			{
				USART_vidSendString("Air condition off                                                ");// send message to serial terminal
     7d6:	88 e9       	ldi	r24, 0x98	; 152
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
				USART_vidEnableTXInterrupt();			// enable TX interrupt (finish transmit)
     7de:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
				LED_vidTurnOff(GPIOD, PIN2);			// turn off led
     7e2:	62 e0       	ldi	r22, 0x02	; 2
     7e4:	83 e0       	ldi	r24, 0x03	; 3
     7e6:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
				DC_Motor_vidTurnOff();					// turn off DC Motor
     7ea:	0e 94 c4 06 	call	0xd88	; 0xd88 <DC_Motor_vidTurnOff>
			}
			Admin_Remoted_Menue();						// call function that display admin control menu
     7ee:	0e 94 ac 02 	call	0x558	; 0x558 <Admin_Remoted_Menue>
	while (1)											// infinite while loop
	{
		temp = LM35_u8Read();							// read temperature
		if(temp != pre)									// if temperature not equal to previous one
		{
			pre = temp;									// set previous temperature to recent one
     7f2:	dc 2f       	mov	r29, r28
     7f4:	da cf       	rjmp	.-76     	; 0x7aa <Air_Condition_Remoted+0xc>

000007f6 <User_Remoted_Menue>:
		/*Function Description: void function take void and return void
								display user control menu (remoted)				*/
		/************************************************************************/
void User_Remoted_Menue()
{
	USART_vidSendString("1.Room Lighting   2.Air condition   3.LogOut");// send message to serial terminal
     7f6:	8a ed       	ldi	r24, 0xDA	; 218
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     7fe:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     802:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     806:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
	switch(u8ReturnedValue)								// switch choice
     80a:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     80e:	82 33       	cpi	r24, 0x32	; 50
     810:	39 f0       	breq	.+14     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     812:	83 33       	cpi	r24, 0x33	; 51
     814:	39 f0       	breq	.+14     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     816:	81 33       	cpi	r24, 0x31	; 49
     818:	41 f4       	brne	.+16     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
	{
		case '1' :										// if choice equal 1
		control_Remoted_Rooms();						// call function that control rooms
     81a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <control_Remoted_Rooms>
		break;											// break
     81e:	08 95       	ret
		case '2' :										// if choice equal 2
		Air_Condition_Remoted();						// call function that control air condition
     820:	0e 94 cf 03 	call	0x79e	; 0x79e <Air_Condition_Remoted>
		break;											// break
		case '3' :										// if choice equal 3
		LogOut_Remotly();								// call function that logout from system
     824:	0e 94 08 05 	call	0xa10	; 0xa10 <LogOut_Remotly>
		break;											// break
     828:	08 95       	ret
		default:										// default
		User_Remoted_Menue();							// call function that display user control menu
     82a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <User_Remoted_Menue>
     82e:	08 95       	ret

00000830 <User_Remoted_Login>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								scan username & pass from user then check it (remoted)*/
		/************************************************************************/
void User_Remoted_Login()
{
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
	int i=0;											// declare variable i and initialize it to 0
	u8 UserId;											// declare user id variable
	USART_vidSendString("Enter User Id ");				// send message to serial terminal
     836:	87 e0       	ldi	r24, 0x07	; 7
     838:	93 e0       	ldi	r25, 0x03	; 3
     83a:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     83e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     842:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	UserId=u8ReturnedValue;								// set user id to entered id
     846:	10 91 ad 07 	lds	r17, 0x07AD	; 0x8007ad <u8ReturnedValue>
	USART_vidSendString("Enter User ");					// send message to serial terminal
     84a:	8a e3       	ldi	r24, 0x3A	; 58
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     852:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data						
     856:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     85a:	c8 eb       	ldi	r28, 0xB8	; 184
     85c:	d7 e0       	ldi	r29, 0x07	; 7
     85e:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     862:	88 83       	st	Y, r24
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     864:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     868:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     86c:	89 83       	std	Y+1, r24	; 0x01
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     86e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     872:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     876:	8a 83       	std	Y+2, r24	; 0x02
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     878:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     87c:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     880:	8b 83       	std	Y+3, r24	; 0x03
	i++;												// increase i by one
	i=0;												// set i to 0
	USART_vidSendString("Enter Password");				// send message to serial terminal
     882:	86 e4       	ldi	r24, 0x46	; 70
     884:	92 e0       	ldi	r25, 0x02	; 2
     886:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     88a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     88e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     892:	c0 eb       	ldi	r28, 0xB0	; 176
     894:	d7 e0       	ldi	r29, 0x07	; 7
     896:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     89a:	88 83       	st	Y, r24
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     89c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     8a0:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     8a4:	89 83       	std	Y+1, r24	; 0x01
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     8a6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     8aa:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     8ae:	8a 83       	std	Y+2, r24	; 0x02
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     8b0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     8b4:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     8b8:	8b 83       	std	Y+3, r24	; 0x03
	i++;												// increase i by one
	read_EEPROM(UserId);
     8ba:	81 2f       	mov	r24, r17
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 81 0b 	call	0x1702	; 0x1702 <read_EEPROM>
	check_user=0;										// initialize check variable to 0
     8c2:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <check_user>
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	12 c0       	rjmp	.+36     	; 0x8ee <__stack+0x8f>
	{
		if (user[i] == EEPROM_user[i])					// check if two value are equal or not
     8ca:	82 2f       	mov	r24, r18
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	fc 01       	movw	r30, r24
     8d0:	e8 54       	subi	r30, 0x48	; 72
     8d2:	f8 4f       	sbci	r31, 0xF8	; 248
     8d4:	30 81       	ld	r19, Z
     8d6:	fc 01       	movw	r30, r24
     8d8:	ec 54       	subi	r30, 0x4C	; 76
     8da:	f8 4f       	sbci	r31, 0xF8	; 248
     8dc:	80 81       	ld	r24, Z
     8de:	38 13       	cpse	r19, r24
     8e0:	05 c0       	rjmp	.+10     	; 0x8ec <__stack+0x8d>
		{
			check_user++;								// if that increase the check variable by one
     8e2:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <check_user>
     8e6:	8f 5f       	subi	r24, 0xFF	; 255
     8e8:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <check_user>
	u8RecieveByte();									// receive data
	pass[i]=u8ReturnedValue;							// store data in array
	i++;												// increase i by one
	read_EEPROM(UserId);
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     8ec:	2f 5f       	subi	r18, 0xFF	; 255
     8ee:	24 30       	cpi	r18, 0x04	; 4
     8f0:	60 f3       	brcs	.-40     	; 0x8ca <__stack+0x6b>
		}
		else											// if not
		{
		}
	}
	check=0;											// initialize check variable to 0
     8f2:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <check>
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	12 c0       	rjmp	.+36     	; 0x91e <__stack+0xbf>
	{
		if (pass[i] == EEPROM_pass[i])					// check if two value are equal or not
     8fa:	82 2f       	mov	r24, r18
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	fc 01       	movw	r30, r24
     900:	e0 55       	subi	r30, 0x50	; 80
     902:	f8 4f       	sbci	r31, 0xF8	; 248
     904:	30 81       	ld	r19, Z
     906:	fc 01       	movw	r30, r24
     908:	ef 53       	subi	r30, 0x3F	; 63
     90a:	f8 4f       	sbci	r31, 0xF8	; 248
     90c:	80 81       	ld	r24, Z
     90e:	38 13       	cpse	r19, r24
     910:	05 c0       	rjmp	.+10     	; 0x91c <__stack+0xbd>
		{
			check++;									// if that increase the check variable by one
     912:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <check>
     916:	8f 5f       	subi	r24, 0xFF	; 255
     918:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <check>
		else											// if not
		{
		}
	}
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
     91c:	2f 5f       	subi	r18, 0xFF	; 255
     91e:	24 30       	cpi	r18, 0x04	; 4
     920:	60 f3       	brcs	.-40     	; 0x8fa <__stack+0x9b>
		}
		else											// if not
		{
		}
	}
	if(check == 4 && check_user == 4)					// check if check variable equal 4 or not (correct pass)
     922:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <check>
     926:	84 30       	cpi	r24, 0x04	; 4
     928:	d9 f4       	brne	.+54     	; 0x960 <__stack+0x101>
     92a:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <check_user>
     92e:	84 30       	cpi	r24, 0x04	; 4
     930:	b9 f4       	brne	.+46     	; 0x960 <__stack+0x101>
	{
		USART_vidSendString("Correct Password                                                            ");// send message to serial terminal
     932:	85 ec       	ldi	r24, 0xC5	; 197
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     93a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
		LED_vidTurnOn(GPIOD,PIN4);						// turn on the led
     93e:	64 e0       	ldi	r22, 0x04	; 4
     940:	83 e0       	ldi	r24, 0x03	; 3
     942:	0e 94 12 0a 	call	0x1424	; 0x1424 <LED_vidTurnOn>
		LED_vidTurnOff(GPIOD,PIN3);						// turn off the led
     946:	63 e0       	ldi	r22, 0x03	; 3
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
		LED_vidTurnOff(GPIOB,PIN5);						// turn off the led
     94e:	65 e0       	ldi	r22, 0x05	; 5
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
		wrong_pass_count = 0;							// set wrong pass counter to 0
     956:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <wrong_pass_count>
		User_Remoted_Menue();							// reset wrong_pass_count variable by reinitialize by 0
     95a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <User_Remoted_Menue>
     95e:	54 c0       	rjmp	.+168    	; 0xa08 <__stack+0x1a9>
	}
	else												// if not
	{
		wrong_pass_count++;								// increase wrong_pass_count variable by one
     960:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <wrong_pass_count>
     964:	8f 5f       	subi	r24, 0xFF	; 255
     966:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <wrong_pass_count>
		USART_vidSendString("Password Wrong ");			// send message to serial terminal
     96a:	82 e1       	ldi	r24, 0x12	; 18
     96c:	92 e0       	ldi	r25, 0x02	; 2
     96e:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     972:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
		if (wrong_pass_count == 1)						// if wrong pass counter equal to 1
     976:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <wrong_pass_count>
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	29 f4       	brne	.+10     	; 0x988 <__stack+0x129>
		USART_vidSendString(" 2 ");						// send message to serial terminal
     97e:	82 e2       	ldi	r24, 0x22	; 34
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
     986:	0d c0       	rjmp	.+26     	; 0x9a2 <__stack+0x143>
		else if (wrong_pass_count == 2)					// if wrong pass counter equal to 2
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	29 f4       	brne	.+10     	; 0x996 <__stack+0x137>
		USART_vidSendString(" 1 ");						// send message to serial terminal
     98c:	86 e2       	ldi	r24, 0x26	; 38
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
     994:	06 c0       	rjmp	.+12     	; 0x9a2 <__stack+0x143>
		else if (wrong_pass_count == 3)					// if wrong pass counter equal to 3
     996:	83 30       	cpi	r24, 0x03	; 3
     998:	21 f4       	brne	.+8      	; 0x9a2 <__stack+0x143>
		USART_vidSendString(" 0 ");						// send message to serial terminal
     99a:	8a e2       	ldi	r24, 0x2A	; 42
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
		USART_vidSendString(" tries remains ");			// send message to serial terminal
     9a2:	86 e1       	ldi	r24, 0x16	; 22
     9a4:	93 e0       	ldi	r25, 0x03	; 3
     9a6:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     9aa:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
		if (wrong_pass_count == 3)						// if wrong pass counter equal to 3
     9ae:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <wrong_pass_count>
     9b2:	83 30       	cpi	r24, 0x03	; 3
     9b4:	39 f5       	brne	.+78     	; 0xa04 <__stack+0x1a5>
		{
			wrong_pass_count=0;							// set wrong pass counter to 0
     9b6:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <wrong_pass_count>
			USART_vidSendString("Lock mode!!");			// send message to serial terminal
     9ba:	8e e2       	ldi	r24, 0x2E	; 46
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
			USART_vidEnableTXInterrupt();				// enable TX interrupt (finish transmit)
     9c2:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
			LED_vidTurnOn(GPIOB, PIN5);					// turn on the led
     9c6:	65 e0       	ldi	r22, 0x05	; 5
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	0e 94 12 0a 	call	0x1424	; 0x1424 <LED_vidTurnOn>
			LED_vidTurnOff(GPIOD, PIN3);				// turn off led
     9ce:	63 e0       	ldi	r22, 0x03	; 3
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
			LED_vidTurnOff(GPIOD, PIN4);				// turn off led
     9d6:	64 e0       	ldi	r22, 0x04	; 4
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
			DIO_vidWritePin(GPIOD, PIN7, HIGH);			// output high on pin (turn on alarm)
     9de:	41 e0       	ldi	r20, 0x01	; 1
     9e0:	67 e0       	ldi	r22, 0x07	; 7
     9e2:	83 e0       	ldi	r24, 0x03	; 3
     9e4:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
     9e8:	2f e3       	ldi	r18, 0x3F	; 63
     9ea:	82 e4       	ldi	r24, 0x42	; 66
     9ec:	9f e0       	ldi	r25, 0x0F	; 15
     9ee:	21 50       	subi	r18, 0x01	; 1
     9f0:	80 40       	sbci	r24, 0x00	; 0
     9f2:	90 40       	sbci	r25, 0x00	; 0
     9f4:	e1 f7       	brne	.-8      	; 0x9ee <__stack+0x18f>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <__stack+0x199>
     9f8:	00 00       	nop
			_delay_ms(5000);							// wait for five second
			DIO_vidWritePin(GPIOD, PIN7, LOW);			// output low on pin (turn off alarm)
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	67 e0       	ldi	r22, 0x07	; 7
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
		}
		User_Remoted_Login();							// call function that control user login
     a04:	0e 94 18 04 	call	0x830	; 0x830 <User_Remoted_Login>
	}
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	08 95       	ret

00000a10 <LogOut_Remotly>:
		/*Function Description: void function take void and return void
								logout from the system and return to start screen (remoted)*/
		/************************************************************************/
void LogOut_Remotly()
{
	USART_vidSendString("press A for Admin Login & U for User login");// send message to serial terminal
     a10:	86 e2       	ldi	r24, 0x26	; 38
     a12:	93 e0       	ldi	r25, 0x03	; 3
     a14:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)					
     a18:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     a1c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	USART_vidEnableRXInterrupt();						// enable RX interrupt (finish receiving)
     a20:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
	if (u8ReturnedValue=='A')							// if choice equal A
     a24:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     a28:	81 34       	cpi	r24, 0x41	; 65
     a2a:	31 f4       	brne	.+12     	; 0xa38 <LogOut_Remotly+0x28>
	{
		LogInFlag=1;									// set login flag equal to 1
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <LogInFlag>
		Isadmin_Remoted();								// call function that know who is login
		Admin_Remoted_Login();							// call function that control admin login
     a32:	0e 94 90 03 	call	0x720	; 0x720 <Admin_Remoted_Login>
     a36:	08 95       	ret
	}
	else if (u8ReturnedValue=='U')						// if choice equal to U
     a38:	85 35       	cpi	r24, 0x55	; 85
     a3a:	29 f4       	brne	.+10     	; 0xa46 <LogOut_Remotly+0x36>
	{
		LogInFlag=0;									// set login flag equal to 0
     a3c:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <LogInFlag>
		Isadmin_Remoted();								// call function that know who is login
		User_Remoted_Login();							// call function that control user login
     a40:	0e 94 18 04 	call	0x830	; 0x830 <User_Remoted_Login>
     a44:	08 95       	ret
	}
	else												// if not
	{	
		LogOut_Remotly();								// call function that logout from system
     a46:	0e 94 08 05 	call	0xa10	; 0xa10 <LogOut_Remotly>
     a4a:	08 95       	ret

00000a4c <Bluetooth_Control>:
		/*Function Description: void function take void and return void
								control system via bluetooth (remoted)			*/
		/************************************************************************/
void Bluetooth_Control()
{
	USART_vidSendString("Press A for Admin Login & U for user login");// send message to serial terminal
     a4c:	81 e5       	ldi	r24, 0x51	; 81
     a4e:	93 e0       	ldi	r25, 0x03	; 3
     a50:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     a54:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	u8ReturnedValue = USART_u8RecieveByte();			// receive data and store it in variable
     a58:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <USART_u8RecieveByte>
     a5c:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
	USART_vidEnableRXInterrupt();						// enable TX interrupt (finish transmit)
     a60:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
	if (u8ReturnedValue=='A')							// if choice equal to A
     a64:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     a68:	81 34       	cpi	r24, 0x41	; 65
     a6a:	31 f4       	brne	.+12     	; 0xa78 <Bluetooth_Control+0x2c>
	{
		LogInFlag=1;									// set login flag to 1
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <LogInFlag>
		Isadmin_Remoted();								// call function that check who is login (admin or user)
		Admin_Remoted_Login();							// call function that scan username & pass from admin
     a72:	0e 94 90 03 	call	0x720	; 0x720 <Admin_Remoted_Login>
     a76:	08 95       	ret
	}
	else if (u8ReturnedValue=='U')						// if choice equal to U
     a78:	85 35       	cpi	r24, 0x55	; 85
     a7a:	29 f4       	brne	.+10     	; 0xa86 <Bluetooth_Control+0x3a>
	{
		LogInFlag=0;									// set login flag to 0
     a7c:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <LogInFlag>
		Isadmin_Remoted();								// call function that check who is login (admin or user)
		User_Remoted_Login();							// call function that scan username & pass from user
     a80:	0e 94 18 04 	call	0x830	; 0x830 <User_Remoted_Login>
     a84:	08 95       	ret
	}
	else												// if not 
	{
		USART_vidSendString("Wrong Choice");			// send message to serial terminal
     a86:	85 ea       	ldi	r24, 0xA5	; 165
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
		USART_vidEnableTXInterrupt();					// enable TX interrupt (finish transmit)
     a8e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
		Bluetooth_Control();							// call function that control system remoted
     a92:	0e 94 26 05 	call	0xa4c	; 0xa4c <Bluetooth_Control>
     a96:	08 95       	ret

00000a98 <Add_Remoted_User>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								add user to the system	(remoted)				*/
		/************************************************************************/
void Add_Remoted_User()
{	
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
	int i=0;											// declare variable & initialize with 0	
	u8 UserId;											// declare variable to store user id
	USART_vidSendString("Enter User Id ");				// send message to serial terminal
     a9e:	87 e0       	ldi	r24, 0x07	; 7
     aa0:	93 e0       	ldi	r25, 0x03	; 3
     aa2:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     aa6:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     aaa:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	UserId=u8ReturnedValue;								// store data in variable
     aae:	10 91 ad 07 	lds	r17, 0x07AD	; 0x8007ad <u8ReturnedValue>
	USART_vidSendString("Enter User ");					// send message to serial terminal
     ab2:	8a e3       	ldi	r24, 0x3A	; 58
     ab4:	92 e0       	ldi	r25, 0x02	; 2
     ab6:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     aba:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     abe:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     ac2:	c8 eb       	ldi	r28, 0xB8	; 184
     ac4:	d7 e0       	ldi	r29, 0x07	; 7
     ac6:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     aca:	88 83       	st	Y, r24
	i++;												// increase i by one 
	u8RecieveByte();									// receive data
     acc:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     ad0:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     ad4:	89 83       	std	Y+1, r24	; 0x01
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     ad6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     ada:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     ade:	8a 83       	std	Y+2, r24	; 0x02
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     ae0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	user[i]=u8ReturnedValue;							// store data in array
     ae4:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     ae8:	8b 83       	std	Y+3, r24	; 0x03
	i++;												// increase i by one
	i=0;												// initialize i by 0
	USART_vidSendString("Enter Password");				// send message to serial terminal
     aea:	86 e4       	ldi	r24, 0x46	; 70
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     af2:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     af6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     afa:	c0 eb       	ldi	r28, 0xB0	; 176
     afc:	d7 e0       	ldi	r29, 0x07	; 7
     afe:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     b02:	88 83       	st	Y, r24
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     b04:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     b08:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     b0c:	89 83       	std	Y+1, r24	; 0x01
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     b0e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     b12:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     b16:	8a 83       	std	Y+2, r24	; 0x02
	i++;												// increase i by one
	u8RecieveByte();									// receive data
     b18:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	pass[i]=u8ReturnedValue;							// store data in array
     b1c:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     b20:	8b 83       	std	Y+3, r24	; 0x03
	i++;												// increase i by one
	write_EEPROM(UserId);
     b22:	81 2f       	mov	r24, r17
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 48 0b 	call	0x1690	; 0x1690 <write_EEPROM>
	USART_vidSendString("User Added Successfully                                              ");// send message to serial terminal
     b2a:	8c e7       	ldi	r24, 0x7C	; 124
     b2c:	93 e0       	ldi	r25, 0x03	; 3
     b2e:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     b32:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	Admin_Remoted_Menue();								// call function that display admin control menu
     b36:	0e 94 ac 02 	call	0x558	; 0x558 <Admin_Remoted_Menue>
}
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	08 95       	ret

00000b42 <open_door>:
		/*Function Description: void function take void and return void
								control door opening & closing (remoted)		*/
		/************************************************************************/
void open_door()
{	
	USART_vidSendString("1. open The door    2.Close the door    0.Return");// send message to serial terminal
     b42:	82 ec       	ldi	r24, 0xC2	; 194
     b44:	93 e0       	ldi	r25, 0x03	; 3
     b46:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
	USART_vidEnableTXInterrupt();						// enable TX interrupt (finish transmit)
     b4a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
	u8RecieveByte();									// receive data
     b4e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <u8RecieveByte>
	if (u8ReturnedValue == '1')							// if choice equal 1
     b52:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     b56:	81 33       	cpi	r24, 0x31	; 49
     b58:	51 f4       	brne	.+20     	; 0xb6e <open_door+0x2c>
	{
		Servo_Clockwise(angle);							// turn on servo clock wise
     b5a:	8a e5       	ldi	r24, 0x5A	; 90
     b5c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Servo_Clockwise>
		USART_vidSendString("The door is open                                                               ");// send message to serial terminal
     b60:	83 ef       	ldi	r24, 0xF3	; 243
     b62:	93 e0       	ldi	r25, 0x03	; 3
     b64:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
		USART_vidEnableRXInterrupt();					// enable RX interrupt (finish receiving)
     b68:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
     b6c:	13 c0       	rjmp	.+38     	; 0xb94 <open_door+0x52>
	}
	else if(u8ReturnedValue == '2')						// if choice equal 2
     b6e:	82 33       	cpi	r24, 0x32	; 50
     b70:	51 f4       	brne	.+20     	; 0xb86 <open_door+0x44>
	{
		Servo_Counterclockwise(angle);					// turn on servo anti clock wise
     b72:	8a e5       	ldi	r24, 0x5A	; 90
     b74:	0e 94 cd 0a 	call	0x159a	; 0x159a <Servo_Counterclockwise>
		USART_vidSendString("The door is closed                                                            ");// send message to serial terminal
     b78:	83 e4       	ldi	r24, 0x43	; 67
     b7a:	94 e0       	ldi	r25, 0x04	; 4
     b7c:	0e 94 df 10 	call	0x21be	; 0x21be <USART_vidSendString>
		USART_vidEnableRXInterrupt();					// enable RX interrupt (finish receiving)
     b80:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
     b84:	07 c0       	rjmp	.+14     	; 0xb94 <open_door+0x52>
	}
	else if (u8ReturnedValue == '0')					// if choice equal 0
     b86:	80 33       	cpi	r24, 0x30	; 48
     b88:	19 f4       	brne	.+6      	; 0xb90 <open_door+0x4e>
	{
		Admin_Remoted_Menue();							// call function that display admin control menu
     b8a:	0e 94 ac 02 	call	0x558	; 0x558 <Admin_Remoted_Menue>
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <open_door+0x52>
	}
	else												// if not
	{
		open_door();									// call function that control door
     b90:	0e 94 a1 05 	call	0xb42	; 0xb42 <open_door>
	}
	Admin_Remoted_Menue();								// call function that display admin control menu
     b94:	0e 94 ac 02 	call	0x558	; 0x558 <Admin_Remoted_Menue>
     b98:	08 95       	ret

00000b9a <u8GetKeyPressed>:
     b9a:	2f e6       	ldi	r18, 0x6F	; 111
     b9c:	81 e1       	ldi	r24, 0x11	; 17
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	21 50       	subi	r18, 0x01	; 1
     ba2:	80 40       	sbci	r24, 0x00	; 0
     ba4:	90 40       	sbci	r25, 0x00	; 0
     ba6:	e1 f7       	brne	.-8      	; 0xba0 <u8GetKeyPressed+0x6>
     ba8:	00 c0       	rjmp	.+0      	; 0xbaa <u8GetKeyPressed+0x10>
     baa:	00 00       	nop
u8 u8GetKeyPressed()
{
	do										// do while loop                         	
	{
		_delay_ms(350);						// wait for 350 m second
		u8ReturnedValue = KPD_u8GetPressedKey(GPIOC, HIGH_NIBBLE);// return keypad pressed value	
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	0e 94 a5 08 	call	0x114a	; 0x114a <KPD_u8GetPressedKey>
     bb4:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
     bb8:	8b e7       	ldi	r24, 0x7B	; 123
     bba:	92 e9       	ldi	r25, 0x92	; 146
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <u8GetKeyPressed+0x22>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <u8GetKeyPressed+0x28>
     bc2:	00 00       	nop
		_delay_ms(150);						//	wait for 150 m second                   	
	} while (u8ReturnedValue == NOT_PRESSED);// loop repeated if not pressed any key
     bc4:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     bc8:	8f 3f       	cpi	r24, 0xFF	; 255
     bca:	39 f3       	breq	.-50     	; 0xb9a <u8GetKeyPressed>
	return u8ReturnedValue;					// return pressed value
}
     bcc:	08 95       	ret

00000bce <control_rooms>:
		/*Function Name: control_rooms											*/
		/*Function Input: take one input (constant variable form u8 type)		*/
		/*Function Description: void function that control rooms lightning		*/
		/************************************************************************/
void control_rooms(const u8 u8SelectedRoom)
{
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	c8 2f       	mov	r28, r24
	u8 u8Status = 0;						// declare variable that will store status and initialize it with 0
	u8 u8TurnOn  = 0;						// declare variable that will store turn on status and initialize it with 0
	u8 u8TurnOff = 0;						// declare variable that will store turn off status and initialize it with 0
     bda:	00 e0       	ldi	r16, 0x00	; 0
		/*Function Description: void function that control rooms lightning		*/
		/************************************************************************/
void control_rooms(const u8 u8SelectedRoom)
{
	u8 u8Status = 0;						// declare variable that will store status and initialize it with 0
	u8 u8TurnOn  = 0;						// declare variable that will store turn on status and initialize it with 0
     bdc:	f1 2c       	mov	r15, r1
		/*Function Input: take one input (constant variable form u8 type)		*/
		/*Function Description: void function that control rooms lightning		*/
		/************************************************************************/
void control_rooms(const u8 u8SelectedRoom)
{
	u8 u8Status = 0;						// declare variable that will store status and initialize it with 0
     bde:	10 e0       	ldi	r17, 0x00	; 0
	u8 u8TurnOn  = 0;						// declare variable that will store turn on status and initialize it with 0
	u8 u8TurnOff = 0;						// declare variable that will store turn off status and initialize it with 0
	u8 response;
	do										// do while loop 
	{
		LCD_vidClearScreen();				// clear LCD screen
     be0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		switch(u8SelectedRoom)				// switch for selection room variable
     be4:	c5 30       	cpi	r28, 0x05	; 5
     be6:	11 f1       	breq	.+68     	; 0xc2c <control_rooms+0x5e>
     be8:	28 f4       	brcc	.+10     	; 0xbf4 <control_rooms+0x26>
     bea:	c3 30       	cpi	r28, 0x03	; 3
     bec:	49 f0       	breq	.+18     	; 0xc00 <control_rooms+0x32>
     bee:	c4 30       	cpi	r28, 0x04	; 4
     bf0:	91 f0       	breq	.+36     	; 0xc16 <control_rooms+0x48>
     bf2:	47 c0       	rjmp	.+142    	; 0xc82 <control_rooms+0xb4>
     bf4:	c7 30       	cpi	r28, 0x07	; 7
     bf6:	81 f1       	breq	.+96     	; 0xc58 <control_rooms+0x8a>
     bf8:	20 f1       	brcs	.+72     	; 0xc42 <control_rooms+0x74>
     bfa:	c8 30       	cpi	r28, 0x08	; 8
     bfc:	c1 f1       	breq	.+112    	; 0xc6e <control_rooms+0xa0>
     bfe:	41 c0       	rjmp	.+130    	; 0xc82 <control_rooms+0xb4>
		{
			case ROOM1_MENU:				// if selection is room1
			u8Status = ROOM1_STATUS;		// set status to room1 status
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
     c00:	82 e9       	ldi	r24, 0x92	; 146
     c02:	94 e0       	ldi	r25, 0x04	; 4
     c04:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		switch(u8SelectedRoom)				// switch for selection room variable
		{
			case ROOM1_MENU:				// if selection is room1
			u8Status = ROOM1_STATUS;		// set status to room1 status
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
     c08:	01 e3       	ldi	r16, 0x31	; 49
		LCD_vidClearScreen();				// clear LCD screen
		switch(u8SelectedRoom)				// switch for selection room variable
		{
			case ROOM1_MENU:				// if selection is room1
			u8Status = ROOM1_STATUS;		// set status to room1 status
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
     c0a:	0f 2e       	mov	r0, r31
     c0c:	f1 e2       	ldi	r31, 0x21	; 33
     c0e:	ff 2e       	mov	r15, r31
     c10:	f0 2d       	mov	r31, r0
	{
		LCD_vidClearScreen();				// clear LCD screen
		switch(u8SelectedRoom)				// switch for selection room variable
		{
			case ROOM1_MENU:				// if selection is room1
			u8Status = ROOM1_STATUS;		// set status to room1 status
     c12:	11 e1       	ldi	r17, 0x11	; 17
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
			break;							// break case
     c14:	36 c0       	rjmp	.+108    	; 0xc82 <control_rooms+0xb4>
			case ROOM2_MENU:				// if selection is room2
			u8Status = ROOM2_STATUS;		// set status to room2 status
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
     c16:	80 ea       	ldi	r24, 0xA0	; 160
     c18:	94 e0       	ldi	r25, 0x04	; 4
     c1a:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
			break;							// break case
			case ROOM2_MENU:				// if selection is room2
			u8Status = ROOM2_STATUS;		// set status to room2 status
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
     c1e:	02 e3       	ldi	r16, 0x32	; 50
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
			break;							// break case
			case ROOM2_MENU:				// if selection is room2
			u8Status = ROOM2_STATUS;		// set status to room2 status
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
     c20:	0f 2e       	mov	r0, r31
     c22:	f2 e2       	ldi	r31, 0x22	; 34
     c24:	ff 2e       	mov	r15, r31
     c26:	f0 2d       	mov	r31, r0
			u8TurnOn = ROOM1_TURN_ON;		// set turn on status to room1 turn on status
			u8TurnOff = ROOM1_TURN_OFF;		// set turn off status to room1 turn off status
			LCD_vidDisplayString("Room1 Status:");// display message on LCD screen
			break;							// break case
			case ROOM2_MENU:				// if selection is room2
			u8Status = ROOM2_STATUS;		// set status to room2 status
     c28:	12 e1       	ldi	r17, 0x12	; 18
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
			break;							// break case
     c2a:	2b c0       	rjmp	.+86     	; 0xc82 <control_rooms+0xb4>
			case ROOM3_MENU:				// if selection is room3
			u8Status = ROOM3_STATUS;		// set status to room3 status
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
     c2c:	8e ea       	ldi	r24, 0xAE	; 174
     c2e:	94 e0       	ldi	r25, 0x04	; 4
     c30:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
			break;							// break case
			case ROOM3_MENU:				// if selection is room3
			u8Status = ROOM3_STATUS;		// set status to room3 status
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
     c34:	03 e3       	ldi	r16, 0x33	; 51
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
			break;							// break case
			case ROOM3_MENU:				// if selection is room3
			u8Status = ROOM3_STATUS;		// set status to room3 status
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
     c36:	0f 2e       	mov	r0, r31
     c38:	f3 e2       	ldi	r31, 0x23	; 35
     c3a:	ff 2e       	mov	r15, r31
     c3c:	f0 2d       	mov	r31, r0
			u8TurnOn = ROOM2_TURN_ON;		// set turn on status to room2 turn on status
			u8TurnOff = ROOM2_TURN_OFF;		// set turn off status to room2 turn off status
			LCD_vidDisplayString("Room2 Status:");// display message on LCD screen
			break;							// break case
			case ROOM3_MENU:				// if selection is room3
			u8Status = ROOM3_STATUS;		// set status to room3 status
     c3e:	13 e1       	ldi	r17, 0x13	; 19
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
			break;							// break case
     c40:	20 c0       	rjmp	.+64     	; 0xc82 <control_rooms+0xb4>
			case ROOM4_MENU:				// if selection is room4
			u8Status = ROOM4_STATUS;		// set status to room4 status
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
     c42:	8c eb       	ldi	r24, 0xBC	; 188
     c44:	94 e0       	ldi	r25, 0x04	; 4
     c46:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
			break;							// break case
			case ROOM4_MENU:				// if selection is room4
			u8Status = ROOM4_STATUS;		// set status to room4 status
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
     c4a:	04 e3       	ldi	r16, 0x34	; 52
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
			break;							// break case
			case ROOM4_MENU:				// if selection is room4
			u8Status = ROOM4_STATUS;		// set status to room4 status
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
     c4c:	0f 2e       	mov	r0, r31
     c4e:	f4 e2       	ldi	r31, 0x24	; 36
     c50:	ff 2e       	mov	r15, r31
     c52:	f0 2d       	mov	r31, r0
			u8TurnOn = ROOM3_TURN_ON;		// set turn on status to room3 turn on status
			u8TurnOff = ROOM3_TURN_OFF;		// set turn off status to room3 turn off status
			LCD_vidDisplayString("Room3 Status:");// display message on LCD screen
			break;							// break case
			case ROOM4_MENU:				// if selection is room4
			u8Status = ROOM4_STATUS;		// set status to room4 status
     c54:	14 e1       	ldi	r17, 0x14	; 20
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
			break;							// break case
     c56:	15 c0       	rjmp	.+42     	; 0xc82 <control_rooms+0xb4>
			case ROOM5_MENU:				// if selection is room5
			u8Status = ROOM5_STATUS;		// set status to room5 status
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
     c58:	8a ec       	ldi	r24, 0xCA	; 202
     c5a:	94 e0       	ldi	r25, 0x04	; 4
     c5c:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
			break;							// break case
			case ROOM5_MENU:				// if selection is room5
			u8Status = ROOM5_STATUS;		// set status to room5 status
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
     c60:	05 e3       	ldi	r16, 0x35	; 53
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
			break;							// break case
			case ROOM5_MENU:				// if selection is room5
			u8Status = ROOM5_STATUS;		// set status to room5 status
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
     c62:	0f 2e       	mov	r0, r31
     c64:	f5 e2       	ldi	r31, 0x25	; 37
     c66:	ff 2e       	mov	r15, r31
     c68:	f0 2d       	mov	r31, r0
			u8TurnOn = ROOM4_TURN_ON;		// set turn on status to room4 turn on status
			u8TurnOff = ROOM4_TURN_OFF;		// set turn off status to room4 turn off status
			LCD_vidDisplayString("Room4 Status:");// display message on LCD screen
			break;							// break case
			case ROOM5_MENU:				// if selection is room5
			u8Status = ROOM5_STATUS;		// set status to room5 status
     c6a:	15 e1       	ldi	r17, 0x15	; 21
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
			break;							// break case
     c6c:	0a c0       	rjmp	.+20     	; 0xc82 <control_rooms+0xb4>
			case ROOM6_MENU:				// if selection is room6
			u8Status = ROOM6_STATUS;		// set status to room6 status
			u8TurnOn = ROOM6_TURN_ON;		// set turn on status to room6 turn on status
			u8TurnOff = ROOM6_TURN_OFF;		// set turn off status to room6 turn off status
			LCD_vidDisplayString("Room6 Status:");// display message on LCD screen
     c6e:	88 ed       	ldi	r24, 0xD8	; 216
     c70:	94 e0       	ldi	r25, 0x04	; 4
     c72:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
			break;							// break case
			case ROOM6_MENU:				// if selection is room6
			u8Status = ROOM6_STATUS;		// set status to room6 status
			u8TurnOn = ROOM6_TURN_ON;		// set turn on status to room6 turn on status
			u8TurnOff = ROOM6_TURN_OFF;		// set turn off status to room6 turn off status
     c76:	06 e3       	ldi	r16, 0x36	; 54
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
			break;							// break case
			case ROOM6_MENU:				// if selection is room6
			u8Status = ROOM6_STATUS;		// set status to room6 status
			u8TurnOn = ROOM6_TURN_ON;		// set turn on status to room6 turn on status
     c78:	0f 2e       	mov	r0, r31
     c7a:	f6 e2       	ldi	r31, 0x26	; 38
     c7c:	ff 2e       	mov	r15, r31
     c7e:	f0 2d       	mov	r31, r0
			u8TurnOn = ROOM5_TURN_ON;		// set turn on status to room5 turn on status
			u8TurnOff = ROOM5_TURN_OFF;		// set turn off status to room5 turn off status
			LCD_vidDisplayString("Room5 Status:");// display message on LCD screen
			break;							// break case
			case ROOM6_MENU:				// if selection is room6
			u8Status = ROOM6_STATUS;		// set status to room6 status
     c80:	16 e1       	ldi	r17, 0x16	; 22
			u8TurnOn = ROOM6_TURN_ON;		// set turn on status to room6 turn on status
			u8TurnOff = ROOM6_TURN_OFF;		// set turn off status to room6 turn off status
			LCD_vidDisplayString("Room6 Status:");// display message on LCD screen
			break;							// break case
		}	
		USART_vidSendByte(u8Status);		// send status to slave
     c82:	81 2f       	mov	r24, r17
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
		USART_vidEnableTXInterrupt();		// enable TX interrupt (finish transmitting)
     c8a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
     c8e:	87 ea       	ldi	r24, 0xA7	; 167
     c90:	91 e6       	ldi	r25, 0x61	; 97
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	f1 f7       	brne	.-4      	; 0xc92 <control_rooms+0xc4>
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <control_rooms+0xca>
     c98:	00 00       	nop
		_delay_ms(100);						// wait 100 m second
		response = USART_u8RecieveByte();	// receive response from slave
     c9a:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <USART_u8RecieveByte>
     c9e:	d8 2f       	mov	r29, r24
		USART_vidEnableRXInterrupt();		// enable RX interrupt (finish receiving)
     ca0:	0e 94 db 10 	call	0x21b6	; 0x21b6 <USART_vidEnableRXInterrupt>
		if(response == ON_STATUS)			// if response equal to on state
     ca4:	d1 30       	cpi	r29, 0x01	; 1
     ca6:	29 f4       	brne	.+10     	; 0xcb2 <control_rooms+0xe4>
		{
			LCD_vidDisplayString("ON");		// display message on LCD screen
     ca8:	89 e3       	ldi	r24, 0x39	; 57
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
     cb0:	04 c0       	rjmp	.+8      	; 0xcba <control_rooms+0xec>
		}
		else								// if not 
		{
			LCD_vidDisplayString("OFF");	// display message on LCD screen
     cb2:	86 ee       	ldi	r24, 0xE6	; 230
     cb4:	94 e0       	ldi	r25, 0x04	; 4
     cb6:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		}
		LCD_vidMoveCursor(2,1);				// move LCD cursor to second line
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">> 1-On ");	// display message on LCD screen
     cc2:	8a ee       	ldi	r24, 0xEA	; 234
     cc4:	94 e0       	ldi	r25, 0x04	; 4
     cc6:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		LCD_vidMoveCursor(3,1);				// move LCD cursor to third line
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	83 e0       	ldi	r24, 0x03	; 3
     cce:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">> 2-Off ");	// display message on LCD screen
     cd2:	83 ef       	ldi	r24, 0xF3	; 243
     cd4:	94 e0       	ldi	r25, 0x04	; 4
     cd6:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		LCD_vidMoveCursor(4,1);				// move LCD cursor to fourth line
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">> 0-RET ");	// display message on LCD screen
     ce2:	8d ef       	ldi	r24, 0xFD	; 253
     ce4:	94 e0       	ldi	r25, 0x04	; 4
     ce6:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		u8ReturnedValue = u8GetKeyPressed();// take choice from user            
     cea:	0e 94 cd 05 	call	0xb9a	; 0xb9a <u8GetKeyPressed>
     cee:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
     cf2:	8f e4       	ldi	r24, 0x4F	; 79
     cf4:	93 ec       	ldi	r25, 0xC3	; 195
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <control_rooms+0x128>
     cfa:	00 c0       	rjmp	.+0      	; 0xcfc <control_rooms+0x12e>
     cfc:	00 00       	nop
		_delay_ms(200);                     // wait for 200 m second
		if (u8ReturnedValue == '1')			// if choice equal to one
     cfe:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     d02:	81 33       	cpi	r24, 0x31	; 49
     d04:	39 f4       	brne	.+14     	; 0xd14 <control_rooms+0x146>
		{
			USART_vidSendByte(u8TurnOn);	// send turn on status to slave
     d06:	8f 2d       	mov	r24, r15
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
			USART_vidEnableTXInterrupt();	// enable TX interrupt (finish transmitting)
     d0e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
     d12:	18 c0       	rjmp	.+48     	; 0xd44 <control_rooms+0x176>
		}
		else if (u8ReturnedValue == '2')	// if choice equal to two
     d14:	82 33       	cpi	r24, 0x32	; 50
     d16:	39 f4       	brne	.+14     	; 0xd26 <control_rooms+0x158>
		{
		  USART_vidSendByte(u8TurnOff);		// send turn off status to slave
     d18:	80 2f       	mov	r24, r16
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
		  USART_vidEnableTXInterrupt();		// enable TX interrupt (finish transmitting)
     d20:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
     d24:	0f c0       	rjmp	.+30     	; 0xd44 <control_rooms+0x176>
		}
		else								// if not 
		{
			LCD_vidClearScreen();			// clear LCD screen
     d26:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
			LCD_vidDisplayString("Wrong input");// display message on LCD screen
     d2a:	87 e0       	ldi	r24, 0x07	; 7
     d2c:	95 e0       	ldi	r25, 0x05	; 5
     d2e:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
     d32:	9f e3       	ldi	r25, 0x3F	; 63
     d34:	2d e0       	ldi	r18, 0x0D	; 13
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	91 50       	subi	r25, 0x01	; 1
     d3a:	20 40       	sbci	r18, 0x00	; 0
     d3c:	80 40       	sbci	r24, 0x00	; 0
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <control_rooms+0x16a>
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <control_rooms+0x174>
     d42:	00 00       	nop
			_delay_ms(1000);				// wait for one second
		}
	}while ( (u8ReturnedValue < '0') || (u8ReturnedValue > '2') );// loop repeated if choice less than 0 or grater than 2
     d44:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
     d48:	80 53       	subi	r24, 0x30	; 48
     d4a:	83 30       	cpi	r24, 0x03	; 3
     d4c:	08 f0       	brcs	.+2      	; 0xd50 <control_rooms+0x182>
     d4e:	48 cf       	rjmp	.-368    	; 0xbe0 <control_rooms+0x12>
}
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	08 95       	ret

00000d5c <DC_Motor_vidInit>:
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void DC_Motor_vidInit()
{
DIO_vidSetPinMode(DC_MOTOR_PORT,DC_MOTOR_PIN0,OUTPUT);
     d5c:	41 e0       	ldi	r20, 0x01	; 1
     d5e:	66 e0       	ldi	r22, 0x06	; 6
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
DIO_vidSetPinMode(DC_MOTOR_PORT,DC_MOTOR_PIN1,OUTPUT);
     d66:	41 e0       	ldi	r20, 0x01	; 1
     d68:	67 e0       	ldi	r22, 0x07	; 7
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
     d70:	08 95       	ret

00000d72 <DC_Motor_vidTurnOn>:
}
void DC_Motor_vidTurnOn()
{
    DIO_vidWritePin(DC_MOTOR_PORT,DC_MOTOR_PIN0,HIGH);
     d72:	41 e0       	ldi	r20, 0x01	; 1
     d74:	66 e0       	ldi	r22, 0x06	; 6
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
    DIO_vidWritePin(DC_MOTOR_PORT,DC_MOTOR_PIN1,LOW);
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	67 e0       	ldi	r22, 0x07	; 7
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
     d86:	08 95       	ret

00000d88 <DC_Motor_vidTurnOff>:
}
void DC_Motor_vidTurnOff()
{
    DIO_vidWritePin(DC_MOTOR_PORT,DC_MOTOR_PIN0,LOW);
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	66 e0       	ldi	r22, 0x06	; 6
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
    DIO_vidWritePin(DC_MOTOR_PORT,DC_MOTOR_PIN1,LOW);
     d92:	40 e0       	ldi	r20, 0x00	; 0
     d94:	67 e0       	ldi	r22, 0x07	; 7
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
     d9c:	08 95       	ret

00000d9e <DIO_vidSetPinMode>:
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	01 f1       	breq	.+64     	; 0xde2 <DIO_vidSetPinMode+0x44>
     da2:	30 f0       	brcs	.+12     	; 0xdb0 <DIO_vidSetPinMode+0x12>
     da4:	82 30       	cpi	r24, 0x02	; 2
     da6:	b1 f1       	breq	.+108    	; 0xe14 <DIO_vidSetPinMode+0x76>
     da8:	83 30       	cpi	r24, 0x03	; 3
     daa:	09 f4       	brne	.+2      	; 0xdae <DIO_vidSetPinMode+0x10>
     dac:	4c c0       	rjmp	.+152    	; 0xe46 <DIO_vidSetPinMode+0xa8>
     dae:	08 95       	ret
     db0:	41 30       	cpi	r20, 0x01	; 1
     db2:	59 f4       	brne	.+22     	; 0xdca <DIO_vidSetPinMode+0x2c>
     db4:	2a b3       	in	r18, 0x1a	; 26
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_vidSetPinMode+0x22>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	6a 95       	dec	r22
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_vidSetPinMode+0x1e>
     dc4:	82 2b       	or	r24, r18
     dc6:	8a bb       	out	0x1a, r24	; 26
     dc8:	08 95       	ret
     dca:	2a b3       	in	r18, 0x1a	; 26
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_vidSetPinMode+0x38>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	6a 95       	dec	r22
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <DIO_vidSetPinMode+0x34>
     dda:	80 95       	com	r24
     ddc:	82 23       	and	r24, r18
     dde:	8a bb       	out	0x1a, r24	; 26
     de0:	08 95       	ret
     de2:	41 30       	cpi	r20, 0x01	; 1
     de4:	59 f4       	brne	.+22     	; 0xdfc <DIO_vidSetPinMode+0x5e>
     de6:	27 b3       	in	r18, 0x17	; 23
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <DIO_vidSetPinMode+0x54>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	6a 95       	dec	r22
     df4:	e2 f7       	brpl	.-8      	; 0xdee <DIO_vidSetPinMode+0x50>
     df6:	82 2b       	or	r24, r18
     df8:	87 bb       	out	0x17, r24	; 23
     dfa:	08 95       	ret
     dfc:	27 b3       	in	r18, 0x17	; 23
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_vidSetPinMode+0x6a>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	6a 95       	dec	r22
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_vidSetPinMode+0x66>
     e0c:	80 95       	com	r24
     e0e:	82 23       	and	r24, r18
     e10:	87 bb       	out	0x17, r24	; 23
     e12:	08 95       	ret
     e14:	41 30       	cpi	r20, 0x01	; 1
     e16:	59 f4       	brne	.+22     	; 0xe2e <DIO_vidSetPinMode+0x90>
     e18:	24 b3       	in	r18, 0x14	; 20
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_vidSetPinMode+0x86>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	6a 95       	dec	r22
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_vidSetPinMode+0x82>
     e28:	82 2b       	or	r24, r18
     e2a:	84 bb       	out	0x14, r24	; 20
     e2c:	08 95       	ret
     e2e:	24 b3       	in	r18, 0x14	; 20
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_vidSetPinMode+0x9c>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	6a 95       	dec	r22
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_vidSetPinMode+0x98>
     e3e:	80 95       	com	r24
     e40:	82 23       	and	r24, r18
     e42:	84 bb       	out	0x14, r24	; 20
     e44:	08 95       	ret
     e46:	41 30       	cpi	r20, 0x01	; 1
     e48:	59 f4       	brne	.+22     	; 0xe60 <DIO_vidSetPinMode+0xc2>
     e4a:	21 b3       	in	r18, 0x11	; 17
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_vidSetPinMode+0xb8>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	6a 95       	dec	r22
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_vidSetPinMode+0xb4>
     e5a:	82 2b       	or	r24, r18
     e5c:	81 bb       	out	0x11, r24	; 17
     e5e:	08 95       	ret
     e60:	21 b3       	in	r18, 0x11	; 17
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_vidSetPinMode+0xce>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	6a 95       	dec	r22
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_vidSetPinMode+0xca>
     e70:	80 95       	com	r24
     e72:	82 23       	and	r24, r18
     e74:	81 bb       	out	0x11, r24	; 17
     e76:	08 95       	ret

00000e78 <DIO_vidWritePin>:
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	01 f1       	breq	.+64     	; 0xebc <DIO_vidWritePin+0x44>
     e7c:	30 f0       	brcs	.+12     	; 0xe8a <DIO_vidWritePin+0x12>
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	b1 f1       	breq	.+108    	; 0xeee <DIO_vidWritePin+0x76>
     e82:	83 30       	cpi	r24, 0x03	; 3
     e84:	09 f4       	brne	.+2      	; 0xe88 <DIO_vidWritePin+0x10>
     e86:	4c c0       	rjmp	.+152    	; 0xf20 <DIO_vidWritePin+0xa8>
     e88:	08 95       	ret
     e8a:	41 30       	cpi	r20, 0x01	; 1
     e8c:	59 f4       	brne	.+22     	; 0xea4 <DIO_vidWritePin+0x2c>
     e8e:	2b b3       	in	r18, 0x1b	; 27
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_vidWritePin+0x22>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	6a 95       	dec	r22
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_vidWritePin+0x1e>
     e9e:	82 2b       	or	r24, r18
     ea0:	8b bb       	out	0x1b, r24	; 27
     ea2:	08 95       	ret
     ea4:	2b b3       	in	r18, 0x1b	; 27
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_vidWritePin+0x38>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	6a 95       	dec	r22
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_vidWritePin+0x34>
     eb4:	80 95       	com	r24
     eb6:	82 23       	and	r24, r18
     eb8:	8b bb       	out	0x1b, r24	; 27
     eba:	08 95       	ret
     ebc:	41 30       	cpi	r20, 0x01	; 1
     ebe:	59 f4       	brne	.+22     	; 0xed6 <DIO_vidWritePin+0x5e>
     ec0:	28 b3       	in	r18, 0x18	; 24
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_vidWritePin+0x54>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	6a 95       	dec	r22
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_vidWritePin+0x50>
     ed0:	82 2b       	or	r24, r18
     ed2:	88 bb       	out	0x18, r24	; 24
     ed4:	08 95       	ret
     ed6:	28 b3       	in	r18, 0x18	; 24
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_vidWritePin+0x6a>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	6a 95       	dec	r22
     ee4:	e2 f7       	brpl	.-8      	; 0xede <DIO_vidWritePin+0x66>
     ee6:	80 95       	com	r24
     ee8:	82 23       	and	r24, r18
     eea:	88 bb       	out	0x18, r24	; 24
     eec:	08 95       	ret
     eee:	41 30       	cpi	r20, 0x01	; 1
     ef0:	59 f4       	brne	.+22     	; 0xf08 <DIO_vidWritePin+0x90>
     ef2:	25 b3       	in	r18, 0x15	; 21
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_vidWritePin+0x86>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	6a 95       	dec	r22
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_vidWritePin+0x82>
     f02:	82 2b       	or	r24, r18
     f04:	85 bb       	out	0x15, r24	; 21
     f06:	08 95       	ret
     f08:	25 b3       	in	r18, 0x15	; 21
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_vidWritePin+0x9c>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	6a 95       	dec	r22
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_vidWritePin+0x98>
     f18:	80 95       	com	r24
     f1a:	82 23       	and	r24, r18
     f1c:	85 bb       	out	0x15, r24	; 21
     f1e:	08 95       	ret
     f20:	41 30       	cpi	r20, 0x01	; 1
     f22:	59 f4       	brne	.+22     	; 0xf3a <DIO_vidWritePin+0xc2>
     f24:	22 b3       	in	r18, 0x12	; 18
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_vidWritePin+0xb8>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	6a 95       	dec	r22
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_vidWritePin+0xb4>
     f34:	82 2b       	or	r24, r18
     f36:	82 bb       	out	0x12, r24	; 18
     f38:	08 95       	ret
     f3a:	22 b3       	in	r18, 0x12	; 18
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_vidWritePin+0xce>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	6a 95       	dec	r22
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_vidWritePin+0xca>
     f4a:	80 95       	com	r24
     f4c:	82 23       	and	r24, r18
     f4e:	82 bb       	out	0x12, r24	; 18
     f50:	08 95       	ret

00000f52 <DIO_enuReadPin>:
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	e1 f0       	breq	.+56     	; 0xf8e <DIO_enuReadPin+0x3c>
     f56:	30 f0       	brcs	.+12     	; 0xf64 <DIO_enuReadPin+0x12>
     f58:	82 30       	cpi	r24, 0x02	; 2
     f5a:	71 f1       	breq	.+92     	; 0xfb8 <DIO_enuReadPin+0x66>
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	09 f4       	brne	.+2      	; 0xf62 <DIO_enuReadPin+0x10>
     f60:	40 c0       	rjmp	.+128    	; 0xfe2 <DIO_enuReadPin+0x90>
     f62:	53 c0       	rjmp	.+166    	; 0x100a <DIO_enuReadPin+0xb8>
     f64:	49 b3       	in	r20, 0x19	; 25
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9c 01       	movw	r18, r24
     f6c:	06 2e       	mov	r0, r22
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_enuReadPin+0x22>
     f70:	22 0f       	add	r18, r18
     f72:	33 1f       	adc	r19, r19
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_enuReadPin+0x1e>
     f78:	84 2f       	mov	r24, r20
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	82 23       	and	r24, r18
     f7e:	93 23       	and	r25, r19
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_enuReadPin+0x34>
     f82:	95 95       	asr	r25
     f84:	87 95       	ror	r24
     f86:	6a 95       	dec	r22
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_enuReadPin+0x30>
     f8a:	98 2f       	mov	r25, r24
     f8c:	3e c0       	rjmp	.+124    	; 0x100a <DIO_enuReadPin+0xb8>
     f8e:	46 b3       	in	r20, 0x16	; 22
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9c 01       	movw	r18, r24
     f96:	06 2e       	mov	r0, r22
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_enuReadPin+0x4c>
     f9a:	22 0f       	add	r18, r18
     f9c:	33 1f       	adc	r19, r19
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_enuReadPin+0x48>
     fa2:	84 2f       	mov	r24, r20
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	82 23       	and	r24, r18
     fa8:	93 23       	and	r25, r19
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_enuReadPin+0x5e>
     fac:	95 95       	asr	r25
     fae:	87 95       	ror	r24
     fb0:	6a 95       	dec	r22
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_enuReadPin+0x5a>
     fb4:	98 2f       	mov	r25, r24
     fb6:	29 c0       	rjmp	.+82     	; 0x100a <DIO_enuReadPin+0xb8>
     fb8:	43 b3       	in	r20, 0x13	; 19
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	9c 01       	movw	r18, r24
     fc0:	06 2e       	mov	r0, r22
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_enuReadPin+0x76>
     fc4:	22 0f       	add	r18, r18
     fc6:	33 1f       	adc	r19, r19
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_enuReadPin+0x72>
     fcc:	84 2f       	mov	r24, r20
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	82 23       	and	r24, r18
     fd2:	93 23       	and	r25, r19
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_enuReadPin+0x88>
     fd6:	95 95       	asr	r25
     fd8:	87 95       	ror	r24
     fda:	6a 95       	dec	r22
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_enuReadPin+0x84>
     fde:	98 2f       	mov	r25, r24
     fe0:	14 c0       	rjmp	.+40     	; 0x100a <DIO_enuReadPin+0xb8>
     fe2:	40 b3       	in	r20, 0x10	; 16
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9c 01       	movw	r18, r24
     fea:	06 2e       	mov	r0, r22
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_enuReadPin+0xa0>
     fee:	22 0f       	add	r18, r18
     ff0:	33 1f       	adc	r19, r19
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_enuReadPin+0x9c>
     ff6:	84 2f       	mov	r24, r20
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	82 23       	and	r24, r18
     ffc:	93 23       	and	r25, r19
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <DIO_enuReadPin+0xb2>
    1000:	95 95       	asr	r25
    1002:	87 95       	ror	r24
    1004:	6a 95       	dec	r22
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <DIO_enuReadPin+0xae>
    1008:	98 2f       	mov	r25, r24
    100a:	89 2f       	mov	r24, r25
    100c:	08 95       	ret

0000100e <DIO_vidSetLowNibbleMode>:
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	18 2f       	mov	r17, r24
    1016:	d6 2f       	mov	r29, r22
    1018:	c0 e0       	ldi	r28, 0x00	; 0
    101a:	06 c0       	rjmp	.+12     	; 0x1028 <DIO_vidSetLowNibbleMode+0x1a>
    101c:	4d 2f       	mov	r20, r29
    101e:	6c 2f       	mov	r22, r28
    1020:	81 2f       	mov	r24, r17
    1022:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
    1026:	cf 5f       	subi	r28, 0xFF	; 255
    1028:	c4 30       	cpi	r28, 0x04	; 4
    102a:	c0 f3       	brcs	.-16     	; 0x101c <DIO_vidSetLowNibbleMode+0xe>
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	08 95       	ret

00001034 <DIO_vidWriteLowNibble>:
    1034:	6f 70       	andi	r22, 0x0F	; 15
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	69 f0       	breq	.+26     	; 0x1054 <DIO_vidWriteLowNibble+0x20>
    103a:	28 f0       	brcs	.+10     	; 0x1046 <DIO_vidWriteLowNibble+0x12>
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	89 f0       	breq	.+34     	; 0x1062 <DIO_vidWriteLowNibble+0x2e>
    1040:	83 30       	cpi	r24, 0x03	; 3
    1042:	b1 f0       	breq	.+44     	; 0x1070 <DIO_vidWriteLowNibble+0x3c>
    1044:	08 95       	ret
    1046:	8b b3       	in	r24, 0x1b	; 27
    1048:	80 7f       	andi	r24, 0xF0	; 240
    104a:	8b bb       	out	0x1b, r24	; 27
    104c:	8b b3       	in	r24, 0x1b	; 27
    104e:	68 2b       	or	r22, r24
    1050:	6b bb       	out	0x1b, r22	; 27
    1052:	08 95       	ret
    1054:	88 b3       	in	r24, 0x18	; 24
    1056:	80 7f       	andi	r24, 0xF0	; 240
    1058:	88 bb       	out	0x18, r24	; 24
    105a:	88 b3       	in	r24, 0x18	; 24
    105c:	68 2b       	or	r22, r24
    105e:	68 bb       	out	0x18, r22	; 24
    1060:	08 95       	ret
    1062:	85 b3       	in	r24, 0x15	; 21
    1064:	80 7f       	andi	r24, 0xF0	; 240
    1066:	85 bb       	out	0x15, r24	; 21
    1068:	85 b3       	in	r24, 0x15	; 21
    106a:	68 2b       	or	r22, r24
    106c:	65 bb       	out	0x15, r22	; 21
    106e:	08 95       	ret
    1070:	82 b3       	in	r24, 0x12	; 18
    1072:	80 7f       	andi	r24, 0xF0	; 240
    1074:	82 bb       	out	0x12, r24	; 18
    1076:	82 b3       	in	r24, 0x12	; 18
    1078:	68 2b       	or	r22, r24
    107a:	62 bb       	out	0x12, r22	; 18
    107c:	08 95       	ret

0000107e <DIO_vidSetHighNibbleMode>:
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	18 2f       	mov	r17, r24
    1086:	d6 2f       	mov	r29, r22
    1088:	c4 e0       	ldi	r28, 0x04	; 4
    108a:	06 c0       	rjmp	.+12     	; 0x1098 <DIO_vidSetHighNibbleMode+0x1a>
    108c:	4d 2f       	mov	r20, r29
    108e:	6c 2f       	mov	r22, r28
    1090:	81 2f       	mov	r24, r17
    1092:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
    1096:	cf 5f       	subi	r28, 0xFF	; 255
    1098:	c8 30       	cpi	r28, 0x08	; 8
    109a:	c0 f3       	brcs	.-16     	; 0x108c <DIO_vidSetHighNibbleMode+0xe>
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	08 95       	ret

000010a4 <DIO_vidWriteHighNibble>:
    10a4:	60 7f       	andi	r22, 0xF0	; 240
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	69 f0       	breq	.+26     	; 0x10c4 <DIO_vidWriteHighNibble+0x20>
    10aa:	28 f0       	brcs	.+10     	; 0x10b6 <DIO_vidWriteHighNibble+0x12>
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	89 f0       	breq	.+34     	; 0x10d2 <DIO_vidWriteHighNibble+0x2e>
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	b1 f0       	breq	.+44     	; 0x10e0 <DIO_vidWriteHighNibble+0x3c>
    10b4:	08 95       	ret
    10b6:	8b b3       	in	r24, 0x1b	; 27
    10b8:	8f 70       	andi	r24, 0x0F	; 15
    10ba:	8b bb       	out	0x1b, r24	; 27
    10bc:	8b b3       	in	r24, 0x1b	; 27
    10be:	68 2b       	or	r22, r24
    10c0:	6b bb       	out	0x1b, r22	; 27
    10c2:	08 95       	ret
    10c4:	88 b3       	in	r24, 0x18	; 24
    10c6:	8f 70       	andi	r24, 0x0F	; 15
    10c8:	88 bb       	out	0x18, r24	; 24
    10ca:	88 b3       	in	r24, 0x18	; 24
    10cc:	68 2b       	or	r22, r24
    10ce:	68 bb       	out	0x18, r22	; 24
    10d0:	08 95       	ret
    10d2:	85 b3       	in	r24, 0x15	; 21
    10d4:	8f 70       	andi	r24, 0x0F	; 15
    10d6:	85 bb       	out	0x15, r24	; 21
    10d8:	85 b3       	in	r24, 0x15	; 21
    10da:	68 2b       	or	r22, r24
    10dc:	65 bb       	out	0x15, r22	; 21
    10de:	08 95       	ret
    10e0:	82 b3       	in	r24, 0x12	; 18
    10e2:	8f 70       	andi	r24, 0x0F	; 15
    10e4:	82 bb       	out	0x12, r24	; 18
    10e6:	82 b3       	in	r24, 0x12	; 18
    10e8:	68 2b       	or	r22, r24
    10ea:	62 bb       	out	0x12, r22	; 18
    10ec:	08 95       	ret

000010ee <EEPROM_vidWrite>:
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void EEPROM_vidWrite(u16 u16Address, u8 u8Data)
{
    EEARL = (u8) u16Address;
    10ee:	8e bb       	out	0x1e, r24	; 30
    EEARH = (u8)(u16Address >>8);
    10f0:	9f bb       	out	0x1f, r25	; 31
    EEDR = u8Data;
    10f2:	6d bb       	out	0x1d, r22	; 29
    EECR = 0x04; // Set EEMWE by 1
    10f4:	84 e0       	ldi	r24, 0x04	; 4
    10f6:	8c bb       	out	0x1c, r24	; 28
    EECR |= 0x02; // Set EEWE by 1
    10f8:	8c b3       	in	r24, 0x1c	; 28
    10fa:	82 60       	ori	r24, 0x02	; 2
    10fc:	8c bb       	out	0x1c, r24	; 28
    while(GET_BIT(EECR, EEWE) == 1);
    10fe:	e1 99       	sbic	0x1c, 1	; 28
    1100:	fe cf       	rjmp	.-4      	; 0x10fe <EEPROM_vidWrite+0x10>
}
    1102:	08 95       	ret

00001104 <EEPROM_u8Read>:

u8 EEPROM_u8Read(u16 u16Address)
{
    EEARL = (u8) u16Address;
    1104:	8e bb       	out	0x1e, r24	; 30
    EEARH = (u8)(u16Address >>8); 
    1106:	9f bb       	out	0x1f, r25	; 31
    SET_BIT(EECR, EERE);
    1108:	8c b3       	in	r24, 0x1c	; 28
    110a:	81 60       	ori	r24, 0x01	; 1
    110c:	8c bb       	out	0x1c, r24	; 28
    return EEDR;
    110e:	8d b3       	in	r24, 0x1d	; 29
    1110:	08 95       	ret

00001112 <KPD_vidInit>:
#include "KPD_config.h"
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void KPD_vidInit(_enuGPIOx enuPortNum, _enuNIBBLEx enuInputNibble)
{
    1112:	cf 93       	push	r28
    1114:	c8 2f       	mov	r28, r24
    if(enuInputNibble == LOW_NIBBLE)
    1116:	61 11       	cpse	r22, r1
    1118:	0b c0       	rjmp	.+22     	; 0x1130 <KPD_vidInit+0x1e>
    {
        DIO_vidSetLowNibbleMode(enuPortNum, INPUT); // Set Column Input
    111a:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_vidSetLowNibbleMode>
        DIO_vidSetHighNibbleMode(enuPortNum, OUTPUT); // Set ROW as Output
    111e:	61 e0       	ldi	r22, 0x01	; 1
    1120:	8c 2f       	mov	r24, r28
    1122:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_vidSetHighNibbleMode>
        DIO_vidWriteLowNibble(enuPortNum, 0x0F); // Enable Internal Pull Up
    1126:	6f e0       	ldi	r22, 0x0F	; 15
    1128:	8c 2f       	mov	r24, r28
    112a:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_vidWriteLowNibble>
    112e:	0b c0       	rjmp	.+22     	; 0x1146 <KPD_vidInit+0x34>
    }
    else
    {
        DIO_vidSetHighNibbleMode(enuPortNum, INPUT); // Set Column Input
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_vidSetHighNibbleMode>
        DIO_vidSetLowNibbleMode(enuPortNum, OUTPUT); // Set ROW as Output
    1136:	61 e0       	ldi	r22, 0x01	; 1
    1138:	8c 2f       	mov	r24, r28
    113a:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_vidSetLowNibbleMode>
        DIO_vidWriteHighNibble(enuPortNum, 0xF0); // Enable Internal Pull Up
    113e:	60 ef       	ldi	r22, 0xF0	; 240
    1140:	8c 2f       	mov	r24, r28
    1142:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_vidWriteHighNibble>
    }
}
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

0000114a <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(_enuGPIOx enuPortNum, _enuNIBBLEx enuInputNibble)
{
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	60 97       	sbiw	r28, 0x10	; 16
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	f8 2e       	mov	r15, r24
    u8 KeysArr[4][4]={{'7','8','9','A'},{'4','5','6','B'},{'1','2','3','C'},{'E','0','M','D'}};
    1168:	80 e1       	ldi	r24, 0x10	; 16
    116a:	e0 e6       	ldi	r30, 0x60	; 96
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	de 01       	movw	r26, r28
    1170:	11 96       	adiw	r26, 0x01	; 1
    1172:	01 90       	ld	r0, Z+
    1174:	0d 92       	st	X+, r0
    1176:	8a 95       	dec	r24
    1178:	e1 f7       	brne	.-8      	; 0x1172 <KPD_u8GetPressedKey+0x28>
    u8 u8Rows;
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
    if(enuInputNibble == LOW_NIBBLE)
    117a:	66 23       	and	r22, r22
    117c:	61 f1       	breq	.+88     	; 0x11d6 <KPD_u8GetPressedKey+0x8c>
    117e:	e1 2c       	mov	r14, r1
    1180:	59 c0       	rjmp	.+178    	; 0x1234 <KPD_u8GetPressedKey+0xea>
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteHighNibble(enuPortNum, 0xF0);
    1182:	60 ef       	ldi	r22, 0xF0	; 240
    1184:	8f 2d       	mov	r24, r15
    1186:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_vidWriteHighNibble>
            DIO_vidWritePin(enuPortNum, (u8Rows+4), LOW);
    118a:	40 e0       	ldi	r20, 0x00	; 0
    118c:	64 e0       	ldi	r22, 0x04	; 4
    118e:	6e 0d       	add	r22, r14
    1190:	8f 2d       	mov	r24, r15
    1192:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
            for(u8Column = 0; u8Column <= 3; u8Column++)
    1196:	00 e0       	ldi	r16, 0x00	; 0
    1198:	08 c0       	rjmp	.+16     	; 0x11aa <KPD_u8GetPressedKey+0x60>
            {
                enuReadValue = DIO_enuReadPin(enuPortNum, u8Column);
    119a:	60 2f       	mov	r22, r16
    119c:	8f 2d       	mov	r24, r15
    119e:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_enuReadPin>
    11a2:	18 2f       	mov	r17, r24
                if(LOW == enuReadValue)
    11a4:	88 23       	and	r24, r24
    11a6:	19 f0       	breq	.+6      	; 0x11ae <KPD_u8GetPressedKey+0x64>
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteHighNibble(enuPortNum, 0xF0);
            DIO_vidWritePin(enuPortNum, (u8Rows+4), LOW);
            for(u8Column = 0; u8Column <= 3; u8Column++)
    11a8:	0f 5f       	subi	r16, 0xFF	; 255
    11aa:	04 30       	cpi	r16, 0x04	; 4
    11ac:	b0 f3       	brcs	.-20     	; 0x119a <KPD_u8GetPressedKey+0x50>
                }
                else
                {
                }
            }
            if (LOW == enuReadValue)
    11ae:	11 11       	cpse	r17, r1
    11b0:	10 c0       	rjmp	.+32     	; 0x11d2 <KPD_u8GetPressedKey+0x88>
            {
                u8ReturnedValue = KeysArr[u8Rows][u8Column];
    11b2:	ee 2d       	mov	r30, r14
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	ee 0f       	add	r30, r30
    11b8:	ff 1f       	adc	r31, r31
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	8c 0f       	add	r24, r28
    11c4:	9d 1f       	adc	r25, r29
    11c6:	e8 0f       	add	r30, r24
    11c8:	f9 1f       	adc	r31, r25
    11ca:	e0 0f       	add	r30, r16
    11cc:	f1 1d       	adc	r31, r1
    11ce:	80 81       	ld	r24, Z
                break;
    11d0:	35 c0       	rjmp	.+106    	; 0x123c <KPD_u8GetPressedKey+0xf2>
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
    if(enuInputNibble == LOW_NIBBLE)
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
    11d2:	e3 94       	inc	r14
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <KPD_u8GetPressedKey+0x8e>
    11d6:	e1 2c       	mov	r14, r1
    11d8:	93 e0       	ldi	r25, 0x03	; 3
    11da:	9e 15       	cp	r25, r14
    11dc:	90 f6       	brcc	.-92     	; 0x1182 <KPD_u8GetPressedKey+0x38>
{
    u8 KeysArr[4][4]={{'7','8','9','A'},{'4','5','6','B'},{'1','2','3','C'},{'E','0','M','D'}};
    u8 u8Rows;
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	2d c0       	rjmp	.+90     	; 0x123c <KPD_u8GetPressedKey+0xf2>
    }
    else
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteLowNibble(enuPortNum, 0x0F);
    11e2:	6f e0       	ldi	r22, 0x0F	; 15
    11e4:	8f 2d       	mov	r24, r15
    11e6:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_vidWriteLowNibble>
            DIO_vidWritePin(enuPortNum, (u8Rows), LOW);
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	6e 2d       	mov	r22, r14
    11ee:	8f 2d       	mov	r24, r15
    11f0:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
            for(u8Column = 0; u8Column <= 3; u8Column++)
    11f4:	00 e0       	ldi	r16, 0x00	; 0
    11f6:	09 c0       	rjmp	.+18     	; 0x120a <KPD_u8GetPressedKey+0xc0>
            {
                enuReadValue = DIO_enuReadPin(enuPortNum, (u8Column+4));
    11f8:	64 e0       	ldi	r22, 0x04	; 4
    11fa:	60 0f       	add	r22, r16
    11fc:	8f 2d       	mov	r24, r15
    11fe:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_enuReadPin>
    1202:	18 2f       	mov	r17, r24
                if(LOW == enuReadValue)
    1204:	88 23       	and	r24, r24
    1206:	19 f0       	breq	.+6      	; 0x120e <KPD_u8GetPressedKey+0xc4>
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
        {
            DIO_vidWriteLowNibble(enuPortNum, 0x0F);
            DIO_vidWritePin(enuPortNum, (u8Rows), LOW);
            for(u8Column = 0; u8Column <= 3; u8Column++)
    1208:	0f 5f       	subi	r16, 0xFF	; 255
    120a:	04 30       	cpi	r16, 0x04	; 4
    120c:	a8 f3       	brcs	.-22     	; 0x11f8 <KPD_u8GetPressedKey+0xae>
                }
                else
                {
                }
            }
            if (LOW == enuReadValue)
    120e:	11 11       	cpse	r17, r1
    1210:	10 c0       	rjmp	.+32     	; 0x1232 <KPD_u8GetPressedKey+0xe8>
            {
                u8ReturnedValue = KeysArr[u8Rows][u8Column];
    1212:	ee 2d       	mov	r30, r14
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	ee 0f       	add	r30, r30
    121c:	ff 1f       	adc	r31, r31
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	8c 0f       	add	r24, r28
    1224:	9d 1f       	adc	r25, r29
    1226:	e8 0f       	add	r30, r24
    1228:	f9 1f       	adc	r31, r25
    122a:	e0 0f       	add	r30, r16
    122c:	f1 1d       	adc	r31, r1
    122e:	80 81       	ld	r24, Z
                break;
    1230:	05 c0       	rjmp	.+10     	; 0x123c <KPD_u8GetPressedKey+0xf2>
            }
        }
    }
    else
    {
        for(u8Rows = 0; u8Rows <= 3; u8Rows++)
    1232:	e3 94       	inc	r14
    1234:	93 e0       	ldi	r25, 0x03	; 3
    1236:	9e 15       	cp	r25, r14
    1238:	a0 f6       	brcc	.-88     	; 0x11e2 <KPD_u8GetPressedKey+0x98>
{
    u8 KeysArr[4][4]={{'7','8','9','A'},{'4','5','6','B'},{'1','2','3','C'},{'E','0','M','D'}};
    u8 u8Rows;
    u8 u8Column;
    _enuPINVALUE enuReadValue;
    u8 u8ReturnedValue = NOT_PRESSED;
    123a:	8f ef       	ldi	r24, 0xFF	; 255
            {
            }
        }
    }
    return u8ReturnedValue;
    123c:	60 96       	adiw	r28, 0x10	; 16
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	08 95       	ret

00001256 <LCD_vidSendEnablePulse>:
    #endif
}

static void LCD_vidSendEnablePulse(void)
{
    DIO_vidWritePin(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    1256:	41 e0       	ldi	r20, 0x01	; 1
    1258:	63 e0       	ldi	r22, 0x03	; 3
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
    1260:	83 ef       	ldi	r24, 0xF3	; 243
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	f1 f7       	brne	.-4      	; 0x1264 <LCD_vidSendEnablePulse+0xe>
    1268:	00 c0       	rjmp	.+0      	; 0x126a <LCD_vidSendEnablePulse+0x14>
    126a:	00 00       	nop
    _delay_ms(2);
    DIO_vidWritePin(LCD_EN_PORT, LCD_EN_PIN, LOW);
    126c:	40 e0       	ldi	r20, 0x00	; 0
    126e:	63 e0       	ldi	r22, 0x03	; 3
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
    1276:	08 95       	ret

00001278 <LCD_vidSendCmd>:
    _delay_ms(10);
    LCD_vidSendCmd(LCD_ENTRY_MODE);
}

static void LCD_vidSendCmd(u8 u8Cmd)
{
    1278:	cf 93       	push	r28
    127a:	c8 2f       	mov	r28, r24
    DIO_vidWritePin(LCD_RW_PORT, LCD_RW_PIN, LOW); // Set Write Operation
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
    DIO_vidWritePin(LCD_RS_PORT, LCD_RS_PIN, LOW); // Select Command Register
    1286:	40 e0       	ldi	r20, 0x00	; 0
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
            LCD_vidSendEnablePulse();
			_delay_ms(2);
            DIO_vidWriteLowNibble(LCD_DATA_PORT, (u8Cmd));
            LCD_vidSendEnablePulse();
        #else
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Cmd));
    1290:	6c 2f       	mov	r22, r28
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
    1298:	0e 94 2b 09 	call	0x1256	; 0x1256 <LCD_vidSendEnablePulse>
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Cmd<<4));
    129c:	6c 2f       	mov	r22, r28
    129e:	62 95       	swap	r22
    12a0:	60 7f       	andi	r22, 0xF0	; 240
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
    12a8:	0e 94 2b 09 	call	0x1256	; 0x1256 <LCD_vidSendEnablePulse>
        #endif
    #endif
}
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <LCD_vidInit>:
    12b0:	8f e4       	ldi	r24, 0x4F	; 79
    12b2:	93 ec       	ldi	r25, 0xC3	; 195
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <LCD_vidInit+0x4>
    12b8:	00 c0       	rjmp	.+0      	; 0x12ba <LCD_vidInit+0xa>
    12ba:	00 00       	nop
		/*                                                                      */
		/************************************************************************/
void LCD_vidInit(void)
{
    _delay_ms(200);
    DIO_vidSetPinMode(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    12bc:	41 e0       	ldi	r20, 0x01	; 1
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
    DIO_vidSetPinMode(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    12c6:	41 e0       	ldi	r20, 0x01	; 1
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
    DIO_vidSetPinMode(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	63 e0       	ldi	r22, 0x03	; 3
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
        _delay_ms(1);
    #else
        #if  NIBBLE_MODE  == LOW_NIBBLE
            DIO_vidSetLowNibbleMode(LCD_DATA_PORT, OUTPUT);
        #else
            DIO_vidSetHighNibbleMode(LCD_DATA_PORT, OUTPUT);
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_vidSetHighNibbleMode>
        #endif 
       LCD_vidSendCmd(LCD_RETURN_HOME);
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_vidSendCmd>
    12e8:	85 ea       	ldi	r24, 0xA5	; 165
    12ea:	9e e0       	ldi	r25, 0x0E	; 14
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <LCD_vidInit+0x3c>
    12f0:	00 c0       	rjmp	.+0      	; 0x12f2 <LCD_vidInit+0x42>
    12f2:	00 00       	nop
        _delay_ms(15);
		LCD_vidSendCmd(LCD_FUNCTION_4BIT_2LINES);
    12f4:	88 e2       	ldi	r24, 0x28	; 40
    12f6:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_vidSendCmd>
    12fa:	89 ef       	ldi	r24, 0xF9	; 249
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <LCD_vidInit+0x4e>
    1302:	00 c0       	rjmp	.+0      	; 0x1304 <LCD_vidInit+0x54>
    1304:	00 00       	nop
        _delay_ms(1);
        
    #endif
    LCD_vidSendCmd(LCD_DISP_ON_CURSOR_ON);
    1306:	8e e0       	ldi	r24, 0x0E	; 14
    1308:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_vidSendCmd>
    130c:	89 ef       	ldi	r24, 0xF9	; 249
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <LCD_vidInit+0x60>
    1314:	00 c0       	rjmp	.+0      	; 0x1316 <LCD_vidInit+0x66>
    1316:	00 00       	nop
    _delay_ms(1);
    LCD_vidSendCmd(LCD_CLEAR_SCREEN);
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_vidSendCmd>
    131e:	83 ec       	ldi	r24, 0xC3	; 195
    1320:	99 e0       	ldi	r25, 0x09	; 9
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <LCD_vidInit+0x72>
    1326:	00 c0       	rjmp	.+0      	; 0x1328 <LCD_vidInit+0x78>
    1328:	00 00       	nop
    _delay_ms(10);
    LCD_vidSendCmd(LCD_ENTRY_MODE);
    132a:	86 e0       	ldi	r24, 0x06	; 6
    132c:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_vidSendCmd>
    1330:	08 95       	ret

00001332 <LCD_vidDisplayCharacter>:
    _delay_ms(2);
    DIO_vidWritePin(LCD_EN_PORT, LCD_EN_PIN, LOW);
}

void LCD_vidDisplayCharacter(u8 u8Char)
{
    1332:	cf 93       	push	r28
    1334:	c8 2f       	mov	r28, r24
    DIO_vidWritePin(LCD_RW_PORT, LCD_RW_PIN, LOW); // Set Write Operation
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
    DIO_vidWritePin(LCD_RS_PORT, LCD_RS_PIN, HIGH); // Select Data Register
    1340:	41 e0       	ldi	r20, 0x01	; 1
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
            DIO_vidWriteLowNibble(LCD_DATA_PORT, (u8Char>>4));
            LCD_vidSendEnablePulse();
            DIO_vidWriteLowNibble(LCD_DATA_PORT, (u8Char));
            LCD_vidSendEnablePulse();
        #else
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Char));
    134a:	6c 2f       	mov	r22, r28
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
    1352:	0e 94 2b 09 	call	0x1256	; 0x1256 <LCD_vidSendEnablePulse>
            DIO_vidWriteHighNibble(LCD_DATA_PORT, (u8Char<<4));
    1356:	6c 2f       	mov	r22, r28
    1358:	62 95       	swap	r22
    135a:	60 7f       	andi	r22, 0xF0	; 240
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_vidWriteHighNibble>
            LCD_vidSendEnablePulse();
    1362:	0e 94 2b 09 	call	0x1256	; 0x1256 <LCD_vidSendEnablePulse>
        #endif
    #endif
}
    1366:	cf 91       	pop	r28
    1368:	08 95       	ret

0000136a <LCD_vidDisplayString>:

void LCD_vidDisplayString(u8 *u8PtrString)
{
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	ec 01       	movw	r28, r24
    while(*u8PtrString != '\0')
    1370:	03 c0       	rjmp	.+6      	; 0x1378 <LCD_vidDisplayString+0xe>
    {
        LCD_vidDisplayCharacter(*u8PtrString);
    1372:	0e 94 99 09 	call	0x1332	; 0x1332 <LCD_vidDisplayCharacter>
        u8PtrString++;
    1376:	21 96       	adiw	r28, 0x01	; 1
    #endif
}

void LCD_vidDisplayString(u8 *u8PtrString)
{
    while(*u8PtrString != '\0')
    1378:	88 81       	ld	r24, Y
    137a:	81 11       	cpse	r24, r1
    137c:	fa cf       	rjmp	.-12     	; 0x1372 <LCD_vidDisplayString+0x8>
    {
        LCD_vidDisplayCharacter(*u8PtrString);
        u8PtrString++;
    }
}
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	08 95       	ret

00001384 <LCD_vidDisplayNumber>:

void LCD_vidDisplayNumber(u32 u32Number)
{
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	27 97       	sbiw	r28, 0x07	; 7
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
	u8 u8arr[7];
	sprintf(u8arr, "%d", u32Number);
    139c:	9f 93       	push	r25
    139e:	8f 93       	push	r24
    13a0:	7f 93       	push	r23
    13a2:	6f 93       	push	r22
    13a4:	83 e1       	ldi	r24, 0x13	; 19
    13a6:	95 e0       	ldi	r25, 0x05	; 5
    13a8:	9f 93       	push	r25
    13aa:	8f 93       	push	r24
    13ac:	8e 01       	movw	r16, r28
    13ae:	0f 5f       	subi	r16, 0xFF	; 255
    13b0:	1f 4f       	sbci	r17, 0xFF	; 255
    13b2:	1f 93       	push	r17
    13b4:	0f 93       	push	r16
    13b6:	0e 94 ab 12 	call	0x2556	; 0x2556 <sprintf>
	LCD_vidDisplayString(u8arr);
    13ba:	c8 01       	movw	r24, r16
    13bc:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
}
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	27 96       	adiw	r28, 0x07	; 7
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	08 95       	ret

000013e0 <LCD_vidClearScreen>:

void LCD_vidClearScreen(void)
{
	LCD_vidSendCmd(LCD_CLEAR_SCREEN);
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_vidSendCmd>
    13e6:	83 ec       	ldi	r24, 0xC3	; 195
    13e8:	99 e0       	ldi	r25, 0x09	; 9
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <LCD_vidClearScreen+0xa>
    13ee:	00 c0       	rjmp	.+0      	; 0x13f0 <LCD_vidClearScreen+0x10>
    13f0:	00 00       	nop
    13f2:	08 95       	ret

000013f4 <LCD_vidMoveCursor>:
	_delay_ms(10);
}
void LCD_vidMoveCursor(u8 u8Line, u8 u8Position)
{
	u8 u8PositionCmd;
	if(u8Line == 1)
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	19 f4       	brne	.+6      	; 0x13fe <LCD_vidMoveCursor+0xa>
	{
		u8PositionCmd = 0x80 + (u8Position-1);
    13f8:	8f e7       	ldi	r24, 0x7F	; 127
    13fa:	86 0f       	add	r24, r22
    13fc:	0c c0       	rjmp	.+24     	; 0x1416 <LCD_vidMoveCursor+0x22>
	}
	else if(u8Line == 2)
    13fe:	82 30       	cpi	r24, 0x02	; 2
    1400:	19 f4       	brne	.+6      	; 0x1408 <LCD_vidMoveCursor+0x14>
	{
		u8PositionCmd = 0xC0 + (u8Position-1);	
    1402:	8f eb       	ldi	r24, 0xBF	; 191
    1404:	86 0f       	add	r24, r22
    1406:	07 c0       	rjmp	.+14     	; 0x1416 <LCD_vidMoveCursor+0x22>
	}
	else if(u8Line == 3)
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	19 f4       	brne	.+6      	; 0x1412 <LCD_vidMoveCursor+0x1e>
	{
		u8PositionCmd = 0x90 + (u8Position-1);	
    140c:	8f e8       	ldi	r24, 0x8F	; 143
    140e:	86 0f       	add	r24, r22
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <LCD_vidMoveCursor+0x22>
	}
	else 
	{
		u8PositionCmd = 0xD0 + (u8Position-1);
    1412:	8f ec       	ldi	r24, 0xCF	; 207
    1414:	86 0f       	add	r24, r22
	}
	LCD_vidSendCmd(u8PositionCmd);
    1416:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_vidSendCmd>
    141a:	08 95       	ret

0000141c <LED_vidInit>:
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void LED_vidInit(_enuGPIOx enuPortNum, _enuPINx enuPinNum)
{
    DIO_vidSetPinMode(enuPortNum, enuPinNum, OUTPUT);   
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
    1422:	08 95       	ret

00001424 <LED_vidTurnOn>:
}
void LED_vidTurnOn(_enuGPIOx enuPortNum, _enuPINx enuPinNum)
{
    DIO_vidWritePin(enuPortNum, enuPinNum, HIGH);
    1424:	41 e0       	ldi	r20, 0x01	; 1
    1426:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
    142a:	08 95       	ret

0000142c <LED_vidTurnOff>:
}
void LED_vidTurnOff(_enuGPIOx enuPortNum, _enuPINx enuPinNum)
{
    DIO_vidWritePin(enuPortNum, enuPinNum, LOW);
    142c:	40 e0       	ldi	r20, 0x00	; 0
    142e:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
    1432:	08 95       	ret

00001434 <LM35_vidInit>:
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void LM35_vidInit(_enuADCChannels enuADCChannel)
{
    ADC_vidInit(enuADCChannel);
    1434:	0e 94 92 00 	call	0x124	; 0x124 <ADC_vidInit>
    1438:	08 95       	ret

0000143a <LM35_u8Read>:
}
u8 LM35_u8Read(void)
{
    u8 u8Temperature;
    u16 u16Value;
    u16Value = ADC_u16Read();
    143a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <ADC_u16Read>
    u8Temperature = (u8)((float)u16Value * 0.25f);
    143e:	bc 01       	movw	r22, r24
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatunsisf>
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e8       	ldi	r20, 0x80	; 128
    144e:	5e e3       	ldi	r21, 0x3E	; 62
    1450:	0e 94 16 12 	call	0x242c	; 0x242c <__mulsf3>
    1454:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__fixunssfsi>
    1458:	86 2f       	mov	r24, r22
    return u8Temperature;
}
    145a:	08 95       	ret

0000145c <start_control>:
	}
}

void start_control()
{
	LCD_vidMoveCursor(1,1);					// move LCD cursor
    145c:	61 e0       	ldi	r22, 0x01	; 1
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString(" Welcome to ODC ");// display message on screen
    1464:	80 e2       	ldi	r24, 0x20	; 32
    1466:	95 e0       	ldi	r25, 0x05	; 5
    1468:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);					// move LCD cursor
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("   smart home ");	// display message on screen
    1474:	81 e3       	ldi	r24, 0x31	; 49
    1476:	95 e0       	ldi	r25, 0x05	; 5
    1478:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);					// move LCD cursor
    147c:	61 e0       	ldi	r22, 0x01	; 1
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("1.login remotely");// display message on screen
    1484:	80 e4       	ldi	r24, 0x40	; 64
    1486:	95 e0       	ldi	r25, 0x05	; 5
    1488:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);					// move LCD cursor
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	84 e0       	ldi	r24, 0x04	; 4
    1490:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("2.login by KPD");	// display message on screen
    1494:	81 e5       	ldi	r24, 0x51	; 81
    1496:	95 e0       	ldi	r25, 0x05	; 5
    1498:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	u8ReturnedValue = u8GetKeyPressed();	// take choice from user
    149c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <u8GetKeyPressed>
    14a0:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
	if (u8ReturnedValue=='1')				// if choice equal to 1
    14a4:	81 33       	cpi	r24, 0x31	; 49
    14a6:	49 f4       	brne	.+18     	; 0x14ba <start_control+0x5e>
	{   USART_vidSendByte('1');				// send data to slave
    14a8:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
		USART_vidEnableTXInterrupt();		// enable TX interrupt (finish transmit)
    14ac:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
		LCD_vidClearScreen();				// clear LCD screen
    14b0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		Bluetooth_Control();				// control system remotely 
    14b4:	0e 94 26 05 	call	0xa4c	; 0xa4c <Bluetooth_Control>
    14b8:	08 95       	ret
	}
	else if(u8ReturnedValue=='2')			// if choice equal to 2
    14ba:	82 33       	cpi	r24, 0x32	; 50
    14bc:	31 f4       	brne	.+12     	; 0x14ca <start_control+0x6e>
	{
		USART_vidSendByte('2');				// send data to slave
    14be:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
		USART_vidEnableTXInterrupt();		// enable TX interrupt (finish transmit)
    14c2:	0e 94 d7 10 	call	0x21ae	; 0x21ae <USART_vidEnableTXInterrupt>
		start();							// start the system
    14c6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <start>
    14ca:	08 95       	ret

000014cc <main>:
		/************************************************************************/
		/*                       main function                                  */
		/************************************************************************/
int main(void)
{
	LM35_vidInit(ADC_CH0);					// initialize LM35 (temp sensor)
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 1a 0a 	call	0x1434	; 0x1434 <LM35_vidInit>
	USART_vidInit(9600);					// initialize UART protocol with baud rate 9600
    14d4:	60 e8       	ldi	r22, 0x80	; 128
    14d6:	75 e2       	ldi	r23, 0x25	; 37
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 8f 10 	call	0x211e	; 0x211e <USART_vidInit>
	LCD_vidInit();							// initialize LCD
    14e0:	0e 94 58 09 	call	0x12b0	; 0x12b0 <LCD_vidInit>
	KPD_vidInit(GPIOC, HIGH_NIBBLE);		// initialize KPD 
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	0e 94 89 08 	call	0x1112	; 0x1112 <KPD_vidInit>
	Servo_Init();							// initialize servo motor
    14ec:	0e 94 a6 0a 	call	0x154c	; 0x154c <Servo_Init>
	LED_vidInit(GPIOD, PIN3);				// initialize LED at port D pin 3       
    14f0:	63 e0       	ldi	r22, 0x03	; 3
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 0e 0a 	call	0x141c	; 0x141c <LED_vidInit>
	LED_vidInit(GPIOD, PIN4);				// initialize LED at port D pin 4
    14fc:	64 e0       	ldi	r22, 0x04	; 4
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 0e 0a 	call	0x141c	; 0x141c <LED_vidInit>
	LED_vidInit(GPIOB, PIN5);				// initialize LED at port B pin 5
    1508:	65 e0       	ldi	r22, 0x05	; 5
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 0e 0a 	call	0x141c	; 0x141c <LED_vidInit>
	LED_vidInit(GPIOD, PIN2);				// initialize LED at port D pin 2	
    1514:	62 e0       	ldi	r22, 0x02	; 2
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	83 e0       	ldi	r24, 0x03	; 3
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 0e 0a 	call	0x141c	; 0x141c <LED_vidInit>
	LED_vidInit(GPIOD, PIN6);				// initialize LED at port D pin 6
    1520:	66 e0       	ldi	r22, 0x06	; 6
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	83 e0       	ldi	r24, 0x03	; 3
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 0e 0a 	call	0x141c	; 0x141c <LED_vidInit>
	DIO_vidSetPinMode(GPIOD, PIN7, OUTPUT);	// initialize pin 7 at port D as output
    152c:	41 e0       	ldi	r20, 0x01	; 1
    152e:	67 e0       	ldi	r22, 0x07	; 7
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_vidSetPinMode>
	LCD_vidClearScreen();					// clear LCD screen 
	Bluetooth_Control();					// control system remotely
	start();								// start the system
	*/while (1)								// while loop still work if system used
    {
		start_control();					// start the system
    1536:	0e 94 2e 0a 	call	0x145c	; 0x145c <start_control>
		u8 wrong_pass_count = smart_lock();	// if pass wrong and exceed tries safe go on lock mode
    153a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <smart_lock>
		if (wrong_pass_count == 0 || wrong_pass_count == 3)	// if wrong_pass_count equal to (0 when pass correct) or (3 when user exceed number of tries)
    153e:	88 23       	and	r24, r24
    1540:	11 f0       	breq	.+4      	; 0x1546 <main+0x7a>
    1542:	83 30       	cpi	r24, 0x03	; 3
    1544:	c1 f7       	brne	.-16     	; 0x1536 <main+0x6a>
		{
			break;							// stop the loop
		}	
	}
}
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	08 95       	ret

0000154c <Servo_Init>:
		/************************************************************************/
		/*                                                                      */
		/************************************************************************/
void Servo_Init(void)
{
	DDRD |= (1<<PD5);								/* Initialise OC1A pin as output */
    154c:	81 b3       	in	r24, 0x11	; 17
    154e:	80 62       	ori	r24, 0x20	; 32
    1550:	81 bb       	out	0x11, r24	; 17
	TCNT1 = 0;										/* Set timer1 count zero */
    1552:	1d bc       	out	0x2d, r1	; 45
    1554:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;									/* Set TOP count for timer1 in ICR1 register */
    1556:	83 ec       	ldi	r24, 0xC3	; 195
    1558:	99 e0       	ldi	r25, 0x09	; 9
    155a:	97 bd       	out	0x27, r25	; 39
    155c:	86 bd       	out	0x26, r24	; 38
	TCCR1A = (1<<WGM11)|(1<<COM1A1);				/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, prescaler=64, timer=125kHz */
    155e:	82 e8       	ldi	r24, 0x82	; 130
    1560:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
    1562:	8b e1       	ldi	r24, 0x1B	; 27
    1564:	8e bd       	out	0x2e, r24	; 46
    1566:	08 95       	ret

00001568 <Servo_Clockwise>:
}
void Servo_Clockwise(u8 angle)
{
	if(angle>Max_Angle)
    1568:	8b 35       	cpi	r24, 0x5B	; 91
    156a:	b0 f4       	brcc	.+44     	; 0x1598 <Servo_Clockwise+0x30>
	{
		angle=Max_Angle;
	}
	else
	{
		OCR1A = (1.2912*angle)+Position_OCR1A;  //Servo rotates in clockwise direction, min angle=0 max angle=90
    156c:	68 2f       	mov	r22, r24
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 8a 11 	call	0x2314	; 0x2314 <__floatsisf>
    1578:	2b e0       	ldi	r18, 0x0B	; 11
    157a:	36 e4       	ldi	r19, 0x46	; 70
    157c:	45 ea       	ldi	r20, 0xA5	; 165
    157e:	5f e3       	ldi	r21, 0x3F	; 63
    1580:	0e 94 16 12 	call	0x242c	; 0x242c <__mulsf3>
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	46 e3       	ldi	r20, 0x36	; 54
    158a:	53 e4       	ldi	r21, 0x43	; 67
    158c:	0e 94 ed 10 	call	0x21da	; 0x21da <__addsf3>
    1590:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__fixunssfsi>
    1594:	7b bd       	out	0x2b, r23	; 43
    1596:	6a bd       	out	0x2a, r22	; 42
    1598:	08 95       	ret

0000159a <Servo_Counterclockwise>:

}

void Servo_Counterclockwise(u8 angle)
{
	if(angle>Max_Angle)
    159a:	8b 35       	cpi	r24, 0x5B	; 91
    159c:	b0 f4       	brcc	.+44     	; 0x15ca <Servo_Counterclockwise+0x30>
	{
		angle=Max_Angle;
	}
	else
	{
		OCR1A = (-1.2912*angle)+Position_OCR1A;  //Servo rotates in counterclockwise direction, min angle=-90 max angle=0
    159e:	68 2f       	mov	r22, r24
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 8a 11 	call	0x2314	; 0x2314 <__floatsisf>
    15aa:	2b e0       	ldi	r18, 0x0B	; 11
    15ac:	36 e4       	ldi	r19, 0x46	; 70
    15ae:	45 ea       	ldi	r20, 0xA5	; 165
    15b0:	5f eb       	ldi	r21, 0xBF	; 191
    15b2:	0e 94 16 12 	call	0x242c	; 0x242c <__mulsf3>
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	46 e3       	ldi	r20, 0x36	; 54
    15bc:	53 e4       	ldi	r21, 0x43	; 67
    15be:	0e 94 ed 10 	call	0x21da	; 0x21da <__addsf3>
    15c2:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__fixunssfsi>
    15c6:	7b bd       	out	0x2b, r23	; 43
    15c8:	6a bd       	out	0x2a, r22	; 42
    15ca:	08 95       	ret

000015cc <Scan_pass>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								scan pass from user								*/
		/************************************************************************/
void Scan_pass()
{
    15cc:	cf 93       	push	r28
	for (u8 i=0;i<4;i++)		// loop to take pass from user 
    15ce:	c0 e0       	ldi	r28, 0x00	; 0
    15d0:	2e c0       	rjmp	.+92     	; 0x162e <Scan_pass+0x62>
	{
		do						// loop to take value of pressed key working until key pressed
		{
			u8ReturnedValue = KPD_u8GetPressedKey(GPIOC, HIGH_NIBBLE);	// store value of pressed key in u8ReturnedValue
    15d2:	61 e0       	ldi	r22, 0x01	; 1
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	0e 94 a5 08 	call	0x114a	; 0x114a <KPD_u8GetPressedKey>
    15da:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
    15de:	2f ef       	ldi	r18, 0xFF	; 255
    15e0:	81 ee       	ldi	r24, 0xE1	; 225
    15e2:	94 e0       	ldi	r25, 0x04	; 4
    15e4:	21 50       	subi	r18, 0x01	; 1
    15e6:	80 40       	sbci	r24, 0x00	; 0
    15e8:	90 40       	sbci	r25, 0x00	; 0
    15ea:	e1 f7       	brne	.-8      	; 0x15e4 <Scan_pass+0x18>
    15ec:	00 c0       	rjmp	.+0      	; 0x15ee <Scan_pass+0x22>
    15ee:	00 00       	nop
			_delay_ms(200);								// delay 200m second to can detect change
		} while (u8ReturnedValue == NOT_PRESSED);		// condition to break the loop
    15f0:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
    15f4:	8f 3f       	cpi	r24, 0xFF	; 255
    15f6:	69 f3       	breq	.-38     	; 0x15d2 <Scan_pass+0x6>
			LCD_vidDisplayCharacter(u8ReturnedValue);	// display pressed value on LCD
    15f8:	0e 94 99 09 	call	0x1332	; 0x1332 <LCD_vidDisplayCharacter>
    15fc:	2f e7       	ldi	r18, 0x7F	; 127
    15fe:	89 ea       	ldi	r24, 0xA9	; 169
    1600:	93 e0       	ldi	r25, 0x03	; 3
    1602:	21 50       	subi	r18, 0x01	; 1
    1604:	80 40       	sbci	r24, 0x00	; 0
    1606:	90 40       	sbci	r25, 0x00	; 0
    1608:	e1 f7       	brne	.-8      	; 0x1602 <Scan_pass+0x36>
    160a:	00 c0       	rjmp	.+0      	; 0x160c <Scan_pass+0x40>
    160c:	00 00       	nop
			_delay_ms(150);								// delay 250m second for user see what number enter 
			LCD_vidMoveCursor(4, i+3);					// move LCD cursor to position of value entered 
    160e:	63 e0       	ldi	r22, 0x03	; 3
    1610:	6c 0f       	add	r22, r28
    1612:	84 e0       	ldi	r24, 0x04	; 4
    1614:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
			LCD_vidDisplayCharacter('*');				// display symbol * instead of entered number 
    1618:	8a e2       	ldi	r24, 0x2A	; 42
    161a:	0e 94 99 09 	call	0x1332	; 0x1332 <LCD_vidDisplayCharacter>
			pass[i] = u8ReturnedValue;					// store value in array called pass
    161e:	ec 2f       	mov	r30, r28
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	e0 55       	subi	r30, 0x50	; 80
    1624:	f8 4f       	sbci	r31, 0xF8	; 248
    1626:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
    162a:	80 83       	st	Z, r24
		/*Function Description: void function take void and return void
								scan pass from user								*/
		/************************************************************************/
void Scan_pass()
{
	for (u8 i=0;i<4;i++)		// loop to take pass from user 
    162c:	cf 5f       	subi	r28, 0xFF	; 255
    162e:	c4 30       	cpi	r28, 0x04	; 4
    1630:	80 f2       	brcs	.-96     	; 0x15d2 <Scan_pass+0x6>
			_delay_ms(150);								// delay 250m second for user see what number enter 
			LCD_vidMoveCursor(4, i+3);					// move LCD cursor to position of value entered 
			LCD_vidDisplayCharacter('*');				// display symbol * instead of entered number 
			pass[i] = u8ReturnedValue;					// store value in array called pass
	}
}
    1632:	cf 91       	pop	r28
    1634:	08 95       	ret

00001636 <Scan_user>:
		/*Function Input: no input (void)										*/
		/*Function Description: void function take void and return void
								scan user from user								*/
		/************************************************************************/
void Scan_user()
	{
    1636:	cf 93       	push	r28
		for (u8 i=0;i<4;i++)							// loop to take pass from user
    1638:	c0 e0       	ldi	r28, 0x00	; 0
    163a:	26 c0       	rjmp	.+76     	; 0x1688 <Scan_user+0x52>
		{
			do											// loop to take value of pressed key working until key pressed
			{
				u8ReturnedValue = KPD_u8GetPressedKey(GPIOC, HIGH_NIBBLE);// store value of pressed key in u8ReturnedValue
    163c:	61 e0       	ldi	r22, 0x01	; 1
    163e:	82 e0       	ldi	r24, 0x02	; 2
    1640:	0e 94 a5 08 	call	0x114a	; 0x114a <KPD_u8GetPressedKey>
    1644:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
    1648:	2f ef       	ldi	r18, 0xFF	; 255
    164a:	81 ee       	ldi	r24, 0xE1	; 225
    164c:	94 e0       	ldi	r25, 0x04	; 4
    164e:	21 50       	subi	r18, 0x01	; 1
    1650:	80 40       	sbci	r24, 0x00	; 0
    1652:	90 40       	sbci	r25, 0x00	; 0
    1654:	e1 f7       	brne	.-8      	; 0x164e <Scan_user+0x18>
    1656:	00 c0       	rjmp	.+0      	; 0x1658 <Scan_user+0x22>
    1658:	00 00       	nop
				_delay_ms(200);							// delay 200m second to can detect change
			} while (u8ReturnedValue == NOT_PRESSED);	// condition to break the loop
    165a:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
    165e:	8f 3f       	cpi	r24, 0xFF	; 255
    1660:	69 f3       	breq	.-38     	; 0x163c <Scan_user+0x6>
			LCD_vidDisplayCharacter(u8ReturnedValue);	// display pressed value on LCD
    1662:	0e 94 99 09 	call	0x1332	; 0x1332 <LCD_vidDisplayCharacter>
    1666:	2f e7       	ldi	r18, 0x7F	; 127
    1668:	89 ea       	ldi	r24, 0xA9	; 169
    166a:	93 e0       	ldi	r25, 0x03	; 3
    166c:	21 50       	subi	r18, 0x01	; 1
    166e:	80 40       	sbci	r24, 0x00	; 0
    1670:	90 40       	sbci	r25, 0x00	; 0
    1672:	e1 f7       	brne	.-8      	; 0x166c <Scan_user+0x36>
    1674:	00 c0       	rjmp	.+0      	; 0x1676 <Scan_user+0x40>
    1676:	00 00       	nop
			_delay_ms(150);								// delay 250m second for user see what number enter
			user[i] = u8ReturnedValue;					// store value in array called pass
    1678:	ec 2f       	mov	r30, r28
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	e8 54       	subi	r30, 0x48	; 72
    167e:	f8 4f       	sbci	r31, 0xF8	; 248
    1680:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
    1684:	80 83       	st	Z, r24
		/*Function Description: void function take void and return void
								scan user from user								*/
		/************************************************************************/
void Scan_user()
	{
		for (u8 i=0;i<4;i++)							// loop to take pass from user
    1686:	cf 5f       	subi	r28, 0xFF	; 255
    1688:	c4 30       	cpi	r28, 0x04	; 4
    168a:	c0 f2       	brcs	.-80     	; 0x163c <Scan_user+0x6>
			} while (u8ReturnedValue == NOT_PRESSED);	// condition to break the loop
			LCD_vidDisplayCharacter(u8ReturnedValue);	// display pressed value on LCD
			_delay_ms(150);								// delay 250m second for user see what number enter
			user[i] = u8ReturnedValue;					// store value in array called pass
		}
}
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <write_EEPROM>:
		/*Function Input: take one value (from type u8)							*/
		/*Function Description: void function take void and return void                                                 
								write pass in EEPROM							*/
		/************************************************************************/
void write_EEPROM(u8 u8UserId)
{
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	18 2f       	mov	r17, r24
	u8 User_Address = USER_address + (u8UserId * 0x8);	// calculate the address of user for store his username
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0c 96       	adiw	r24, 0x0c	; 12
    169c:	d8 2f       	mov	r29, r24
    169e:	dd 0f       	add	r29, r29
    16a0:	dd 0f       	add	r29, r29
    16a2:	dd 0f       	add	r29, r29
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM
    16a4:	c0 e0       	ldi	r28, 0x00	; 0
    16a6:	10 c0       	rjmp	.+32     	; 0x16c8 <write_EEPROM+0x38>
	{
		user[i]^=KEY;									// encrypt user entered before store in EEPROM by(XOR pass with KEY)
    16a8:	2c 2f       	mov	r18, r28
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	f9 01       	movw	r30, r18
    16ae:	e8 54       	subi	r30, 0x48	; 72
    16b0:	f8 4f       	sbci	r31, 0xF8	; 248
    16b2:	60 81       	ld	r22, Z
    16b4:	9b ea       	ldi	r25, 0xAB	; 171
    16b6:	69 27       	eor	r22, r25
    16b8:	60 83       	st	Z, r22
		EEPROM_vidWrite(User_Address + i, user[i]);		// save username in EEPROM
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	c9 01       	movw	r24, r18
    16be:	8d 0f       	add	r24, r29
    16c0:	91 1d       	adc	r25, r1
    16c2:	0e 94 77 08 	call	0x10ee	; 0x10ee <EEPROM_vidWrite>
								write pass in EEPROM							*/
		/************************************************************************/
void write_EEPROM(u8 u8UserId)
{
	u8 User_Address = USER_address + (u8UserId * 0x8);	// calculate the address of user for store his username
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM
    16c6:	cf 5f       	subi	r28, 0xFF	; 255
    16c8:	c4 30       	cpi	r28, 0x04	; 4
    16ca:	70 f3       	brcs	.-36     	; 0x16a8 <write_EEPROM+0x18>
	{
		user[i]^=KEY;									// encrypt user entered before store in EEPROM by(XOR pass with KEY)
		EEPROM_vidWrite(User_Address + i, user[i]);		// save username in EEPROM
	}
	u8 Pass_Address = PASS_address +(u8UserId * 0x4);	// calculate the address of user for store his pass
    16cc:	d1 2f       	mov	r29, r17
    16ce:	dd 0f       	add	r29, r29
    16d0:	dd 0f       	add	r29, r29
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM 
    16d2:	c0 e0       	ldi	r28, 0x00	; 0
    16d4:	10 c0       	rjmp	.+32     	; 0x16f6 <write_EEPROM+0x66>
	{
		pass[i]^=KEY;									// encrypt pass entered before store in EEPROM by(XOR pass with KEY) 
    16d6:	2c 2f       	mov	r18, r28
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	f9 01       	movw	r30, r18
    16dc:	e0 55       	subi	r30, 0x50	; 80
    16de:	f8 4f       	sbci	r31, 0xF8	; 248
    16e0:	60 81       	ld	r22, Z
    16e2:	9b ea       	ldi	r25, 0xAB	; 171
    16e4:	69 27       	eor	r22, r25
    16e6:	60 83       	st	Z, r22
		EEPROM_vidWrite(Pass_Address + i, pass[i]);		// save pass in EEPROM
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	c9 01       	movw	r24, r18
    16ec:	8d 0f       	add	r24, r29
    16ee:	91 1d       	adc	r25, r1
    16f0:	0e 94 77 08 	call	0x10ee	; 0x10ee <EEPROM_vidWrite>
	{
		user[i]^=KEY;									// encrypt user entered before store in EEPROM by(XOR pass with KEY)
		EEPROM_vidWrite(User_Address + i, user[i]);		// save username in EEPROM
	}
	u8 Pass_Address = PASS_address +(u8UserId * 0x4);	// calculate the address of user for store his pass
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM 
    16f4:	cf 5f       	subi	r28, 0xFF	; 255
    16f6:	c4 30       	cpi	r28, 0x04	; 4
    16f8:	70 f3       	brcs	.-36     	; 0x16d6 <write_EEPROM+0x46>
	{
		pass[i]^=KEY;									// encrypt pass entered before store in EEPROM by(XOR pass with KEY) 
		EEPROM_vidWrite(Pass_Address + i, pass[i]);		// save pass in EEPROM
	}
}
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	08 95       	ret

00001702 <read_EEPROM>:
		/*Function Input: take one value (from type u8)							*/
		/*Function Description: void function take void and return void                                                 
								read pass from EEPROM							*/
		/************************************************************************/
void read_EEPROM(u8 u8UserId)
{
    1702:	ff 92       	push	r15
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	f8 2e       	mov	r15, r24
	u8 User_Address = USER_address + (u8UserId * 0x8 );	// calculate the address of user for store his username
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0c 96       	adiw	r24, 0x0c	; 12
    1712:	08 2f       	mov	r16, r24
    1714:	00 0f       	add	r16, r16
    1716:	00 0f       	add	r16, r16
    1718:	00 0f       	add	r16, r16
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM
    171a:	10 e0       	ldi	r17, 0x00	; 0
    171c:	0d c0       	rjmp	.+26     	; 0x1738 <read_EEPROM+0x36>
	{
		EEPROM_user[i] = EEPROM_u8Read(User_Address + i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array
    171e:	c1 2f       	mov	r28, r17
    1720:	d0 e0       	ldi	r29, 0x00	; 0
    1722:	ce 01       	movw	r24, r28
    1724:	80 0f       	add	r24, r16
    1726:	91 1d       	adc	r25, r1
    1728:	0e 94 82 08 	call	0x1104	; 0x1104 <EEPROM_u8Read>
    172c:	cc 54       	subi	r28, 0x4C	; 76
    172e:	d8 4f       	sbci	r29, 0xF8	; 248
    1730:	9b ea       	ldi	r25, 0xAB	; 171
    1732:	89 27       	eor	r24, r25
    1734:	88 83       	st	Y, r24
								read pass from EEPROM							*/
		/************************************************************************/
void read_EEPROM(u8 u8UserId)
{
	u8 User_Address = USER_address + (u8UserId * 0x8 );	// calculate the address of user for store his username
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM
    1736:	1f 5f       	subi	r17, 0xFF	; 255
    1738:	14 30       	cpi	r17, 0x04	; 4
    173a:	88 f3       	brcs	.-30     	; 0x171e <read_EEPROM+0x1c>
	{
		EEPROM_user[i] = EEPROM_u8Read(User_Address + i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array
	}
	u8 Pass_Address = PASS_address + (u8UserId * 0x4 );	// calculate the address of user for store his pass
    173c:	0f 2d       	mov	r16, r15
    173e:	00 0f       	add	r16, r16
    1740:	00 0f       	add	r16, r16
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM 
    1742:	10 e0       	ldi	r17, 0x00	; 0
    1744:	0d c0       	rjmp	.+26     	; 0x1760 <read_EEPROM+0x5e>
	{
		EEPROM_pass[i] = EEPROM_u8Read(Pass_Address+ i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array 
    1746:	c1 2f       	mov	r28, r17
    1748:	d0 e0       	ldi	r29, 0x00	; 0
    174a:	ce 01       	movw	r24, r28
    174c:	80 0f       	add	r24, r16
    174e:	91 1d       	adc	r25, r1
    1750:	0e 94 82 08 	call	0x1104	; 0x1104 <EEPROM_u8Read>
    1754:	cf 53       	subi	r28, 0x3F	; 63
    1756:	d8 4f       	sbci	r29, 0xF8	; 248
    1758:	9b ea       	ldi	r25, 0xAB	; 171
    175a:	89 27       	eor	r24, r25
    175c:	88 83       	st	Y, r24
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM
	{
		EEPROM_user[i] = EEPROM_u8Read(User_Address + i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array
	}
	u8 Pass_Address = PASS_address + (u8UserId * 0x4 );	// calculate the address of user for store his pass
	for (u8 i=0;i<4;i++)								// loop to take write pass in EEPROM 
    175e:	1f 5f       	subi	r17, 0xFF	; 255
    1760:	14 30       	cpi	r17, 0x04	; 4
    1762:	88 f3       	brcs	.-30     	; 0x1746 <read_EEPROM+0x44>
	{
		EEPROM_pass[i] = EEPROM_u8Read(Pass_Address+ i)^KEY;// read pass stored in EEPROM and decrypting it by (XOR with KEY) then store in array 
	}
}
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	ff 90       	pop	r15
    176e:	08 95       	ret

00001770 <start>:
		/*Function Description: void function take void and return void
		                        set pass if not set or read pass if already set	*/
		/************************************************************************/
void start()
{
	pass_check = EEPROM_u8Read(PASS_address_check);		// check if pass set or not by reading value in PASS_address_check
    1770:	80 e5       	ldi	r24, 0x50	; 80
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 82 08 	call	0x1104	; 0x1104 <EEPROM_u8Read>
    1778:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <pass_check>
	if (pass_check != 0)								// check if value of pass_check equal to 0 or not 
    177c:	88 23       	and	r24, r24
    177e:	09 f4       	brne	.+2      	; 0x1782 <start+0x12>
    1780:	6e c0       	rjmp	.+220    	; 0x185e <start+0xee>
	{
		LCD_vidDisplayString("Set Admin name:");		// display message on LCD
    1782:	80 e6       	ldi	r24, 0x60	; 96
    1784:	95 e0       	ldi	r25, 0x05	; 5
    1786:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,1);							// move cursor of LCD to second line
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	82 e0       	ldi	r24, 0x02	; 2
    178e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">>");						// display message on LCD
    1792:	80 e7       	ldi	r24, 0x70	; 112
    1794:	95 e0       	ldi	r25, 0x05	; 5
    1796:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		Scan_user();									// call function that take username from user
    179a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <Scan_user>
		LCD_vidMoveCursor(3,1);							// move cursor of LCD third line
    179e:	61 e0       	ldi	r22, 0x01	; 1
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString("please,set pass:");		// display message on LCD
    17a6:	83 e7       	ldi	r24, 0x73	; 115
    17a8:	95 e0       	ldi	r25, 0x05	; 5
    17aa:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		LCD_vidMoveCursor(4,1);							// move LCD cursor to fourth line
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	84 e0       	ldi	r24, 0x04	; 4
    17b2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">>");						// display message on LCD screen
    17b6:	80 e7       	ldi	r24, 0x70	; 112
    17b8:	95 e0       	ldi	r25, 0x05	; 5
    17ba:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		Scan_pass();									// call function that take pass from user
    17be:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <Scan_pass>
		write_EEPROM( 0x0);								// call function that write username and pass in EEPROM
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	0e 94 48 0b 	call	0x1690	; 0x1690 <write_EEPROM>
		LCD_vidClearScreen();							// clear LCD screen 
    17c8:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		LCD_vidDisplayString("Admin set ");				// display message on LCD screen
    17cc:	84 e8       	ldi	r24, 0x84	; 132
    17ce:	95 e0       	ldi	r25, 0x05	; 5
    17d0:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,1);							// move cursor of LCD to second line
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	82 e0       	ldi	r24, 0x02	; 2
    17d8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString("Successfully");			// display message on LCD screen
    17dc:	88 eb       	ldi	r24, 0xB8	; 184
    17de:	95 e0       	ldi	r25, 0x05	; 5
    17e0:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
    17e4:	2f ef       	ldi	r18, 0xFF	; 255
    17e6:	81 ee       	ldi	r24, 0xE1	; 225
    17e8:	94 e0       	ldi	r25, 0x04	; 4
    17ea:	21 50       	subi	r18, 0x01	; 1
    17ec:	80 40       	sbci	r24, 0x00	; 0
    17ee:	90 40       	sbci	r25, 0x00	; 0
    17f0:	e1 f7       	brne	.-8      	; 0x17ea <start+0x7a>
    17f2:	00 c0       	rjmp	.+0      	; 0x17f4 <start+0x84>
    17f4:	00 00       	nop
		_delay_ms(200);									// wait for 200 m second
		EEPROM_vidWrite(PASS_address_check, 0);			// change value in PASS_address_check to zero (as pass is set)
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	80 e5       	ldi	r24, 0x50	; 80
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 77 08 	call	0x10ee	; 0x10ee <EEPROM_vidWrite>
		pass_check = EEPROM_u8Read(PASS_address_check);	// check if pass is set or not by reading value in PASS_address_check 
    1802:	80 e5       	ldi	r24, 0x50	; 80
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 82 08 	call	0x1104	; 0x1104 <EEPROM_u8Read>
    180a:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <pass_check>
		LCD_vidClearScreen();							// clear LCD screen
    180e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		LCD_vidDisplayString("1.Admin Login ");			// display message on LCD screen
    1812:	8f e8       	ldi	r24, 0x8F	; 143
    1814:	95 e0       	ldi	r25, 0x05	; 5
    1816:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,1);							// move cursor of LCD to second line
    181a:	61 e0       	ldi	r22, 0x01	; 1
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString("2.User Login");			// display message on LCD screen
    1822:	8e e9       	ldi	r24, 0x9E	; 158
    1824:	95 e0       	ldi	r25, 0x05	; 5
    1826:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		LCD_vidMoveCursor(3,1);							// move cursor of LCD to third line
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	83 e0       	ldi	r24, 0x03	; 3
    182e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">>");						// display message on LCD screen
    1832:	80 e7       	ldi	r24, 0x70	; 112
    1834:	95 e0       	ldi	r25, 0x05	; 5
    1836:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		choice = u8GetKeyPressed();						// take choice from user
    183a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <u8GetKeyPressed>
    183e:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <choice>
    1842:	2f e7       	ldi	r18, 0x7F	; 127
    1844:	89 ea       	ldi	r24, 0xA9	; 169
    1846:	93 e0       	ldi	r25, 0x03	; 3
    1848:	21 50       	subi	r18, 0x01	; 1
    184a:	80 40       	sbci	r24, 0x00	; 0
    184c:	90 40       	sbci	r25, 0x00	; 0
    184e:	e1 f7       	brne	.-8      	; 0x1848 <start+0xd8>
    1850:	00 c0       	rjmp	.+0      	; 0x1852 <start+0xe2>
    1852:	00 00       	nop
		_delay_ms(150);									// wait for 150 m second
		logInFlag=choice;								// store choice in login flag variable
    1854:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <choice>
    1858:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <logInFlag>
    185c:	08 95       	ret
	}
	else												// if not
	{  
		LCD_vidClearScreen();							// clear LCD screen
    185e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		LCD_vidDisplayString("1.Admin Login ");			// display message on LCD screen
    1862:	8f e8       	ldi	r24, 0x8F	; 143
    1864:	95 e0       	ldi	r25, 0x05	; 5
    1866:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		LCD_vidMoveCursor(2,1);							// move cursor of LCD to second line
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	82 e0       	ldi	r24, 0x02	; 2
    186e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString("2.User Login");			// display message on LCD screen
    1872:	8e e9       	ldi	r24, 0x9E	; 158
    1874:	95 e0       	ldi	r25, 0x05	; 5
    1876:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		LCD_vidMoveCursor(3,1);							// move cursor of LCD to third line
    187a:	61 e0       	ldi	r22, 0x01	; 1
    187c:	83 e0       	ldi	r24, 0x03	; 3
    187e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">>");						// display message on LCD screen
    1882:	80 e7       	ldi	r24, 0x70	; 112
    1884:	95 e0       	ldi	r25, 0x05	; 5
    1886:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		choice = u8GetKeyPressed();						// take choice from user
    188a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <u8GetKeyPressed>
    188e:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <choice>
    1892:	2f e7       	ldi	r18, 0x7F	; 127
    1894:	89 ea       	ldi	r24, 0xA9	; 169
    1896:	93 e0       	ldi	r25, 0x03	; 3
    1898:	21 50       	subi	r18, 0x01	; 1
    189a:	80 40       	sbci	r24, 0x00	; 0
    189c:	90 40       	sbci	r25, 0x00	; 0
    189e:	e1 f7       	brne	.-8      	; 0x1898 <start+0x128>
    18a0:	00 c0       	rjmp	.+0      	; 0x18a2 <start+0x132>
    18a2:	00 00       	nop
		_delay_ms(150);									// wait for 150 m second
		logInFlag=choice;								// store choice in login flag variable
    18a4:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <choice>
    18a8:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <logInFlag>
    18ac:	08 95       	ret

000018ae <Isadmin>:
		/*Function Description: u8 function take void and return u8                                                
								check who login user or admin & return only 0 or 1*/
		/************************************************************************/
u8 Isadmin()
{
	if (logInFlag==0)									// if login flag = 0
    18ae:	80 91 c7 07 	lds	r24, 0x07C7	; 0x8007c7 <logInFlag>
    18b2:	81 11       	cpse	r24, r1
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <Isadmin+0xc>
	{
		return 1;										// return 1
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	08 95       	ret
	}
	else												// if not 
	{
		return 0;										// return 0
    18ba:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    18bc:	08 95       	ret

000018be <LogOut>:
		/*Function Description: void function take void and return void                                                
								logout from the system and return to start screen*/
		/************************************************************************/
void LogOut()
{	
	LCD_vidClearScreen();								// clear LCD screen
    18be:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line 
    18c2:	61 e0       	ldi	r22, 0x01	; 1
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString(" Loged Out ");				// display message on LCD
    18ca:	8b ea       	ldi	r24, 0xAB	; 171
    18cc:	95 e0       	ldi	r25, 0x05	; 5
    18ce:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	83 e0       	ldi	r24, 0x03	; 3
    18d6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString(" Successfully");				// display message on LCD
    18da:	87 eb       	ldi	r24, 0xB7	; 183
    18dc:	95 e0       	ldi	r25, 0x05	; 5
    18de:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
    18e2:	2f ef       	ldi	r18, 0xFF	; 255
    18e4:	84 e3       	ldi	r24, 0x34	; 52
    18e6:	9c e0       	ldi	r25, 0x0C	; 12
    18e8:	21 50       	subi	r18, 0x01	; 1
    18ea:	80 40       	sbci	r24, 0x00	; 0
    18ec:	90 40       	sbci	r25, 0x00	; 0
    18ee:	e1 f7       	brne	.-8      	; 0x18e8 <LogOut+0x2a>
    18f0:	00 c0       	rjmp	.+0      	; 0x18f2 <LogOut+0x34>
    18f2:	00 00       	nop
	_delay_ms(500);										// wait for 500 m second
	LCD_vidClearScreen();								// clear LCD screen
    18f4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
	LCD_vidDisplayString("1.Admin Login");				// display message on LCD
    18f8:	85 ec       	ldi	r24, 0xC5	; 197
    18fa:	95 e0       	ldi	r25, 0x05	; 5
    18fc:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("2.User Login");				// display message on LCD
    1908:	8e e9       	ldi	r24, 0x9E	; 158
    190a:	95 e0       	ldi	r25, 0x05	; 5
    190c:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	83 e0       	ldi	r24, 0x03	; 3
    1914:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">>");							// display message on LCD 
    1918:	80 e7       	ldi	r24, 0x70	; 112
    191a:	95 e0       	ldi	r25, 0x05	; 5
    191c:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	u8ReturnedValue = u8GetKeyPressed();				// take choice from user
    1920:	0e 94 cd 05 	call	0xb9a	; 0xb9a <u8GetKeyPressed>
    1924:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
    1928:	2f e7       	ldi	r18, 0x7F	; 127
    192a:	89 ea       	ldi	r24, 0xA9	; 169
    192c:	93 e0       	ldi	r25, 0x03	; 3
    192e:	21 50       	subi	r18, 0x01	; 1
    1930:	80 40       	sbci	r24, 0x00	; 0
    1932:	90 40       	sbci	r25, 0x00	; 0
    1934:	e1 f7       	brne	.-8      	; 0x192e <LogOut+0x70>
    1936:	00 c0       	rjmp	.+0      	; 0x1938 <LogOut+0x7a>
    1938:	00 00       	nop
	_delay_ms(150);										// wait for 150 m second
	if(u8ReturnedValue=='1')							// if choice equal 1
    193a:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
    193e:	81 33       	cpi	r24, 0x31	; 49
    1940:	19 f4       	brne	.+6      	; 0x1948 <LogOut+0x8a>
	{
		check_admin_pass();								// call function that check username & pass for admin
    1942:	0e 94 ed 0c 	call	0x19da	; 0x19da <check_admin_pass>
    1946:	08 95       	ret
	}
	else if(u8ReturnedValue=='2')						// if choice equal 2
    1948:	82 33       	cpi	r24, 0x32	; 50
    194a:	19 f4       	brne	.+6      	; 0x1952 <LogOut+0x94>
	{
		check_user_pass();								// call function that check username & pass for user
    194c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <check_user_pass>
    1950:	08 95       	ret
	}
	else												// if not	
	{
		LCD_vidClearScreen();							// clear LCD screen
    1952:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		LCD_vidDisplayString("Wrong Choice");			// display message on LCD
    1956:	85 ea       	ldi	r24, 0xA5	; 165
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
    195e:	08 95       	ret

00001960 <admin_menue>:
		/*Function Description: void function take void and return void                                                
								display admin control menu						*/
		/************************************************************************/
void admin_menue()
{
	LCD_vidClearScreen();								// clear LCD screen
    1960:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
	LCD_vidDisplayString("1.Control Home");				// display message on LCD
    1964:	83 ed       	ldi	r24, 0xD3	; 211
    1966:	95 e0       	ldi	r25, 0x05	; 5
    1968:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("2.Add user");					// display message on LCD
    1974:	82 ee       	ldi	r24, 0xE2	; 226
    1976:	95 e0       	ldi	r25, 0x05	; 5
    1978:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    197c:	61 e0       	ldi	r22, 0x01	; 1
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("3.LOG Out");					// display message on LCD
    1984:	8d ee       	ldi	r24, 0xED	; 237
    1986:	95 e0       	ldi	r25, 0x05	; 5
    1988:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	choice = u8GetKeyPressed();							// take choice from user
    198c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <u8GetKeyPressed>
    1990:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <choice>
    1994:	2f e7       	ldi	r18, 0x7F	; 127
    1996:	8a e1       	ldi	r24, 0x1A	; 26
    1998:	96 e0       	ldi	r25, 0x06	; 6
    199a:	21 50       	subi	r18, 0x01	; 1
    199c:	80 40       	sbci	r24, 0x00	; 0
    199e:	90 40       	sbci	r25, 0x00	; 0
    19a0:	e1 f7       	brne	.-8      	; 0x199a <admin_menue+0x3a>
    19a2:	00 c0       	rjmp	.+0      	; 0x19a4 <admin_menue+0x44>
    19a4:	00 00       	nop
	_delay_ms(250);										// wait for 250 m second
	switch(choice)										// switch for choice
    19a6:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <choice>
    19aa:	82 33       	cpi	r24, 0x32	; 50
    19ac:	39 f0       	breq	.+14     	; 0x19bc <admin_menue+0x5c>
    19ae:	83 33       	cpi	r24, 0x33	; 51
    19b0:	41 f0       	breq	.+16     	; 0x19c2 <admin_menue+0x62>
    19b2:	81 33       	cpi	r24, 0x31	; 49
    19b4:	49 f4       	brne	.+18     	; 0x19c8 <admin_menue+0x68>
	{
		case '1' :										// if choice equal 1
			Home_control_Menue();						// call function that display admin control menu
    19b6:	0e 94 0b 01 	call	0x216	; 0x216 <Home_control_Menue>
		break;											// break
    19ba:	08 95       	ret
		case '2' :										// if choice equal 2
			add_user();									// call function that add new user
    19bc:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <add_user>
		break;											// break
    19c0:	08 95       	ret
		case '3':										// if choice equal 3
			LogOut();									// call function that logout from the system
    19c2:	0e 94 5f 0c 	call	0x18be	; 0x18be <LogOut>
		break;											// break
    19c6:	08 95       	ret
		default:										// default case
			LCD_vidClearScreen();						// clear LCD screen
    19c8:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
			LCD_vidDisplayString("Wrong Choice");		// display message on LCD
    19cc:	85 ea       	ldi	r24, 0xA5	; 165
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			admin_menue();								// call function that display admin menu		
    19d4:	0e 94 b0 0c 	call	0x1960	; 0x1960 <admin_menue>
    19d8:	08 95       	ret

000019da <check_admin_pass>:
		/*Function Description: void function take void and return void                                                
								check pass is true or not						*/
		/************************************************************************/
void check_admin_pass()
{    
	       read_EEPROM(0x0);							// call function that read EEPROM 
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	0e 94 81 0b 	call	0x1702	; 0x1702 <read_EEPROM>
			LCD_vidClearScreen();						// move LCD cursor to first line
    19e0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
			LCD_vidDisplayString("Enter Username:");	// display message on LCD			
    19e4:	87 ef       	ldi	r24, 0xF7	; 247
    19e6:	95 e0       	ldi	r25, 0x05	; 5
    19e8:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			LCD_vidMoveCursor(2, 1);					// move LCD cursor to next line
    19ec:	61 e0       	ldi	r22, 0x01	; 1
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
			LCD_vidDisplayString(">>");					// display message on LCD
    19f4:	80 e7       	ldi	r24, 0x70	; 112
    19f6:	95 e0       	ldi	r25, 0x05	; 5
    19f8:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			Scan_user();								// take pass from user
    19fc:	0e 94 1b 0b 	call	0x1636	; 0x1636 <Scan_user>
			check_user=0;								// initialize check variable to 0
    1a00:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <check_user>
			for (u8 i=0;i<4;i++)						// loop to check if pass entered is correct or not (same saved in EEPROM)
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	12 c0       	rjmp	.+36     	; 0x1a2c <check_admin_pass+0x52>
			{
				if (user[i] == EEPROM_user[i])			// check if two value are equal or not
    1a08:	82 2f       	mov	r24, r18
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	e8 54       	subi	r30, 0x48	; 72
    1a10:	f8 4f       	sbci	r31, 0xF8	; 248
    1a12:	30 81       	ld	r19, Z
    1a14:	fc 01       	movw	r30, r24
    1a16:	ec 54       	subi	r30, 0x4C	; 76
    1a18:	f8 4f       	sbci	r31, 0xF8	; 248
    1a1a:	80 81       	ld	r24, Z
    1a1c:	38 13       	cpse	r19, r24
    1a1e:	05 c0       	rjmp	.+10     	; 0x1a2a <check_admin_pass+0x50>
				{
					check_user++;						// if that increase the check variable by one
    1a20:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <check_user>
    1a24:	8f 5f       	subi	r24, 0xFF	; 255
    1a26:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <check_user>
			LCD_vidDisplayString("Enter Username:");	// display message on LCD			
			LCD_vidMoveCursor(2, 1);					// move LCD cursor to next line
			LCD_vidDisplayString(">>");					// display message on LCD
			Scan_user();								// take pass from user
			check_user=0;								// initialize check variable to 0
			for (u8 i=0;i<4;i++)						// loop to check if pass entered is correct or not (same saved in EEPROM)
    1a2a:	2f 5f       	subi	r18, 0xFF	; 255
    1a2c:	24 30       	cpi	r18, 0x04	; 4
    1a2e:	60 f3       	brcs	.-40     	; 0x1a08 <check_admin_pass+0x2e>
				}
				else									// if not	 
				{
				}
			}
		LCD_vidMoveCursor(3, 1);						// move LCD cursor to third line
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	83 e0       	ldi	r24, 0x03	; 3
    1a34:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString("Enter Password:");		// display message on LCD
    1a38:	87 e0       	ldi	r24, 0x07	; 7
    1a3a:	96 e0       	ldi	r25, 0x06	; 6
    1a3c:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		LCD_vidMoveCursor(4, 1);						// move LCD cursor to fourth line
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	84 e0       	ldi	r24, 0x04	; 4
    1a44:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString(">>");						// display message on LCD
    1a48:	80 e7       	ldi	r24, 0x70	; 112
    1a4a:	95 e0       	ldi	r25, 0x05	; 5
    1a4c:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		Scan_pass();									// take pass from user
    1a50:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <Scan_pass>
		check=0;										// initialize check variable to 0 
    1a54:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <check>
		for (u8 i=0;i<4;i++)							// loop to check if pass entered is correct or not (same saved in EEPROM)	
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	12 c0       	rjmp	.+36     	; 0x1a80 <check_admin_pass+0xa6>
		{		
			if (pass[i] == EEPROM_pass[i])				// check if two value are equal or not 
    1a5c:	82 2f       	mov	r24, r18
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	fc 01       	movw	r30, r24
    1a62:	e0 55       	subi	r30, 0x50	; 80
    1a64:	f8 4f       	sbci	r31, 0xF8	; 248
    1a66:	30 81       	ld	r19, Z
    1a68:	fc 01       	movw	r30, r24
    1a6a:	ef 53       	subi	r30, 0x3F	; 63
    1a6c:	f8 4f       	sbci	r31, 0xF8	; 248
    1a6e:	80 81       	ld	r24, Z
    1a70:	38 13       	cpse	r19, r24
    1a72:	05 c0       	rjmp	.+10     	; 0x1a7e <check_admin_pass+0xa4>
			{
				check++;								// if that increase the check variable by one
    1a74:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <check>
    1a78:	8f 5f       	subi	r24, 0xFF	; 255
    1a7a:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <check>
		LCD_vidDisplayString("Enter Password:");		// display message on LCD
		LCD_vidMoveCursor(4, 1);						// move LCD cursor to fourth line
		LCD_vidDisplayString(">>");						// display message on LCD
		Scan_pass();									// take pass from user
		check=0;										// initialize check variable to 0 
		for (u8 i=0;i<4;i++)							// loop to check if pass entered is correct or not (same saved in EEPROM)	
    1a7e:	2f 5f       	subi	r18, 0xFF	; 255
    1a80:	24 30       	cpi	r18, 0x04	; 4
    1a82:	60 f3       	brcs	.-40     	; 0x1a5c <check_admin_pass+0x82>
			}
			else										// if not
			{
			}
		}
		LCD_vidClearScreen();							// clear LCD screen
    1a84:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		if(check == 4 && check_user == 4)				// check if check variable equal 4 or not (correct pass)
    1a88:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <check>
    1a8c:	84 30       	cpi	r24, 0x04	; 4
    1a8e:	71 f5       	brne	.+92     	; 0x1aec <check_admin_pass+0x112>
    1a90:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <check_user>
    1a94:	84 30       	cpi	r24, 0x04	; 4
    1a96:	51 f5       	brne	.+84     	; 0x1aec <check_admin_pass+0x112>
		{
			LED_vidTurnOn(GPIOD, PIN3);					// turn on admin mode led 
    1a98:	63 e0       	ldi	r22, 0x03	; 3
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	83 e0       	ldi	r24, 0x03	; 3
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	0e 94 12 0a 	call	0x1424	; 0x1424 <LED_vidTurnOn>
			LED_vidTurnOff(GPIOD,PIN4);					// turn off user mode led
    1aa4:	64 e0       	ldi	r22, 0x04	; 4
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	83 e0       	ldi	r24, 0x03	; 3
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
			LED_vidTurnOff(GPIOD,PIN5);					// turn off block mode led
    1ab0:	65 e0       	ldi	r22, 0x05	; 5
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	83 e0       	ldi	r24, 0x03	; 3
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
			LCD_vidDisplayString("Correct Password");	// display message on LCD
    1abc:	87 e1       	ldi	r24, 0x17	; 23
    1abe:	96 e0       	ldi	r25, 0x06	; 6
    1ac0:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
    1ac4:	2f e7       	ldi	r18, 0x7F	; 127
    1ac6:	8a e1       	ldi	r24, 0x1A	; 26
    1ac8:	96 e0       	ldi	r25, 0x06	; 6
    1aca:	21 50       	subi	r18, 0x01	; 1
    1acc:	80 40       	sbci	r24, 0x00	; 0
    1ace:	90 40       	sbci	r25, 0x00	; 0
    1ad0:	e1 f7       	brne	.-8      	; 0x1aca <check_admin_pass+0xf0>
    1ad2:	00 c0       	rjmp	.+0      	; 0x1ad4 <check_admin_pass+0xfa>
    1ad4:	00 00       	nop
			_delay_ms(250);								// delay 250m second to see message
			wrong_pass_count = 0;						// reset wrong_pass_count variable by reinitialize by 0
    1ad6:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <wrong_pass_count>
			LCD_vidClearScreen();						// clear LCD screen	
    1ada:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
			LCD_vidDisplayString("Lock Opened");		// display message on screen
    1ade:	88 e2       	ldi	r24, 0x28	; 40
    1ae0:	96 e0       	ldi	r25, 0x06	; 6
    1ae2:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			admin_menue();
    1ae6:	0e 94 b0 0c 	call	0x1960	; 0x1960 <admin_menue>
			{
			}
		}
		LCD_vidClearScreen();							// clear LCD screen
		if(check == 4 && check_user == 4)				// check if check variable equal 4 or not (correct pass)
		{
    1aea:	25 c0       	rjmp	.+74     	; 0x1b36 <check_admin_pass+0x15c>
			LCD_vidDisplayString("Lock Opened");		// display message on screen
			admin_menue();
		}
		else											// if not
		{
			wrong_pass_count++;							// increase wrong_pass_count variable by one 
    1aec:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <wrong_pass_count>
    1af0:	8f 5f       	subi	r24, 0xFF	; 255
    1af2:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <wrong_pass_count>
			LCD_vidDisplayString("Wrong password");		// display message on LCD
    1af6:	84 e3       	ldi	r24, 0x34	; 52
    1af8:	96 e0       	ldi	r25, 0x06	; 6
    1afa:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			LCD_vidMoveCursor(2, 1);					// move LCD cursor
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
			LCD_vidDisplayString("or user");			// display message on LCD
    1b06:	83 e4       	ldi	r24, 0x43	; 67
    1b08:	96 e0       	ldi	r25, 0x06	; 6
    1b0a:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			LCD_vidMoveCursor(3, 1);					// move LCD cursor
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	83 e0       	ldi	r24, 0x03	; 3
    1b12:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
			LCD_vidDisplayString("Rem times:");			// display message on LCD 
    1b16:	8b e4       	ldi	r24, 0x4B	; 75
    1b18:	96 e0       	ldi	r25, 0x06	; 6
    1b1a:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
			LCD_vidDisplayNumber(3-wrong_pass_count);	// display number of reaming tries
    1b1e:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <wrong_pass_count>
    1b22:	63 e0       	ldi	r22, 0x03	; 3
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	68 1b       	sub	r22, r24
    1b28:	71 09       	sbc	r23, r1
    1b2a:	07 2e       	mov	r0, r23
    1b2c:	00 0c       	add	r0, r0
    1b2e:	88 0b       	sbc	r24, r24
    1b30:	99 0b       	sbc	r25, r25
    1b32:	0e 94 c2 09 	call	0x1384	; 0x1384 <LCD_vidDisplayNumber>
    1b36:	2f ef       	ldi	r18, 0xFF	; 255
    1b38:	80 e7       	ldi	r24, 0x70	; 112
    1b3a:	92 e0       	ldi	r25, 0x02	; 2
    1b3c:	21 50       	subi	r18, 0x01	; 1
    1b3e:	80 40       	sbci	r24, 0x00	; 0
    1b40:	90 40       	sbci	r25, 0x00	; 0
    1b42:	e1 f7       	brne	.-8      	; 0x1b3c <check_admin_pass+0x162>
    1b44:	00 c0       	rjmp	.+0      	; 0x1b46 <check_admin_pass+0x16c>
    1b46:	00 00       	nop
    1b48:	08 95       	ret

00001b4a <add_user>:
		/*Function Description: void function take void and return void                                                
								add user to the system							*/
		/************************************************************************/
void add_user()
{
	LCD_vidClearScreen();								// clear LCD screen
    1b4a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
	LCD_vidDisplayString("  Add User");					// display message on LCD
    1b4e:	86 e5       	ldi	r24, 0x56	; 86
    1b50:	96 e0       	ldi	r25, 0x06	; 6
    1b52:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	83 e0       	ldi	r24, 0x03	; 3
    1b5a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("Set user ID");				// display message on LCD
    1b5e:	81 e6       	ldi	r24, 0x61	; 97
    1b60:	96 e0       	ldi	r25, 0x06	; 6
    1b62:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	UserId = u8GetKeyPressed();							// take choice from user
    1b66:	0e 94 cd 05 	call	0xb9a	; 0xb9a <u8GetKeyPressed>
    1b6a:	80 93 c8 07 	sts	0x07C8, r24	; 0x8007c8 <UserId>
    1b6e:	2f ef       	ldi	r18, 0xFF	; 255
    1b70:	81 ee       	ldi	r24, 0xE1	; 225
    1b72:	94 e0       	ldi	r25, 0x04	; 4
    1b74:	21 50       	subi	r18, 0x01	; 1
    1b76:	80 40       	sbci	r24, 0x00	; 0
    1b78:	90 40       	sbci	r25, 0x00	; 0
    1b7a:	e1 f7       	brne	.-8      	; 0x1b74 <add_user+0x2a>
    1b7c:	00 c0       	rjmp	.+0      	; 0x1b7e <add_user+0x34>
    1b7e:	00 00       	nop
	_delay_ms(200);										// wait for 200 m second
	LCD_vidClearScreen();								// clear LCD screen
    1b80:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
	LCD_vidDisplayString("Set username");				// display message on LCD
    1b84:	8d e6       	ldi	r24, 0x6D	; 109
    1b86:	96 e0       	ldi	r25, 0x06	; 6
    1b88:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	82 e0       	ldi	r24, 0x02	; 2
    1b90:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">>");							// display message on LCD
    1b94:	80 e7       	ldi	r24, 0x70	; 112
    1b96:	95 e0       	ldi	r25, 0x05	; 5
    1b98:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	Scan_user();										// take username & pass from user
    1b9c:	0e 94 1b 0b 	call	0x1636	; 0x1636 <Scan_user>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    1ba0:	61 e0       	ldi	r22, 0x01	; 1
    1ba2:	83 e0       	ldi	r24, 0x03	; 3
    1ba4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("please,set pass:");			// display message on LCD
    1ba8:	83 e7       	ldi	r24, 0x73	; 115
    1baa:	95 e0       	ldi	r25, 0x05	; 5
    1bac:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);								// move LCD cursor to next line
    1bb0:	61 e0       	ldi	r22, 0x01	; 1
    1bb2:	84 e0       	ldi	r24, 0x04	; 4
    1bb4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">>");							// display message on LCD
    1bb8:	80 e7       	ldi	r24, 0x70	; 112
    1bba:	95 e0       	ldi	r25, 0x05	; 5
    1bbc:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	Scan_pass();										// take username & pass from user
    1bc0:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <Scan_pass>
	write_EEPROM(UserId);								// write this id in EEPROM
    1bc4:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <UserId>
    1bc8:	0e 94 48 0b 	call	0x1690	; 0x1690 <write_EEPROM>
	LCD_vidClearScreen();								// clear LCD screen
    1bcc:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
	LCD_vidDisplayString("user added ");				// display message on LCD
    1bd0:	8a e7       	ldi	r24, 0x7A	; 122
    1bd2:	96 e0       	ldi	r25, 0x06	; 6
    1bd4:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	82 e0       	ldi	r24, 0x02	; 2
    1bdc:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("Successfully");				// display message on LCD
    1be0:	88 eb       	ldi	r24, 0xB8	; 184
    1be2:	95 e0       	ldi	r25, 0x05	; 5
    1be4:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
    1be8:	2f e7       	ldi	r18, 0x7F	; 127
    1bea:	8a e1       	ldi	r24, 0x1A	; 26
    1bec:	96 e0       	ldi	r25, 0x06	; 6
    1bee:	21 50       	subi	r18, 0x01	; 1
    1bf0:	80 40       	sbci	r24, 0x00	; 0
    1bf2:	90 40       	sbci	r25, 0x00	; 0
    1bf4:	e1 f7       	brne	.-8      	; 0x1bee <add_user+0xa4>
    1bf6:	00 c0       	rjmp	.+0      	; 0x1bf8 <add_user+0xae>
    1bf8:	00 00       	nop
	_delay_ms(250);										// wait for 250 m second
	admin_menue();										// call function that display admin control menu
    1bfa:	0e 94 b0 0c 	call	0x1960	; 0x1960 <admin_menue>
    1bfe:	08 95       	ret

00001c00 <User_menue>:
		/*Function Description: void function take void and return void                                                
								display user control menu						*/
		/************************************************************************/
void User_menue()
{
	LCD_vidClearScreen();								// clear LCD screen
    1c00:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
	LCD_vidDisplayString("1.Room Lighting");			// display message on LCD
    1c04:	86 e8       	ldi	r24, 0x86	; 134
    1c06:	96 e0       	ldi	r25, 0x06	; 6
    1c08:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1c0c:	61 e0       	ldi	r22, 0x01	; 1
    1c0e:	82 e0       	ldi	r24, 0x02	; 2
    1c10:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("2.Air Condition");			// display message on LCD
    1c14:	86 e9       	ldi	r24, 0x96	; 150
    1c16:	96 e0       	ldi	r25, 0x06	; 6
    1c18:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    1c1c:	61 e0       	ldi	r22, 0x01	; 1
    1c1e:	83 e0       	ldi	r24, 0x03	; 3
    1c20:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("3.Log Out");					// display message on LCD
    1c24:	86 ea       	ldi	r24, 0xA6	; 166
    1c26:	96 e0       	ldi	r25, 0x06	; 6
    1c28:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	choice = u8GetKeyPressed();							// take choice from the user
    1c2c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <u8GetKeyPressed>
    1c30:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <choice>
    1c34:	2f e7       	ldi	r18, 0x7F	; 127
    1c36:	89 ea       	ldi	r24, 0xA9	; 169
    1c38:	93 e0       	ldi	r25, 0x03	; 3
    1c3a:	21 50       	subi	r18, 0x01	; 1
    1c3c:	80 40       	sbci	r24, 0x00	; 0
    1c3e:	90 40       	sbci	r25, 0x00	; 0
    1c40:	e1 f7       	brne	.-8      	; 0x1c3a <User_menue+0x3a>
    1c42:	00 c0       	rjmp	.+0      	; 0x1c44 <User_menue+0x44>
    1c44:	00 00       	nop
	_delay_ms(150);										// wait for 150 m second
	switch(choice)										// switch for choice
    1c46:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <choice>
    1c4a:	82 33       	cpi	r24, 0x32	; 50
    1c4c:	39 f0       	breq	.+14     	; 0x1c5c <User_menue+0x5c>
    1c4e:	83 33       	cpi	r24, 0x33	; 51
    1c50:	41 f0       	breq	.+16     	; 0x1c62 <User_menue+0x62>
    1c52:	81 33       	cpi	r24, 0x31	; 49
    1c54:	49 f4       	brne	.+18     	; 0x1c68 <User_menue+0x68>
	{
		case '1':										// if choice equal 1
			Print();									// call function that display rooms control
    1c56:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Print>
		break;											// break
    1c5a:	08 95       	ret
		case '2' :										// if choice equal 2
			Air_condition();							// call function that control air condition
    1c5c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Air_condition>
		break;											// break
    1c60:	08 95       	ret
		case '3' :										// if choice equal 3
			LogOut();									// call function that logout from the system
    1c62:	0e 94 5f 0c 	call	0x18be	; 0x18be <LogOut>
		break;											// break
    1c66:	08 95       	ret
		default:										// default case
			LCD_vidClearScreen();						// clear LCD screen
    1c68:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
			LCD_vidDisplayString("Wrong input");		// display message on LCD
    1c6c:	87 e0       	ldi	r24, 0x07	; 7
    1c6e:	95 e0       	ldi	r25, 0x05	; 5
    1c70:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
    1c74:	2f e7       	ldi	r18, 0x7F	; 127
    1c76:	8a e1       	ldi	r24, 0x1A	; 26
    1c78:	96 e0       	ldi	r25, 0x06	; 6
    1c7a:	21 50       	subi	r18, 0x01	; 1
    1c7c:	80 40       	sbci	r24, 0x00	; 0
    1c7e:	90 40       	sbci	r25, 0x00	; 0
    1c80:	e1 f7       	brne	.-8      	; 0x1c7a <User_menue+0x7a>
    1c82:	00 c0       	rjmp	.+0      	; 0x1c84 <User_menue+0x84>
    1c84:	00 00       	nop
			_delay_ms(250);								// wait for 250 m second
			User_menue();								// call function that display user control menu
    1c86:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <User_menue>
    1c8a:	08 95       	ret

00001c8c <Print>:
		/*Function Description: void function take void and return void                                                
								display rooms menu & control it					*/
		/************************************************************************/
void Print()
{
	u8 show_menu = MAIN_MENU;							// set variable to main menu	
    1c8c:	c1 e0       	ldi	r28, 0x01	; 1
	while(1)											//while loop to Show the menu
	{
		u8ReturnedValue = NOT_PRESSED;					//Set the key pressed by the user to its default value
    1c8e:	8f ef       	ldi	r24, 0xFF	; 255
    1c90:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
		switch (show_menu)								// switch form menus
    1c94:	8c 2f       	mov	r24, r28
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	fc 01       	movw	r30, r24
    1c9a:	31 97       	sbiw	r30, 0x01	; 1
    1c9c:	e8 30       	cpi	r30, 0x08	; 8
    1c9e:	f1 05       	cpc	r31, r1
    1ca0:	b0 f7       	brcc	.-20     	; 0x1c8e <Print+0x2>
    1ca2:	e5 59       	subi	r30, 0x95	; 149
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	0c 94 a5 12 	jmp	0x254a	; 0x254a <__tablejump2__>
		{
			case MAIN_MENU:								// if main menu
			do											// do while loop
			{
				LCD_vidClearScreen();					// clear LCD screen
    1caa:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
				LCD_vidDisplayString("1:Room1 2:Room2 ");// display message on LCD screen
    1cae:	80 eb       	ldi	r24, 0xB0	; 176
    1cb0:	96 e0       	ldi	r25, 0x06	; 6
    1cb2:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
				LCD_vidMoveCursor(2,1);					// move LCD cursor to second line
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
				LCD_vidDisplayString("3:Room3 4:Room4 ");// display message on LCD screen
    1cbe:	81 ec       	ldi	r24, 0xC1	; 193
    1cc0:	96 e0       	ldi	r25, 0x06	; 6
    1cc2:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
				LCD_vidMoveCursor(3,1);					// move LCD cursor to third line
    1cc6:	61 e0       	ldi	r22, 0x01	; 1
    1cc8:	83 e0       	ldi	r24, 0x03	; 3
    1cca:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
				LCD_vidDisplayString("5:Room5 6:Room6");// display message on LCD screen
    1cce:	82 ed       	ldi	r24, 0xD2	; 210
    1cd0:	96 e0       	ldi	r25, 0x06	; 6
    1cd2:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
				LCD_vidMoveCursor(4,1);					// move LCD cursor to fourth line
    1cd6:	61 e0       	ldi	r22, 0x01	; 1
    1cd8:	84 e0       	ldi	r24, 0x04	; 4
    1cda:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
				LCD_vidDisplayString("0:Return >> ");	// display message on LCD screen
    1cde:	82 ee       	ldi	r24, 0xE2	; 226
    1ce0:	96 e0       	ldi	r25, 0x06	; 6
    1ce2:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
				u8ReturnedValue = u8GetKeyPressed();	// take choice from user 
    1ce6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <u8GetKeyPressed>
    1cea:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
    1cee:	2f ef       	ldi	r18, 0xFF	; 255
    1cf0:	81 ee       	ldi	r24, 0xE1	; 225
    1cf2:	94 e0       	ldi	r25, 0x04	; 4
    1cf4:	21 50       	subi	r18, 0x01	; 1
    1cf6:	80 40       	sbci	r24, 0x00	; 0
    1cf8:	90 40       	sbci	r25, 0x00	; 0
    1cfa:	e1 f7       	brne	.-8      	; 0x1cf4 <Print+0x68>
    1cfc:	00 c0       	rjmp	.+0      	; 0x1cfe <Print+0x72>
    1cfe:	00 00       	nop
				_delay_ms(200);							// wait for 200 m second
				if (u8ReturnedValue == '1')				// if choice equal 1
    1d00:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
    1d04:	81 33       	cpi	r24, 0x31	; 49
    1d06:	41 f1       	breq	.+80     	; 0x1d58 <Print+0xcc>
				{
					show_menu = ROOM1_MENU;				// display room 1 menu
				}
				else if (u8ReturnedValue == '2')		// if choice equal 2
    1d08:	82 33       	cpi	r24, 0x32	; 50
    1d0a:	41 f1       	breq	.+80     	; 0x1d5c <Print+0xd0>
				{
					show_menu = ROOM2_MENU;				// display room 2 menu
				}
				else if (u8ReturnedValue == '3')		// if choice equal 3
    1d0c:	83 33       	cpi	r24, 0x33	; 51
    1d0e:	41 f1       	breq	.+80     	; 0x1d60 <Print+0xd4>
				{
					show_menu = ROOM3_MENU;				// display room 3 menu
				}
				else if (u8ReturnedValue == '4')		// if choice equal 4
    1d10:	84 33       	cpi	r24, 0x34	; 52
    1d12:	41 f1       	breq	.+80     	; 0x1d64 <Print+0xd8>
				{
					show_menu = ROOM4_MENU;				// display room 4 menu
				}
				else if (u8ReturnedValue == '5')		// if choice equal 5
    1d14:	85 33       	cpi	r24, 0x35	; 53
    1d16:	41 f1       	breq	.+80     	; 0x1d68 <Print+0xdc>
				{
					show_menu = ROOM5_MENU;				// display room 5 menu
				}
				else if (u8ReturnedValue == '6')		// if choice equal 6
    1d18:	86 33       	cpi	r24, 0x36	; 54
    1d1a:	41 f1       	breq	.+80     	; 0x1d6c <Print+0xe0>
				{
					show_menu = ROOM6_MENU;				// display room 6 menu
				}
				else if (u8ReturnedValue=='0')			// if choice equal 0
    1d1c:	80 33       	cpi	r24, 0x30	; 48
    1d1e:	51 f4       	brne	.+20     	; 0x1d34 <Print+0xa8>
				{
					if(Isadmin()==1)					// if function that check login flag equal to 1 
    1d20:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Isadmin>
    1d24:	81 30       	cpi	r24, 0x01	; 1
    1d26:	19 f4       	brne	.+6      	; 0x1d2e <Print+0xa2>
						{
							Home_control_Menue();		//call function that display control admin menu
    1d28:	0e 94 0b 01 	call	0x216	; 0x216 <Home_control_Menue>
    1d2c:	20 c0       	rjmp	.+64     	; 0x1d6e <Print+0xe2>
						}
					else								// if not 
						{
							User_menue();				// call function that display control user menu
    1d2e:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <User_menue>
    1d32:	1d c0       	rjmp	.+58     	; 0x1d6e <Print+0xe2>
						}
				
				}
				else if(u8ReturnedValue != NOT_PRESSED)	// if user enter any thing else 
    1d34:	8f 3f       	cpi	r24, 0xFF	; 255
    1d36:	d9 f0       	breq	.+54     	; 0x1d6e <Print+0xe2>
				{
					LCD_vidClearScreen();				// clear LCD screen
    1d38:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
					LCD_vidDisplayString("Wrong input");// display message on LCD screen
    1d3c:	87 e0       	ldi	r24, 0x07	; 7
    1d3e:	95 e0       	ldi	r25, 0x05	; 5
    1d40:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
    1d44:	2f e7       	ldi	r18, 0x7F	; 127
    1d46:	8a e1       	ldi	r24, 0x1A	; 26
    1d48:	96 e0       	ldi	r25, 0x06	; 6
    1d4a:	21 50       	subi	r18, 0x01	; 1
    1d4c:	80 40       	sbci	r24, 0x00	; 0
    1d4e:	90 40       	sbci	r25, 0x00	; 0
    1d50:	e1 f7       	brne	.-8      	; 0x1d4a <Print+0xbe>
    1d52:	00 c0       	rjmp	.+0      	; 0x1d54 <Print+0xc8>
    1d54:	00 00       	nop
    1d56:	0b c0       	rjmp	.+22     	; 0x1d6e <Print+0xe2>
				LCD_vidDisplayString("0:Return >> ");	// display message on LCD screen
				u8ReturnedValue = u8GetKeyPressed();	// take choice from user 
				_delay_ms(200);							// wait for 200 m second
				if (u8ReturnedValue == '1')				// if choice equal 1
				{
					show_menu = ROOM1_MENU;				// display room 1 menu
    1d58:	c3 e0       	ldi	r28, 0x03	; 3
    1d5a:	09 c0       	rjmp	.+18     	; 0x1d6e <Print+0xe2>
				}
				else if (u8ReturnedValue == '2')		// if choice equal 2
				{
					show_menu = ROOM2_MENU;				// display room 2 menu
    1d5c:	c4 e0       	ldi	r28, 0x04	; 4
    1d5e:	07 c0       	rjmp	.+14     	; 0x1d6e <Print+0xe2>
				}
				else if (u8ReturnedValue == '3')		// if choice equal 3
				{
					show_menu = ROOM3_MENU;				// display room 3 menu
    1d60:	c5 e0       	ldi	r28, 0x05	; 5
    1d62:	05 c0       	rjmp	.+10     	; 0x1d6e <Print+0xe2>
				}
				else if (u8ReturnedValue == '4')		// if choice equal 4
				{
					show_menu = ROOM4_MENU;				// display room 4 menu
    1d64:	c6 e0       	ldi	r28, 0x06	; 6
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <Print+0xe2>
				}
				else if (u8ReturnedValue == '5')		// if choice equal 5
				{
					show_menu = ROOM5_MENU;				// display room 5 menu
    1d68:	c7 e0       	ldi	r28, 0x07	; 7
    1d6a:	01 c0       	rjmp	.+2      	; 0x1d6e <Print+0xe2>
				}
				else if (u8ReturnedValue == '6')		// if choice equal 6
				{
					show_menu = ROOM6_MENU;				// display room 6 menu
    1d6c:	c8 e0       	ldi	r28, 0x08	; 8
				{
					LCD_vidClearScreen();				// clear LCD screen
					LCD_vidDisplayString("Wrong input");// display message on LCD screen
					_delay_ms(250);						// wait for 250m second
				}
			} while  ((u8ReturnedValue < '0') || (u8ReturnedValue > '6') );// loop still work if choice less than 0 or greater than 6
    1d6e:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
    1d72:	80 53       	subi	r24, 0x30	; 48
    1d74:	87 30       	cpi	r24, 0x07	; 7
    1d76:	08 f0       	brcs	.+2      	; 0x1d7a <Print+0xee>
    1d78:	98 cf       	rjmp	.-208    	; 0x1caa <Print+0x1e>
    1d7a:	89 cf       	rjmp	.-238    	; 0x1c8e <Print+0x2>
			break;										// stop case
			case ROOM1_MENU:							// if room 1 menu
			control_rooms(ROOM1_MENU);					// call function that control room 1 lightning
    1d7c:	83 e0       	ldi	r24, 0x03	; 3
    1d7e:	0e 94 e7 05 	call	0xbce	; 0xbce <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1d82:	c1 e0       	ldi	r28, 0x01	; 1
			break;										// stop case
    1d84:	84 cf       	rjmp	.-248    	; 0x1c8e <Print+0x2>
			case ROOM2_MENU:							// if room 2 menu
			control_rooms(ROOM2_MENU);					// call function that control room 2 lightning
    1d86:	84 e0       	ldi	r24, 0x04	; 4
    1d88:	0e 94 e7 05 	call	0xbce	; 0xbce <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1d8c:	c1 e0       	ldi	r28, 0x01	; 1
			break;										// stop case
    1d8e:	7f cf       	rjmp	.-258    	; 0x1c8e <Print+0x2>
			case ROOM3_MENU:							// if room 3 menu
			control_rooms(ROOM3_MENU);					// call function that control room 3 lightning
    1d90:	85 e0       	ldi	r24, 0x05	; 5
    1d92:	0e 94 e7 05 	call	0xbce	; 0xbce <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1d96:	c1 e0       	ldi	r28, 0x01	; 1
			break;										// stop case
    1d98:	7a cf       	rjmp	.-268    	; 0x1c8e <Print+0x2>
			case ROOM4_MENU:							// if room 4 menu
			control_rooms(ROOM4_MENU);					// call function that control room 4 lightning
    1d9a:	86 e0       	ldi	r24, 0x06	; 6
    1d9c:	0e 94 e7 05 	call	0xbce	; 0xbce <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1da0:	c1 e0       	ldi	r28, 0x01	; 1
			break;										// stop case
    1da2:	75 cf       	rjmp	.-278    	; 0x1c8e <Print+0x2>
			case ROOM5_MENU:							// if room 5 menu
			control_rooms(ROOM5_MENU);					// call function that control room 5 lightning
    1da4:	87 e0       	ldi	r24, 0x07	; 7
    1da6:	0e 94 e7 05 	call	0xbce	; 0xbce <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1daa:	c1 e0       	ldi	r28, 0x01	; 1
			break;										// stop case
    1dac:	70 cf       	rjmp	.-288    	; 0x1c8e <Print+0x2>
			case ROOM6_MENU:							// if room 6 menu
			control_rooms(ROOM6_MENU);					// call function that control room 6 lightning
    1dae:	88 e0       	ldi	r24, 0x08	; 8
    1db0:	0e 94 e7 05 	call	0xbce	; 0xbce <control_rooms>
			show_menu = MAIN_MENU;						// set menu to main menu
    1db4:	c1 e0       	ldi	r28, 0x01	; 1
			break;										// stop case
    1db6:	6b cf       	rjmp	.-298    	; 0x1c8e <Print+0x2>

00001db8 <check_user_pass>:
		/*Function Description: void function take void and return void                                                
								check username & pass for user if correct or not*/
		/************************************************************************/
void check_user_pass()
{	
	LCD_vidClearScreen();								// move LCD cursor to first line
    1db8:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
	LCD_vidDisplayString("  User LOGIN ");				// display message on LCD
    1dbc:	8f ee       	ldi	r24, 0xEF	; 239
    1dbe:	96 e0       	ldi	r25, 0x06	; 6
    1dc0:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to second line
    1dc4:	61 e0       	ldi	r22, 0x01	; 1
    1dc6:	82 e0       	ldi	r24, 0x02	; 2
    1dc8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("ID from (0-9) ");				// display message on LCD
    1dcc:	8d ef       	ldi	r24, 0xFD	; 253
    1dce:	96 e0       	ldi	r25, 0x06	; 6
    1dd0:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move LCD cursor to third line
    1dd4:	61 e0       	ldi	r22, 0x01	; 1
    1dd6:	83 e0       	ldi	r24, 0x03	; 3
    1dd8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("Enter User ID ");				// display message on LCD
    1ddc:	8c e0       	ldi	r24, 0x0C	; 12
    1dde:	97 e0       	ldi	r25, 0x07	; 7
    1de0:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);								// move LCD cursor to fourth line
    1de4:	61 e0       	ldi	r22, 0x01	; 1
    1de6:	84 e0       	ldi	r24, 0x04	; 4
    1de8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">> ");						// display message on LCD
    1dec:	8b ee       	ldi	r24, 0xEB	; 235
    1dee:	96 e0       	ldi	r25, 0x06	; 6
    1df0:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	UserId = u8GetKeyPressed();							// take user id from user
    1df4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <u8GetKeyPressed>
    1df8:	80 93 c8 07 	sts	0x07C8, r24	; 0x8007c8 <UserId>
	read_EEPROM(UserId);								// read this user id from EEPROM
    1dfc:	0e 94 81 0b 	call	0x1702	; 0x1702 <read_EEPROM>
    1e00:	2f ef       	ldi	r18, 0xFF	; 255
    1e02:	81 ee       	ldi	r24, 0xE1	; 225
    1e04:	94 e0       	ldi	r25, 0x04	; 4
    1e06:	21 50       	subi	r18, 0x01	; 1
    1e08:	80 40       	sbci	r24, 0x00	; 0
    1e0a:	90 40       	sbci	r25, 0x00	; 0
    1e0c:	e1 f7       	brne	.-8      	; 0x1e06 <check_user_pass+0x4e>
    1e0e:	00 c0       	rjmp	.+0      	; 0x1e10 <check_user_pass+0x58>
    1e10:	00 00       	nop
	_delay_ms(200);										// wait 200 m second
	LCD_vidClearScreen();								// move LCD cursor to next line
    1e12:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
	LCD_vidDisplayString("Enter username");				// display message on LCD
    1e16:	8b e1       	ldi	r24, 0x1B	; 27
    1e18:	97 e0       	ldi	r25, 0x07	; 7
    1e1a:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(2,1);								// move LCD cursor to secound line
    1e1e:	61 e0       	ldi	r22, 0x01	; 1
    1e20:	82 e0       	ldi	r24, 0x02	; 2
    1e22:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">>");							// display message on LCD
    1e26:	80 e7       	ldi	r24, 0x70	; 112
    1e28:	95 e0       	ldi	r25, 0x05	; 5
    1e2a:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	Scan_user();										// take username & pass from user
    1e2e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <Scan_user>
	check_user=0;										// initialize check variable to 0
    1e32:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <check_user>
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	12 c0       	rjmp	.+36     	; 0x1e5e <check_user_pass+0xa6>
	{
		if (user[i] == EEPROM_user[i])					// check if two value are equal or not
    1e3a:	82 2f       	mov	r24, r18
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	fc 01       	movw	r30, r24
    1e40:	e8 54       	subi	r30, 0x48	; 72
    1e42:	f8 4f       	sbci	r31, 0xF8	; 248
    1e44:	30 81       	ld	r19, Z
    1e46:	fc 01       	movw	r30, r24
    1e48:	ec 54       	subi	r30, 0x4C	; 76
    1e4a:	f8 4f       	sbci	r31, 0xF8	; 248
    1e4c:	80 81       	ld	r24, Z
    1e4e:	38 13       	cpse	r19, r24
    1e50:	05 c0       	rjmp	.+10     	; 0x1e5c <check_user_pass+0xa4>
		{
			check_user++;								// if that increase the check variable by one
    1e52:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <check_user>
    1e56:	8f 5f       	subi	r24, 0xFF	; 255
    1e58:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <check_user>
	LCD_vidDisplayString("Enter username");				// display message on LCD
	LCD_vidMoveCursor(2,1);								// move LCD cursor to secound line
	LCD_vidDisplayString(">>");							// display message on LCD
	Scan_user();										// take username & pass from user
	check_user=0;										// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
    1e5c:	2f 5f       	subi	r18, 0xFF	; 255
    1e5e:	24 30       	cpi	r18, 0x04	; 4
    1e60:	60 f3       	brcs	.-40     	; 0x1e3a <check_user_pass+0x82>
		}
		else											//if not
		{
		}
	}
	LCD_vidMoveCursor(3,1);								// move LCD cursor to first line
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	83 e0       	ldi	r24, 0x03	; 3
    1e66:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString("Enter Password:");			// display message on LCD
    1e6a:	87 e0       	ldi	r24, 0x07	; 7
    1e6c:	96 e0       	ldi	r25, 0x06	; 6
    1e6e:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(4, 1);							// move LCD cursor to next line
    1e72:	61 e0       	ldi	r22, 0x01	; 1
    1e74:	84 e0       	ldi	r24, 0x04	; 4
    1e76:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">>");							// display message on LCD
    1e7a:	80 e7       	ldi	r24, 0x70	; 112
    1e7c:	95 e0       	ldi	r25, 0x05	; 5
    1e7e:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	Scan_pass();										// take pass from user
    1e82:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <Scan_pass>
	check=0;											// initialize check variable to 0
    1e86:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <check>
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	12 c0       	rjmp	.+36     	; 0x1eb2 <check_user_pass+0xfa>
	{
		if (pass[i] == EEPROM_pass[i])					// check if two value are equal or not
    1e8e:	82 2f       	mov	r24, r18
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	fc 01       	movw	r30, r24
    1e94:	e0 55       	subi	r30, 0x50	; 80
    1e96:	f8 4f       	sbci	r31, 0xF8	; 248
    1e98:	30 81       	ld	r19, Z
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	ef 53       	subi	r30, 0x3F	; 63
    1e9e:	f8 4f       	sbci	r31, 0xF8	; 248
    1ea0:	80 81       	ld	r24, Z
    1ea2:	38 13       	cpse	r19, r24
    1ea4:	05 c0       	rjmp	.+10     	; 0x1eb0 <check_user_pass+0xf8>
		{
			check++;									// if that increase the check variable by one
    1ea6:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <check>
    1eaa:	8f 5f       	subi	r24, 0xFF	; 255
    1eac:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <check>
	LCD_vidDisplayString("Enter Password:");			// display message on LCD
	LCD_vidMoveCursor(4, 1);							// move LCD cursor to next line
	LCD_vidDisplayString(">>");							// display message on LCD
	Scan_pass();										// take pass from user
	check=0;											// initialize check variable to 0
	for (u8 i=0;i<4;i++)								// loop to check if pass entered is correct or not (same saved in EEPROM)
    1eb0:	2f 5f       	subi	r18, 0xFF	; 255
    1eb2:	24 30       	cpi	r18, 0x04	; 4
    1eb4:	60 f3       	brcs	.-40     	; 0x1e8e <check_user_pass+0xd6>
		}
		else                                            // if not
		{
		}
	}
	LCD_vidClearScreen();								// clear LCD screen
    1eb6:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
	if(check == 4 && check_user == 4)					// check if check variable equal 4 or not (correct pass)
    1eba:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <check>
    1ebe:	84 30       	cpi	r24, 0x04	; 4
    1ec0:	71 f5       	brne	.+92     	; 0x1f1e <check_user_pass+0x166>
    1ec2:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <check_user>
    1ec6:	84 30       	cpi	r24, 0x04	; 4
    1ec8:	51 f5       	brne	.+84     	; 0x1f1e <check_user_pass+0x166>
	{		
			LED_vidTurnOn(GPIOD, PIN4);					// turn on user mode led
    1eca:	64 e0       	ldi	r22, 0x04	; 4
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	83 e0       	ldi	r24, 0x03	; 3
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 12 0a 	call	0x1424	; 0x1424 <LED_vidTurnOn>
			LED_vidTurnOff(GPIOD,PIN3);					// turn off admin mode led
    1ed6:	63 e0       	ldi	r22, 0x03	; 3
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	83 e0       	ldi	r24, 0x03	; 3
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
			LED_vidTurnOff(GPIOD,PIN5);					// turn off block mode led
    1ee2:	65 e0       	ldi	r22, 0x05	; 5
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	83 e0       	ldi	r24, 0x03	; 3
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
		LCD_vidDisplayString("Correct Password");		// display message on LCD
    1eee:	87 e1       	ldi	r24, 0x17	; 23
    1ef0:	96 e0       	ldi	r25, 0x06	; 6
    1ef2:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
    1ef6:	2f e7       	ldi	r18, 0x7F	; 127
    1ef8:	8a e1       	ldi	r24, 0x1A	; 26
    1efa:	96 e0       	ldi	r25, 0x06	; 6
    1efc:	21 50       	subi	r18, 0x01	; 1
    1efe:	80 40       	sbci	r24, 0x00	; 0
    1f00:	90 40       	sbci	r25, 0x00	; 0
    1f02:	e1 f7       	brne	.-8      	; 0x1efc <check_user_pass+0x144>
    1f04:	00 c0       	rjmp	.+0      	; 0x1f06 <check_user_pass+0x14e>
    1f06:	00 00       	nop
		_delay_ms(250);									// delay 250m second to see message
		wrong_pass_count = 0;							// reset wrong_pass_count variable by reinitialize by 0
    1f08:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <wrong_pass_count>
		LCD_vidClearScreen();							// clear LCD screen
    1f0c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		LCD_vidDisplayString("Lock Opened");			// display message on screen
    1f10:	88 e2       	ldi	r24, 0x28	; 40
    1f12:	96 e0       	ldi	r25, 0x06	; 6
    1f14:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		User_menue(); 									// call function that display user control menu
    1f18:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <User_menue>
		{
		}
	}
	LCD_vidClearScreen();								// clear LCD screen
	if(check == 4 && check_user == 4)					// check if check variable equal 4 or not (correct pass)
	{		
    1f1c:	25 c0       	rjmp	.+74     	; 0x1f68 <check_user_pass+0x1b0>
		LCD_vidDisplayString("Lock Opened");			// display message on screen
		User_menue(); 									// call function that display user control menu
	}
	else												// if not
	{
		wrong_pass_count++;								// increase wrong_pass_count variable by one
    1f1e:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <wrong_pass_count>
    1f22:	8f 5f       	subi	r24, 0xFF	; 255
    1f24:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <wrong_pass_count>
		LCD_vidDisplayString("Wrong password");			// display message on LCD
    1f28:	84 e3       	ldi	r24, 0x34	; 52
    1f2a:	96 e0       	ldi	r25, 0x06	; 6
    1f2c:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		LCD_vidMoveCursor(2, 1);						// move LCD cursor to second line
    1f30:	61 e0       	ldi	r22, 0x01	; 1
    1f32:	82 e0       	ldi	r24, 0x02	; 2
    1f34:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString("or user");				// display message on LCD
    1f38:	83 e4       	ldi	r24, 0x43	; 67
    1f3a:	96 e0       	ldi	r25, 0x06	; 6
    1f3c:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		LCD_vidMoveCursor(3, 1);						// move LCD cursor to next line
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	83 e0       	ldi	r24, 0x03	; 3
    1f44:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
		LCD_vidDisplayString("Rem times:");				// display message on LCD
    1f48:	8b e4       	ldi	r24, 0x4B	; 75
    1f4a:	96 e0       	ldi	r25, 0x06	; 6
    1f4c:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		LCD_vidDisplayNumber(3-wrong_pass_count);		// display number of reaming tries
    1f50:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <wrong_pass_count>
    1f54:	63 e0       	ldi	r22, 0x03	; 3
    1f56:	70 e0       	ldi	r23, 0x00	; 0
    1f58:	68 1b       	sub	r22, r24
    1f5a:	71 09       	sbc	r23, r1
    1f5c:	07 2e       	mov	r0, r23
    1f5e:	00 0c       	add	r0, r0
    1f60:	88 0b       	sbc	r24, r24
    1f62:	99 0b       	sbc	r25, r25
    1f64:	0e 94 c2 09 	call	0x1384	; 0x1384 <LCD_vidDisplayNumber>
    1f68:	2f ef       	ldi	r18, 0xFF	; 255
    1f6a:	80 e7       	ldi	r24, 0x70	; 112
    1f6c:	92 e0       	ldi	r25, 0x02	; 2
    1f6e:	21 50       	subi	r18, 0x01	; 1
    1f70:	80 40       	sbci	r24, 0x00	; 0
    1f72:	90 40       	sbci	r25, 0x00	; 0
    1f74:	e1 f7       	brne	.-8      	; 0x1f6e <check_user_pass+0x1b6>
    1f76:	00 c0       	rjmp	.+0      	; 0x1f78 <check_user_pass+0x1c0>
    1f78:	00 00       	nop
    1f7a:	08 95       	ret

00001f7c <smart_lock>:
		/************************************************************************/
	/* if pass wrong and exceed tries safe go on lock mode */
	/* u8 type function take void and return variable form u8 type */
u8 smart_lock()
{
	if (choice=='1')									// if choice equal to 1
    1f7c:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <choice>
    1f80:	81 33       	cpi	r24, 0x31	; 49
    1f82:	29 f4       	brne	.+10     	; 0x1f8e <smart_lock+0x12>
	{
		logInFlag=0;									// set login flag to 0
    1f84:	10 92 c7 07 	sts	0x07C7, r1	; 0x8007c7 <logInFlag>
		check_admin_pass();								// call function that check admin username & pass
    1f88:	0e 94 ed 0c 	call	0x19da	; 0x19da <check_admin_pass>
    1f8c:	10 c0       	rjmp	.+32     	; 0x1fae <smart_lock+0x32>
		Isadmin();										// call function that check login flag
	}
	else if (choice=='2')								// if choice equal to 2
    1f8e:	82 33       	cpi	r24, 0x32	; 50
    1f90:	31 f4       	brne	.+12     	; 0x1f9e <smart_lock+0x22>
	{
		logInFlag=1;									// set login flag to 1
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <logInFlag>
		check_user_pass();								// call function that check user username & pass
    1f98:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <check_user_pass>
    1f9c:	08 c0       	rjmp	.+16     	; 0x1fae <smart_lock+0x32>
		Isadmin();										// call function that check login flag
	}
	else												// if not 
	{
		LCD_vidClearScreen();							// clear LCD screen
    1f9e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		LCD_vidDisplayString("WRong choice");			// display message on LCD
    1fa2:	8a e2       	ldi	r24, 0x2A	; 42
    1fa4:	97 e0       	ldi	r25, 0x07	; 7
    1fa6:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		start();										// call function that start the system
    1faa:	0e 94 b8 0b 	call	0x1770	; 0x1770 <start>
	}
	if (wrong_pass_count == 3)							// check if user exceed maximum number of tries or not
    1fae:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <wrong_pass_count>
    1fb2:	83 30       	cpi	r24, 0x03	; 3
    1fb4:	59 f5       	brne	.+86     	; 0x200c <smart_lock+0x90>
	{
		LCD_vidClearScreen();							// clear LCD screen
    1fb6:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		LCD_vidDisplayString("Locked Mode!!");			// display message on LCD
    1fba:	87 e3       	ldi	r24, 0x37	; 55
    1fbc:	97 e0       	ldi	r25, 0x07	; 7
    1fbe:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		LED_vidTurnOn(GPIOB, PIN5);						// turn on block mode led
    1fc2:	65 e0       	ldi	r22, 0x05	; 5
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	0e 94 12 0a 	call	0x1424	; 0x1424 <LED_vidTurnOn>
		LED_vidTurnOff(GPIOD,PIN4);						// turn off user mode led
    1fce:	64 e0       	ldi	r22, 0x04	; 4
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	83 e0       	ldi	r24, 0x03	; 3
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
		LED_vidTurnOff(GPIOD,PIN3);						// turn off admin mode led
    1fda:	63 e0       	ldi	r22, 0x03	; 3
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	83 e0       	ldi	r24, 0x03	; 3
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 16 0a 	call	0x142c	; 0x142c <LED_vidTurnOff>
		DIO_vidWritePin(GPIOD,PIN7,HIGH);				// output hight on pin to turn on buzzer
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	67 e0       	ldi	r22, 0x07	; 7
    1fea:	83 e0       	ldi	r24, 0x03	; 3
    1fec:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
    1ff0:	2f ef       	ldi	r18, 0xFF	; 255
    1ff2:	81 e1       	ldi	r24, 0x11	; 17
    1ff4:	9a e7       	ldi	r25, 0x7A	; 122
    1ff6:	21 50       	subi	r18, 0x01	; 1
    1ff8:	80 40       	sbci	r24, 0x00	; 0
    1ffa:	90 40       	sbci	r25, 0x00	; 0
    1ffc:	e1 f7       	brne	.-8      	; 0x1ff6 <smart_lock+0x7a>
    1ffe:	00 c0       	rjmp	.+0      	; 0x2000 <smart_lock+0x84>
    2000:	00 00       	nop
		_delay_ms(5000);								// wait for five second
		DIO_vidWritePin(GPIOD,PIN7,LOW);				// output hight on pin to turn off buzzer
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	67 e0       	ldi	r22, 0x07	; 7
    2006:	83 e0       	ldi	r24, 0x03	; 3
    2008:	0e 94 3c 07 	call	0xe78	; 0xe78 <DIO_vidWritePin>
	}
	return wrong_pass_count;							// return value of wrong_pass_count variable
}
    200c:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <wrong_pass_count>
    2010:	08 95       	ret

00002012 <Open_Door>:
		/*Function Description: void function take void and return void                                                
								control door opening & closing					*/
		/************************************************************************/
void Open_Door()
{
	LCD_vidClearScreen();								// clear LCD screen
    2012:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
	LCD_vidDisplayString("DOOR IS: ");					// display message on LCD
    2016:	85 e4       	ldi	r24, 0x45	; 69
    2018:	97 e0       	ldi	r25, 0x07	; 7
    201a:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	if(door == 1)										// if door equal to 1
    201e:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <__data_end>
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	29 f4       	brne	.+10     	; 0x2030 <Open_Door+0x1e>
	{
		LCD_vidDisplayString("OPEN");					// display message on LCD
    2026:	8f e4       	ldi	r24, 0x4F	; 79
    2028:	97 e0       	ldi	r25, 0x07	; 7
    202a:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
    202e:	06 c0       	rjmp	.+12     	; 0x203c <Open_Door+0x2a>
	}
	else if(door == 0)									// if door equal to 0	
    2030:	81 11       	cpse	r24, r1
    2032:	04 c0       	rjmp	.+8      	; 0x203c <Open_Door+0x2a>
	{
		LCD_vidDisplayString("CLOSE");					// display message on LCD
    2034:	84 e5       	ldi	r24, 0x54	; 84
    2036:	97 e0       	ldi	r25, 0x07	; 7
    2038:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	}	
	LCD_vidMoveCursor(2,1);								// move cursor to second line	
    203c:	61 e0       	ldi	r22, 0x01	; 1
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">> 1-open door ");			// display message on LCD
    2044:	8a e5       	ldi	r24, 0x5A	; 90
    2046:	97 e0       	ldi	r25, 0x07	; 7
    2048:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(3,1);								// move cursor to third line
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	83 e0       	ldi	r24, 0x03	; 3
    2050:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">> 2-close door ");			// display message on LCD
    2054:	8a e6       	ldi	r24, 0x6A	; 106
    2056:	97 e0       	ldi	r25, 0x07	; 7
    2058:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
	LCD_vidMoveCursor(4,1);								// move cursor to fourth line
    205c:	61 e0       	ldi	r22, 0x01	; 1
    205e:	84 e0       	ldi	r24, 0x04	; 4
    2060:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_vidMoveCursor>
	LCD_vidDisplayString(">> 0-RET ");					// display message on LCD
    2064:	8d ef       	ldi	r24, 0xFD	; 253
    2066:	94 e0       	ldi	r25, 0x04	; 4
    2068:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
    206c:	2f e7       	ldi	r18, 0x7F	; 127
    206e:	8a e1       	ldi	r24, 0x1A	; 26
    2070:	96 e0       	ldi	r25, 0x06	; 6
    2072:	21 50       	subi	r18, 0x01	; 1
    2074:	80 40       	sbci	r24, 0x00	; 0
    2076:	90 40       	sbci	r25, 0x00	; 0
    2078:	e1 f7       	brne	.-8      	; 0x2072 <Open_Door+0x60>
    207a:	00 c0       	rjmp	.+0      	; 0x207c <Open_Door+0x6a>
    207c:	00 00       	nop
	_delay_ms(250);										// wait for 250 m second
	u8ReturnedValue = u8GetKeyPressed();				// take choice from user
    207e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <u8GetKeyPressed>
    2082:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <u8ReturnedValue>
    2086:	2f ef       	ldi	r18, 0xFF	; 255
    2088:	81 ee       	ldi	r24, 0xE1	; 225
    208a:	94 e0       	ldi	r25, 0x04	; 4
    208c:	21 50       	subi	r18, 0x01	; 1
    208e:	80 40       	sbci	r24, 0x00	; 0
    2090:	90 40       	sbci	r25, 0x00	; 0
    2092:	e1 f7       	brne	.-8      	; 0x208c <Open_Door+0x7a>
    2094:	00 c0       	rjmp	.+0      	; 0x2096 <Open_Door+0x84>
    2096:	00 00       	nop
	_delay_ms(200);										// wait for 200 m second
	if (u8ReturnedValue == '1')							// if choice equal 1
    2098:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <u8ReturnedValue>
    209c:	81 33       	cpi	r24, 0x31	; 49
    209e:	b9 f4       	brne	.+46     	; 0x20ce <Open_Door+0xbc>
	{
		LCD_vidClearScreen();							// clear LCD screen
    20a0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		LCD_vidDisplayString("door opening----");		// display message on LCD
    20a4:	8b e7       	ldi	r24, 0x7B	; 123
    20a6:	97 e0       	ldi	r25, 0x07	; 7
    20a8:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		Servo_Clockwise(angle);							// turn on the servo on clock wise
    20ac:	8a e5       	ldi	r24, 0x5A	; 90
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Servo_Clockwise>
    20b4:	2f ef       	ldi	r18, 0xFF	; 255
    20b6:	89 e6       	ldi	r24, 0x69	; 105
    20b8:	98 e1       	ldi	r25, 0x18	; 24
    20ba:	21 50       	subi	r18, 0x01	; 1
    20bc:	80 40       	sbci	r24, 0x00	; 0
    20be:	90 40       	sbci	r25, 0x00	; 0
    20c0:	e1 f7       	brne	.-8      	; 0x20ba <Open_Door+0xa8>
    20c2:	00 c0       	rjmp	.+0      	; 0x20c4 <Open_Door+0xb2>
    20c4:	00 00       	nop
		_delay_ms(1000);								// wait for one second
		door= 1;										// set door equal 1
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <__data_end>
    20cc:	25 c0       	rjmp	.+74     	; 0x2118 <Open_Door+0x106>
	}
	else if(u8ReturnedValue == '2')						// if choice equal 2
    20ce:	82 33       	cpi	r24, 0x32	; 50
    20d0:	b1 f4       	brne	.+44     	; 0x20fe <Open_Door+0xec>
	{
		LCD_vidClearScreen();							// clear LCD screen
    20d2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		LCD_vidDisplayString("door closing----");		// display message on LCD
    20d6:	8c e8       	ldi	r24, 0x8C	; 140
    20d8:	97 e0       	ldi	r25, 0x07	; 7
    20da:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		Servo_Counterclockwise(angle);					// turn on the servo on anti clock wise
    20de:	8a e5       	ldi	r24, 0x5A	; 90
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	0e 94 cd 0a 	call	0x159a	; 0x159a <Servo_Counterclockwise>
    20e6:	2f ef       	ldi	r18, 0xFF	; 255
    20e8:	89 e6       	ldi	r24, 0x69	; 105
    20ea:	98 e1       	ldi	r25, 0x18	; 24
    20ec:	21 50       	subi	r18, 0x01	; 1
    20ee:	80 40       	sbci	r24, 0x00	; 0
    20f0:	90 40       	sbci	r25, 0x00	; 0
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <Open_Door+0xda>
    20f4:	00 c0       	rjmp	.+0      	; 0x20f6 <Open_Door+0xe4>
    20f6:	00 00       	nop
		_delay_ms(1000);								// wait for one second
		door = 0;										// set door equal 0
    20f8:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <__data_end>
    20fc:	0d c0       	rjmp	.+26     	; 0x2118 <Open_Door+0x106>
	}
	else if (u8ReturnedValue == '0')					// if choice equal 0
    20fe:	80 33       	cpi	r24, 0x30	; 48
    2100:	19 f4       	brne	.+6      	; 0x2108 <Open_Door+0xf6>
	{
		Home_control_Menue();							// call function that display admin control menu
    2102:	0e 94 0b 01 	call	0x216	; 0x216 <Home_control_Menue>
    2106:	08 c0       	rjmp	.+16     	; 0x2118 <Open_Door+0x106>
	}
	else												// if not 
	{
		LCD_vidClearScreen();							// clear LCD screen
    2108:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_vidClearScreen>
		LCD_vidDisplayString("wrong input");			// display message on LCD
    210c:	8d e9       	ldi	r24, 0x9D	; 157
    210e:	97 e0       	ldi	r25, 0x07	; 7
    2110:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidDisplayString>
		Open_Door();									// call function that control door opening
    2114:	0e 94 09 10 	call	0x2012	; 0x2012 <Open_Door>
	}
	Home_control_Menue();								// call function that display admin control menu 
    2118:	0e 94 0b 01 	call	0x216	; 0x216 <Home_control_Menue>
    211c:	08 95       	ret

0000211e <USART_vidInit>:
    CB_RX = copy_CB;
}

void USART_vidSetCBUDRE(void(*copy_CB)(void))
{
    CB_UDR = copy_CB;
    211e:	20 b5       	in	r18, 0x20	; 32
    2120:	2f 77       	andi	r18, 0x7F	; 127
    2122:	20 bd       	out	0x20, r18	; 32
    2124:	20 b5       	in	r18, 0x20	; 32
    2126:	2f 7b       	andi	r18, 0xBF	; 191
    2128:	20 bd       	out	0x20, r18	; 32
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	aa 1f       	adc	r26, r26
    2134:	bb 1f       	adc	r27, r27
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	aa 1f       	adc	r26, r26
    213c:	bb 1f       	adc	r27, r27
    213e:	9c 01       	movw	r18, r24
    2140:	ad 01       	movw	r20, r26
    2142:	22 0f       	add	r18, r18
    2144:	33 1f       	adc	r19, r19
    2146:	44 1f       	adc	r20, r20
    2148:	55 1f       	adc	r21, r21
    214a:	22 0f       	add	r18, r18
    214c:	33 1f       	adc	r19, r19
    214e:	44 1f       	adc	r20, r20
    2150:	55 1f       	adc	r21, r21
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	72 e1       	ldi	r23, 0x12	; 18
    2156:	8a e7       	ldi	r24, 0x7A	; 122
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodsi4>
    215e:	21 50       	subi	r18, 0x01	; 1
    2160:	31 09       	sbc	r19, r1
    2162:	80 b5       	in	r24, 0x20	; 32
    2164:	82 60       	ori	r24, 0x02	; 2
    2166:	80 bd       	out	0x20, r24	; 32
    2168:	80 b5       	in	r24, 0x20	; 32
    216a:	84 60       	ori	r24, 0x04	; 4
    216c:	80 bd       	out	0x20, r24	; 32
    216e:	8a b1       	in	r24, 0x0a	; 10
    2170:	8b 7f       	andi	r24, 0xFB	; 251
    2172:	8a b9       	out	0x0a, r24	; 10
    2174:	80 b5       	in	r24, 0x20	; 32
    2176:	8f 7e       	andi	r24, 0xEF	; 239
    2178:	80 bd       	out	0x20, r24	; 32
    217a:	80 b5       	in	r24, 0x20	; 32
    217c:	8f 7d       	andi	r24, 0xDF	; 223
    217e:	80 bd       	out	0x20, r24	; 32
    2180:	80 b5       	in	r24, 0x20	; 32
    2182:	88 60       	ori	r24, 0x08	; 8
    2184:	80 bd       	out	0x20, r24	; 32
    2186:	8a b1       	in	r24, 0x0a	; 10
    2188:	88 60       	ori	r24, 0x08	; 8
    218a:	8a b9       	out	0x0a, r24	; 10
    218c:	8a b1       	in	r24, 0x0a	; 10
    218e:	80 61       	ori	r24, 0x10	; 16
    2190:	8a b9       	out	0x0a, r24	; 10
    2192:	80 b5       	in	r24, 0x20	; 32
    2194:	80 68       	ori	r24, 0x80	; 128
    2196:	80 bd       	out	0x20, r24	; 32
    2198:	30 bd       	out	0x20, r19	; 32
    219a:	29 b9       	out	0x09, r18	; 9
    219c:	08 95       	ret

0000219e <USART_vidSendByte>:
    219e:	5d 9b       	sbis	0x0b, 5	; 11
    21a0:	fe cf       	rjmp	.-4      	; 0x219e <USART_vidSendByte>
    21a2:	8c b9       	out	0x0c, r24	; 12
    21a4:	08 95       	ret

000021a6 <USART_u8RecieveByte>:
    21a6:	5f 9b       	sbis	0x0b, 7	; 11
    21a8:	fe cf       	rjmp	.-4      	; 0x21a6 <USART_u8RecieveByte>
    21aa:	8c b1       	in	r24, 0x0c	; 12
    21ac:	08 95       	ret

000021ae <USART_vidEnableTXInterrupt>:
    21ae:	8a b1       	in	r24, 0x0a	; 10
    21b0:	80 64       	ori	r24, 0x40	; 64
    21b2:	8a b9       	out	0x0a, r24	; 10
    21b4:	08 95       	ret

000021b6 <USART_vidEnableRXInterrupt>:
    21b6:	8a b1       	in	r24, 0x0a	; 10
    21b8:	80 68       	ori	r24, 0x80	; 128
    21ba:	8a b9       	out	0x0a, r24	; 10
    21bc:	08 95       	ret

000021be <USART_vidSendString>:
}

void USART_vidSendString(u8 *copy_ptrString)
{
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	ec 01       	movw	r28, r24
    while((*copy_ptrString) != '\0')
    21c4:	03 c0       	rjmp	.+6      	; 0x21cc <USART_vidSendString+0xe>
    {
        USART_vidSendByte(*copy_ptrString);
    21c6:	0e 94 cf 10 	call	0x219e	; 0x219e <USART_vidSendByte>
        copy_ptrString++;
    21ca:	21 96       	adiw	r28, 0x01	; 1
    CB_UDR = copy_CB;
}

void USART_vidSendString(u8 *copy_ptrString)
{
    while((*copy_ptrString) != '\0')
    21cc:	88 81       	ld	r24, Y
    21ce:	81 11       	cpse	r24, r1
    21d0:	fa cf       	rjmp	.-12     	; 0x21c6 <USART_vidSendString+0x8>
    {
        USART_vidSendByte(*copy_ptrString);
        copy_ptrString++;
    }
}
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	08 95       	ret

000021d8 <__subsf3>:
    21d8:	50 58       	subi	r21, 0x80	; 128

000021da <__addsf3>:
    21da:	bb 27       	eor	r27, r27
    21dc:	aa 27       	eor	r26, r26
    21de:	0e 94 04 11 	call	0x2208	; 0x2208 <__addsf3x>
    21e2:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__fp_round>
    21e6:	0e 94 ce 11 	call	0x239c	; 0x239c <__fp_pscA>
    21ea:	38 f0       	brcs	.+14     	; 0x21fa <__addsf3+0x20>
    21ec:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__fp_pscB>
    21f0:	20 f0       	brcs	.+8      	; 0x21fa <__addsf3+0x20>
    21f2:	39 f4       	brne	.+14     	; 0x2202 <__addsf3+0x28>
    21f4:	9f 3f       	cpi	r25, 0xFF	; 255
    21f6:	19 f4       	brne	.+6      	; 0x21fe <__addsf3+0x24>
    21f8:	26 f4       	brtc	.+8      	; 0x2202 <__addsf3+0x28>
    21fa:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__fp_nan>
    21fe:	0e f4       	brtc	.+2      	; 0x2202 <__addsf3+0x28>
    2200:	e0 95       	com	r30
    2202:	e7 fb       	bst	r30, 7
    2204:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__fp_inf>

00002208 <__addsf3x>:
    2208:	e9 2f       	mov	r30, r25
    220a:	0e 94 ed 11 	call	0x23da	; 0x23da <__fp_split3>
    220e:	58 f3       	brcs	.-42     	; 0x21e6 <__addsf3+0xc>
    2210:	ba 17       	cp	r27, r26
    2212:	62 07       	cpc	r22, r18
    2214:	73 07       	cpc	r23, r19
    2216:	84 07       	cpc	r24, r20
    2218:	95 07       	cpc	r25, r21
    221a:	20 f0       	brcs	.+8      	; 0x2224 <__addsf3x+0x1c>
    221c:	79 f4       	brne	.+30     	; 0x223c <__addsf3x+0x34>
    221e:	a6 f5       	brtc	.+104    	; 0x2288 <__addsf3x+0x80>
    2220:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__fp_zero>
    2224:	0e f4       	brtc	.+2      	; 0x2228 <__addsf3x+0x20>
    2226:	e0 95       	com	r30
    2228:	0b 2e       	mov	r0, r27
    222a:	ba 2f       	mov	r27, r26
    222c:	a0 2d       	mov	r26, r0
    222e:	0b 01       	movw	r0, r22
    2230:	b9 01       	movw	r22, r18
    2232:	90 01       	movw	r18, r0
    2234:	0c 01       	movw	r0, r24
    2236:	ca 01       	movw	r24, r20
    2238:	a0 01       	movw	r20, r0
    223a:	11 24       	eor	r1, r1
    223c:	ff 27       	eor	r31, r31
    223e:	59 1b       	sub	r21, r25
    2240:	99 f0       	breq	.+38     	; 0x2268 <__addsf3x+0x60>
    2242:	59 3f       	cpi	r21, 0xF9	; 249
    2244:	50 f4       	brcc	.+20     	; 0x225a <__addsf3x+0x52>
    2246:	50 3e       	cpi	r21, 0xE0	; 224
    2248:	68 f1       	brcs	.+90     	; 0x22a4 <__addsf3x+0x9c>
    224a:	1a 16       	cp	r1, r26
    224c:	f0 40       	sbci	r31, 0x00	; 0
    224e:	a2 2f       	mov	r26, r18
    2250:	23 2f       	mov	r18, r19
    2252:	34 2f       	mov	r19, r20
    2254:	44 27       	eor	r20, r20
    2256:	58 5f       	subi	r21, 0xF8	; 248
    2258:	f3 cf       	rjmp	.-26     	; 0x2240 <__addsf3x+0x38>
    225a:	46 95       	lsr	r20
    225c:	37 95       	ror	r19
    225e:	27 95       	ror	r18
    2260:	a7 95       	ror	r26
    2262:	f0 40       	sbci	r31, 0x00	; 0
    2264:	53 95       	inc	r21
    2266:	c9 f7       	brne	.-14     	; 0x225a <__addsf3x+0x52>
    2268:	7e f4       	brtc	.+30     	; 0x2288 <__addsf3x+0x80>
    226a:	1f 16       	cp	r1, r31
    226c:	ba 0b       	sbc	r27, r26
    226e:	62 0b       	sbc	r22, r18
    2270:	73 0b       	sbc	r23, r19
    2272:	84 0b       	sbc	r24, r20
    2274:	ba f0       	brmi	.+46     	; 0x22a4 <__addsf3x+0x9c>
    2276:	91 50       	subi	r25, 0x01	; 1
    2278:	a1 f0       	breq	.+40     	; 0x22a2 <__addsf3x+0x9a>
    227a:	ff 0f       	add	r31, r31
    227c:	bb 1f       	adc	r27, r27
    227e:	66 1f       	adc	r22, r22
    2280:	77 1f       	adc	r23, r23
    2282:	88 1f       	adc	r24, r24
    2284:	c2 f7       	brpl	.-16     	; 0x2276 <__addsf3x+0x6e>
    2286:	0e c0       	rjmp	.+28     	; 0x22a4 <__addsf3x+0x9c>
    2288:	ba 0f       	add	r27, r26
    228a:	62 1f       	adc	r22, r18
    228c:	73 1f       	adc	r23, r19
    228e:	84 1f       	adc	r24, r20
    2290:	48 f4       	brcc	.+18     	; 0x22a4 <__addsf3x+0x9c>
    2292:	87 95       	ror	r24
    2294:	77 95       	ror	r23
    2296:	67 95       	ror	r22
    2298:	b7 95       	ror	r27
    229a:	f7 95       	ror	r31
    229c:	9e 3f       	cpi	r25, 0xFE	; 254
    229e:	08 f0       	brcs	.+2      	; 0x22a2 <__addsf3x+0x9a>
    22a0:	b0 cf       	rjmp	.-160    	; 0x2202 <__addsf3+0x28>
    22a2:	93 95       	inc	r25
    22a4:	88 0f       	add	r24, r24
    22a6:	08 f0       	brcs	.+2      	; 0x22aa <__addsf3x+0xa2>
    22a8:	99 27       	eor	r25, r25
    22aa:	ee 0f       	add	r30, r30
    22ac:	97 95       	ror	r25
    22ae:	87 95       	ror	r24
    22b0:	08 95       	ret

000022b2 <__fixunssfsi>:
    22b2:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__fp_splitA>
    22b6:	88 f0       	brcs	.+34     	; 0x22da <__fixunssfsi+0x28>
    22b8:	9f 57       	subi	r25, 0x7F	; 127
    22ba:	98 f0       	brcs	.+38     	; 0x22e2 <__fixunssfsi+0x30>
    22bc:	b9 2f       	mov	r27, r25
    22be:	99 27       	eor	r25, r25
    22c0:	b7 51       	subi	r27, 0x17	; 23
    22c2:	b0 f0       	brcs	.+44     	; 0x22f0 <__fixunssfsi+0x3e>
    22c4:	e1 f0       	breq	.+56     	; 0x22fe <__fixunssfsi+0x4c>
    22c6:	66 0f       	add	r22, r22
    22c8:	77 1f       	adc	r23, r23
    22ca:	88 1f       	adc	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	1a f0       	brmi	.+6      	; 0x22d6 <__fixunssfsi+0x24>
    22d0:	ba 95       	dec	r27
    22d2:	c9 f7       	brne	.-14     	; 0x22c6 <__fixunssfsi+0x14>
    22d4:	14 c0       	rjmp	.+40     	; 0x22fe <__fixunssfsi+0x4c>
    22d6:	b1 30       	cpi	r27, 0x01	; 1
    22d8:	91 f0       	breq	.+36     	; 0x22fe <__fixunssfsi+0x4c>
    22da:	0e 94 0f 12 	call	0x241e	; 0x241e <__fp_zero>
    22de:	b1 e0       	ldi	r27, 0x01	; 1
    22e0:	08 95       	ret
    22e2:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__fp_zero>
    22e6:	67 2f       	mov	r22, r23
    22e8:	78 2f       	mov	r23, r24
    22ea:	88 27       	eor	r24, r24
    22ec:	b8 5f       	subi	r27, 0xF8	; 248
    22ee:	39 f0       	breq	.+14     	; 0x22fe <__fixunssfsi+0x4c>
    22f0:	b9 3f       	cpi	r27, 0xF9	; 249
    22f2:	cc f3       	brlt	.-14     	; 0x22e6 <__fixunssfsi+0x34>
    22f4:	86 95       	lsr	r24
    22f6:	77 95       	ror	r23
    22f8:	67 95       	ror	r22
    22fa:	b3 95       	inc	r27
    22fc:	d9 f7       	brne	.-10     	; 0x22f4 <__fixunssfsi+0x42>
    22fe:	3e f4       	brtc	.+14     	; 0x230e <__fixunssfsi+0x5c>
    2300:	90 95       	com	r25
    2302:	80 95       	com	r24
    2304:	70 95       	com	r23
    2306:	61 95       	neg	r22
    2308:	7f 4f       	sbci	r23, 0xFF	; 255
    230a:	8f 4f       	sbci	r24, 0xFF	; 255
    230c:	9f 4f       	sbci	r25, 0xFF	; 255
    230e:	08 95       	ret

00002310 <__floatunsisf>:
    2310:	e8 94       	clt
    2312:	09 c0       	rjmp	.+18     	; 0x2326 <__floatsisf+0x12>

00002314 <__floatsisf>:
    2314:	97 fb       	bst	r25, 7
    2316:	3e f4       	brtc	.+14     	; 0x2326 <__floatsisf+0x12>
    2318:	90 95       	com	r25
    231a:	80 95       	com	r24
    231c:	70 95       	com	r23
    231e:	61 95       	neg	r22
    2320:	7f 4f       	sbci	r23, 0xFF	; 255
    2322:	8f 4f       	sbci	r24, 0xFF	; 255
    2324:	9f 4f       	sbci	r25, 0xFF	; 255
    2326:	99 23       	and	r25, r25
    2328:	a9 f0       	breq	.+42     	; 0x2354 <__floatsisf+0x40>
    232a:	f9 2f       	mov	r31, r25
    232c:	96 e9       	ldi	r25, 0x96	; 150
    232e:	bb 27       	eor	r27, r27
    2330:	93 95       	inc	r25
    2332:	f6 95       	lsr	r31
    2334:	87 95       	ror	r24
    2336:	77 95       	ror	r23
    2338:	67 95       	ror	r22
    233a:	b7 95       	ror	r27
    233c:	f1 11       	cpse	r31, r1
    233e:	f8 cf       	rjmp	.-16     	; 0x2330 <__floatsisf+0x1c>
    2340:	fa f4       	brpl	.+62     	; 0x2380 <__floatsisf+0x6c>
    2342:	bb 0f       	add	r27, r27
    2344:	11 f4       	brne	.+4      	; 0x234a <__floatsisf+0x36>
    2346:	60 ff       	sbrs	r22, 0
    2348:	1b c0       	rjmp	.+54     	; 0x2380 <__floatsisf+0x6c>
    234a:	6f 5f       	subi	r22, 0xFF	; 255
    234c:	7f 4f       	sbci	r23, 0xFF	; 255
    234e:	8f 4f       	sbci	r24, 0xFF	; 255
    2350:	9f 4f       	sbci	r25, 0xFF	; 255
    2352:	16 c0       	rjmp	.+44     	; 0x2380 <__floatsisf+0x6c>
    2354:	88 23       	and	r24, r24
    2356:	11 f0       	breq	.+4      	; 0x235c <__floatsisf+0x48>
    2358:	96 e9       	ldi	r25, 0x96	; 150
    235a:	11 c0       	rjmp	.+34     	; 0x237e <__floatsisf+0x6a>
    235c:	77 23       	and	r23, r23
    235e:	21 f0       	breq	.+8      	; 0x2368 <__floatsisf+0x54>
    2360:	9e e8       	ldi	r25, 0x8E	; 142
    2362:	87 2f       	mov	r24, r23
    2364:	76 2f       	mov	r23, r22
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <__floatsisf+0x5e>
    2368:	66 23       	and	r22, r22
    236a:	71 f0       	breq	.+28     	; 0x2388 <__floatsisf+0x74>
    236c:	96 e8       	ldi	r25, 0x86	; 134
    236e:	86 2f       	mov	r24, r22
    2370:	70 e0       	ldi	r23, 0x00	; 0
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	2a f0       	brmi	.+10     	; 0x2380 <__floatsisf+0x6c>
    2376:	9a 95       	dec	r25
    2378:	66 0f       	add	r22, r22
    237a:	77 1f       	adc	r23, r23
    237c:	88 1f       	adc	r24, r24
    237e:	da f7       	brpl	.-10     	; 0x2376 <__floatsisf+0x62>
    2380:	88 0f       	add	r24, r24
    2382:	96 95       	lsr	r25
    2384:	87 95       	ror	r24
    2386:	97 f9       	bld	r25, 7
    2388:	08 95       	ret

0000238a <__fp_inf>:
    238a:	97 f9       	bld	r25, 7
    238c:	9f 67       	ori	r25, 0x7F	; 127
    238e:	80 e8       	ldi	r24, 0x80	; 128
    2390:	70 e0       	ldi	r23, 0x00	; 0
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	08 95       	ret

00002396 <__fp_nan>:
    2396:	9f ef       	ldi	r25, 0xFF	; 255
    2398:	80 ec       	ldi	r24, 0xC0	; 192
    239a:	08 95       	ret

0000239c <__fp_pscA>:
    239c:	00 24       	eor	r0, r0
    239e:	0a 94       	dec	r0
    23a0:	16 16       	cp	r1, r22
    23a2:	17 06       	cpc	r1, r23
    23a4:	18 06       	cpc	r1, r24
    23a6:	09 06       	cpc	r0, r25
    23a8:	08 95       	ret

000023aa <__fp_pscB>:
    23aa:	00 24       	eor	r0, r0
    23ac:	0a 94       	dec	r0
    23ae:	12 16       	cp	r1, r18
    23b0:	13 06       	cpc	r1, r19
    23b2:	14 06       	cpc	r1, r20
    23b4:	05 06       	cpc	r0, r21
    23b6:	08 95       	ret

000023b8 <__fp_round>:
    23b8:	09 2e       	mov	r0, r25
    23ba:	03 94       	inc	r0
    23bc:	00 0c       	add	r0, r0
    23be:	11 f4       	brne	.+4      	; 0x23c4 <__fp_round+0xc>
    23c0:	88 23       	and	r24, r24
    23c2:	52 f0       	brmi	.+20     	; 0x23d8 <__fp_round+0x20>
    23c4:	bb 0f       	add	r27, r27
    23c6:	40 f4       	brcc	.+16     	; 0x23d8 <__fp_round+0x20>
    23c8:	bf 2b       	or	r27, r31
    23ca:	11 f4       	brne	.+4      	; 0x23d0 <__fp_round+0x18>
    23cc:	60 ff       	sbrs	r22, 0
    23ce:	04 c0       	rjmp	.+8      	; 0x23d8 <__fp_round+0x20>
    23d0:	6f 5f       	subi	r22, 0xFF	; 255
    23d2:	7f 4f       	sbci	r23, 0xFF	; 255
    23d4:	8f 4f       	sbci	r24, 0xFF	; 255
    23d6:	9f 4f       	sbci	r25, 0xFF	; 255
    23d8:	08 95       	ret

000023da <__fp_split3>:
    23da:	57 fd       	sbrc	r21, 7
    23dc:	90 58       	subi	r25, 0x80	; 128
    23de:	44 0f       	add	r20, r20
    23e0:	55 1f       	adc	r21, r21
    23e2:	59 f0       	breq	.+22     	; 0x23fa <__fp_splitA+0x10>
    23e4:	5f 3f       	cpi	r21, 0xFF	; 255
    23e6:	71 f0       	breq	.+28     	; 0x2404 <__fp_splitA+0x1a>
    23e8:	47 95       	ror	r20

000023ea <__fp_splitA>:
    23ea:	88 0f       	add	r24, r24
    23ec:	97 fb       	bst	r25, 7
    23ee:	99 1f       	adc	r25, r25
    23f0:	61 f0       	breq	.+24     	; 0x240a <__fp_splitA+0x20>
    23f2:	9f 3f       	cpi	r25, 0xFF	; 255
    23f4:	79 f0       	breq	.+30     	; 0x2414 <__fp_splitA+0x2a>
    23f6:	87 95       	ror	r24
    23f8:	08 95       	ret
    23fa:	12 16       	cp	r1, r18
    23fc:	13 06       	cpc	r1, r19
    23fe:	14 06       	cpc	r1, r20
    2400:	55 1f       	adc	r21, r21
    2402:	f2 cf       	rjmp	.-28     	; 0x23e8 <__fp_split3+0xe>
    2404:	46 95       	lsr	r20
    2406:	f1 df       	rcall	.-30     	; 0x23ea <__fp_splitA>
    2408:	08 c0       	rjmp	.+16     	; 0x241a <__fp_splitA+0x30>
    240a:	16 16       	cp	r1, r22
    240c:	17 06       	cpc	r1, r23
    240e:	18 06       	cpc	r1, r24
    2410:	99 1f       	adc	r25, r25
    2412:	f1 cf       	rjmp	.-30     	; 0x23f6 <__fp_splitA+0xc>
    2414:	86 95       	lsr	r24
    2416:	71 05       	cpc	r23, r1
    2418:	61 05       	cpc	r22, r1
    241a:	08 94       	sec
    241c:	08 95       	ret

0000241e <__fp_zero>:
    241e:	e8 94       	clt

00002420 <__fp_szero>:
    2420:	bb 27       	eor	r27, r27
    2422:	66 27       	eor	r22, r22
    2424:	77 27       	eor	r23, r23
    2426:	cb 01       	movw	r24, r22
    2428:	97 f9       	bld	r25, 7
    242a:	08 95       	ret

0000242c <__mulsf3>:
    242c:	0e 94 29 12 	call	0x2452	; 0x2452 <__mulsf3x>
    2430:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__fp_round>
    2434:	0e 94 ce 11 	call	0x239c	; 0x239c <__fp_pscA>
    2438:	38 f0       	brcs	.+14     	; 0x2448 <__mulsf3+0x1c>
    243a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__fp_pscB>
    243e:	20 f0       	brcs	.+8      	; 0x2448 <__mulsf3+0x1c>
    2440:	95 23       	and	r25, r21
    2442:	11 f0       	breq	.+4      	; 0x2448 <__mulsf3+0x1c>
    2444:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__fp_inf>
    2448:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__fp_nan>
    244c:	11 24       	eor	r1, r1
    244e:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__fp_szero>

00002452 <__mulsf3x>:
    2452:	0e 94 ed 11 	call	0x23da	; 0x23da <__fp_split3>
    2456:	70 f3       	brcs	.-36     	; 0x2434 <__mulsf3+0x8>

00002458 <__mulsf3_pse>:
    2458:	95 9f       	mul	r25, r21
    245a:	c1 f3       	breq	.-16     	; 0x244c <__mulsf3+0x20>
    245c:	95 0f       	add	r25, r21
    245e:	50 e0       	ldi	r21, 0x00	; 0
    2460:	55 1f       	adc	r21, r21
    2462:	62 9f       	mul	r22, r18
    2464:	f0 01       	movw	r30, r0
    2466:	72 9f       	mul	r23, r18
    2468:	bb 27       	eor	r27, r27
    246a:	f0 0d       	add	r31, r0
    246c:	b1 1d       	adc	r27, r1
    246e:	63 9f       	mul	r22, r19
    2470:	aa 27       	eor	r26, r26
    2472:	f0 0d       	add	r31, r0
    2474:	b1 1d       	adc	r27, r1
    2476:	aa 1f       	adc	r26, r26
    2478:	64 9f       	mul	r22, r20
    247a:	66 27       	eor	r22, r22
    247c:	b0 0d       	add	r27, r0
    247e:	a1 1d       	adc	r26, r1
    2480:	66 1f       	adc	r22, r22
    2482:	82 9f       	mul	r24, r18
    2484:	22 27       	eor	r18, r18
    2486:	b0 0d       	add	r27, r0
    2488:	a1 1d       	adc	r26, r1
    248a:	62 1f       	adc	r22, r18
    248c:	73 9f       	mul	r23, r19
    248e:	b0 0d       	add	r27, r0
    2490:	a1 1d       	adc	r26, r1
    2492:	62 1f       	adc	r22, r18
    2494:	83 9f       	mul	r24, r19
    2496:	a0 0d       	add	r26, r0
    2498:	61 1d       	adc	r22, r1
    249a:	22 1f       	adc	r18, r18
    249c:	74 9f       	mul	r23, r20
    249e:	33 27       	eor	r19, r19
    24a0:	a0 0d       	add	r26, r0
    24a2:	61 1d       	adc	r22, r1
    24a4:	23 1f       	adc	r18, r19
    24a6:	84 9f       	mul	r24, r20
    24a8:	60 0d       	add	r22, r0
    24aa:	21 1d       	adc	r18, r1
    24ac:	82 2f       	mov	r24, r18
    24ae:	76 2f       	mov	r23, r22
    24b0:	6a 2f       	mov	r22, r26
    24b2:	11 24       	eor	r1, r1
    24b4:	9f 57       	subi	r25, 0x7F	; 127
    24b6:	50 40       	sbci	r21, 0x00	; 0
    24b8:	9a f0       	brmi	.+38     	; 0x24e0 <__mulsf3_pse+0x88>
    24ba:	f1 f0       	breq	.+60     	; 0x24f8 <__mulsf3_pse+0xa0>
    24bc:	88 23       	and	r24, r24
    24be:	4a f0       	brmi	.+18     	; 0x24d2 <__mulsf3_pse+0x7a>
    24c0:	ee 0f       	add	r30, r30
    24c2:	ff 1f       	adc	r31, r31
    24c4:	bb 1f       	adc	r27, r27
    24c6:	66 1f       	adc	r22, r22
    24c8:	77 1f       	adc	r23, r23
    24ca:	88 1f       	adc	r24, r24
    24cc:	91 50       	subi	r25, 0x01	; 1
    24ce:	50 40       	sbci	r21, 0x00	; 0
    24d0:	a9 f7       	brne	.-22     	; 0x24bc <__mulsf3_pse+0x64>
    24d2:	9e 3f       	cpi	r25, 0xFE	; 254
    24d4:	51 05       	cpc	r21, r1
    24d6:	80 f0       	brcs	.+32     	; 0x24f8 <__mulsf3_pse+0xa0>
    24d8:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__fp_inf>
    24dc:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__fp_szero>
    24e0:	5f 3f       	cpi	r21, 0xFF	; 255
    24e2:	e4 f3       	brlt	.-8      	; 0x24dc <__mulsf3_pse+0x84>
    24e4:	98 3e       	cpi	r25, 0xE8	; 232
    24e6:	d4 f3       	brlt	.-12     	; 0x24dc <__mulsf3_pse+0x84>
    24e8:	86 95       	lsr	r24
    24ea:	77 95       	ror	r23
    24ec:	67 95       	ror	r22
    24ee:	b7 95       	ror	r27
    24f0:	f7 95       	ror	r31
    24f2:	e7 95       	ror	r30
    24f4:	9f 5f       	subi	r25, 0xFF	; 255
    24f6:	c1 f7       	brne	.-16     	; 0x24e8 <__mulsf3_pse+0x90>
    24f8:	fe 2b       	or	r31, r30
    24fa:	88 0f       	add	r24, r24
    24fc:	91 1d       	adc	r25, r1
    24fe:	96 95       	lsr	r25
    2500:	87 95       	ror	r24
    2502:	97 f9       	bld	r25, 7
    2504:	08 95       	ret

00002506 <__udivmodsi4>:
    2506:	a1 e2       	ldi	r26, 0x21	; 33
    2508:	1a 2e       	mov	r1, r26
    250a:	aa 1b       	sub	r26, r26
    250c:	bb 1b       	sub	r27, r27
    250e:	fd 01       	movw	r30, r26
    2510:	0d c0       	rjmp	.+26     	; 0x252c <__udivmodsi4_ep>

00002512 <__udivmodsi4_loop>:
    2512:	aa 1f       	adc	r26, r26
    2514:	bb 1f       	adc	r27, r27
    2516:	ee 1f       	adc	r30, r30
    2518:	ff 1f       	adc	r31, r31
    251a:	a2 17       	cp	r26, r18
    251c:	b3 07       	cpc	r27, r19
    251e:	e4 07       	cpc	r30, r20
    2520:	f5 07       	cpc	r31, r21
    2522:	20 f0       	brcs	.+8      	; 0x252c <__udivmodsi4_ep>
    2524:	a2 1b       	sub	r26, r18
    2526:	b3 0b       	sbc	r27, r19
    2528:	e4 0b       	sbc	r30, r20
    252a:	f5 0b       	sbc	r31, r21

0000252c <__udivmodsi4_ep>:
    252c:	66 1f       	adc	r22, r22
    252e:	77 1f       	adc	r23, r23
    2530:	88 1f       	adc	r24, r24
    2532:	99 1f       	adc	r25, r25
    2534:	1a 94       	dec	r1
    2536:	69 f7       	brne	.-38     	; 0x2512 <__udivmodsi4_loop>
    2538:	60 95       	com	r22
    253a:	70 95       	com	r23
    253c:	80 95       	com	r24
    253e:	90 95       	com	r25
    2540:	9b 01       	movw	r18, r22
    2542:	ac 01       	movw	r20, r24
    2544:	bd 01       	movw	r22, r26
    2546:	cf 01       	movw	r24, r30
    2548:	08 95       	ret

0000254a <__tablejump2__>:
    254a:	ee 0f       	add	r30, r30
    254c:	ff 1f       	adc	r31, r31
    254e:	05 90       	lpm	r0, Z+
    2550:	f4 91       	lpm	r31, Z
    2552:	e0 2d       	mov	r30, r0
    2554:	09 94       	ijmp

00002556 <sprintf>:
    2556:	ae e0       	ldi	r26, 0x0E	; 14
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e1 eb       	ldi	r30, 0xB1	; 177
    255c:	f2 e1       	ldi	r31, 0x12	; 18
    255e:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <__prologue_saves__+0x1c>
    2562:	0d 89       	ldd	r16, Y+21	; 0x15
    2564:	1e 89       	ldd	r17, Y+22	; 0x16
    2566:	86 e0       	ldi	r24, 0x06	; 6
    2568:	8c 83       	std	Y+4, r24	; 0x04
    256a:	1a 83       	std	Y+2, r17	; 0x02
    256c:	09 83       	std	Y+1, r16	; 0x01
    256e:	8f ef       	ldi	r24, 0xFF	; 255
    2570:	9f e7       	ldi	r25, 0x7F	; 127
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
    2576:	ae 01       	movw	r20, r28
    2578:	47 5e       	subi	r20, 0xE7	; 231
    257a:	5f 4f       	sbci	r21, 0xFF	; 255
    257c:	6f 89       	ldd	r22, Y+23	; 0x17
    257e:	78 8d       	ldd	r23, Y+24	; 0x18
    2580:	ce 01       	movw	r24, r28
    2582:	01 96       	adiw	r24, 0x01	; 1
    2584:	0e 94 cd 12 	call	0x259a	; 0x259a <vfprintf>
    2588:	ef 81       	ldd	r30, Y+7	; 0x07
    258a:	f8 85       	ldd	r31, Y+8	; 0x08
    258c:	e0 0f       	add	r30, r16
    258e:	f1 1f       	adc	r31, r17
    2590:	10 82       	st	Z, r1
    2592:	2e 96       	adiw	r28, 0x0e	; 14
    2594:	e4 e0       	ldi	r30, 0x04	; 4
    2596:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <__epilogue_restores__+0x1c>

0000259a <vfprintf>:
    259a:	ab e0       	ldi	r26, 0x0B	; 11
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e3 ed       	ldi	r30, 0xD3	; 211
    25a0:	f2 e1       	ldi	r31, 0x12	; 18
    25a2:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__prologue_saves__>
    25a6:	6c 01       	movw	r12, r24
    25a8:	7b 01       	movw	r14, r22
    25aa:	8a 01       	movw	r16, r20
    25ac:	fc 01       	movw	r30, r24
    25ae:	17 82       	std	Z+7, r1	; 0x07
    25b0:	16 82       	std	Z+6, r1	; 0x06
    25b2:	83 81       	ldd	r24, Z+3	; 0x03
    25b4:	81 ff       	sbrs	r24, 1
    25b6:	cc c1       	rjmp	.+920    	; 0x2950 <vfprintf+0x3b6>
    25b8:	ce 01       	movw	r24, r28
    25ba:	01 96       	adiw	r24, 0x01	; 1
    25bc:	3c 01       	movw	r6, r24
    25be:	f6 01       	movw	r30, r12
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	f7 01       	movw	r30, r14
    25c4:	93 fd       	sbrc	r25, 3
    25c6:	85 91       	lpm	r24, Z+
    25c8:	93 ff       	sbrs	r25, 3
    25ca:	81 91       	ld	r24, Z+
    25cc:	7f 01       	movw	r14, r30
    25ce:	88 23       	and	r24, r24
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <vfprintf+0x3a>
    25d2:	ba c1       	rjmp	.+884    	; 0x2948 <vfprintf+0x3ae>
    25d4:	85 32       	cpi	r24, 0x25	; 37
    25d6:	39 f4       	brne	.+14     	; 0x25e6 <vfprintf+0x4c>
    25d8:	93 fd       	sbrc	r25, 3
    25da:	85 91       	lpm	r24, Z+
    25dc:	93 ff       	sbrs	r25, 3
    25de:	81 91       	ld	r24, Z+
    25e0:	7f 01       	movw	r14, r30
    25e2:	85 32       	cpi	r24, 0x25	; 37
    25e4:	29 f4       	brne	.+10     	; 0x25f0 <vfprintf+0x56>
    25e6:	b6 01       	movw	r22, r12
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0e 94 c4 14 	call	0x2988	; 0x2988 <fputc>
    25ee:	e7 cf       	rjmp	.-50     	; 0x25be <vfprintf+0x24>
    25f0:	91 2c       	mov	r9, r1
    25f2:	21 2c       	mov	r2, r1
    25f4:	31 2c       	mov	r3, r1
    25f6:	ff e1       	ldi	r31, 0x1F	; 31
    25f8:	f3 15       	cp	r31, r3
    25fa:	d8 f0       	brcs	.+54     	; 0x2632 <vfprintf+0x98>
    25fc:	8b 32       	cpi	r24, 0x2B	; 43
    25fe:	79 f0       	breq	.+30     	; 0x261e <vfprintf+0x84>
    2600:	38 f4       	brcc	.+14     	; 0x2610 <vfprintf+0x76>
    2602:	80 32       	cpi	r24, 0x20	; 32
    2604:	79 f0       	breq	.+30     	; 0x2624 <vfprintf+0x8a>
    2606:	83 32       	cpi	r24, 0x23	; 35
    2608:	a1 f4       	brne	.+40     	; 0x2632 <vfprintf+0x98>
    260a:	23 2d       	mov	r18, r3
    260c:	20 61       	ori	r18, 0x10	; 16
    260e:	1d c0       	rjmp	.+58     	; 0x264a <vfprintf+0xb0>
    2610:	8d 32       	cpi	r24, 0x2D	; 45
    2612:	61 f0       	breq	.+24     	; 0x262c <vfprintf+0x92>
    2614:	80 33       	cpi	r24, 0x30	; 48
    2616:	69 f4       	brne	.+26     	; 0x2632 <vfprintf+0x98>
    2618:	23 2d       	mov	r18, r3
    261a:	21 60       	ori	r18, 0x01	; 1
    261c:	16 c0       	rjmp	.+44     	; 0x264a <vfprintf+0xb0>
    261e:	83 2d       	mov	r24, r3
    2620:	82 60       	ori	r24, 0x02	; 2
    2622:	38 2e       	mov	r3, r24
    2624:	e3 2d       	mov	r30, r3
    2626:	e4 60       	ori	r30, 0x04	; 4
    2628:	3e 2e       	mov	r3, r30
    262a:	2a c0       	rjmp	.+84     	; 0x2680 <vfprintf+0xe6>
    262c:	f3 2d       	mov	r31, r3
    262e:	f8 60       	ori	r31, 0x08	; 8
    2630:	1d c0       	rjmp	.+58     	; 0x266c <vfprintf+0xd2>
    2632:	37 fc       	sbrc	r3, 7
    2634:	2d c0       	rjmp	.+90     	; 0x2690 <vfprintf+0xf6>
    2636:	20 ed       	ldi	r18, 0xD0	; 208
    2638:	28 0f       	add	r18, r24
    263a:	2a 30       	cpi	r18, 0x0A	; 10
    263c:	40 f0       	brcs	.+16     	; 0x264e <vfprintf+0xb4>
    263e:	8e 32       	cpi	r24, 0x2E	; 46
    2640:	b9 f4       	brne	.+46     	; 0x2670 <vfprintf+0xd6>
    2642:	36 fc       	sbrc	r3, 6
    2644:	81 c1       	rjmp	.+770    	; 0x2948 <vfprintf+0x3ae>
    2646:	23 2d       	mov	r18, r3
    2648:	20 64       	ori	r18, 0x40	; 64
    264a:	32 2e       	mov	r3, r18
    264c:	19 c0       	rjmp	.+50     	; 0x2680 <vfprintf+0xe6>
    264e:	36 fe       	sbrs	r3, 6
    2650:	06 c0       	rjmp	.+12     	; 0x265e <vfprintf+0xc4>
    2652:	8a e0       	ldi	r24, 0x0A	; 10
    2654:	98 9e       	mul	r9, r24
    2656:	20 0d       	add	r18, r0
    2658:	11 24       	eor	r1, r1
    265a:	92 2e       	mov	r9, r18
    265c:	11 c0       	rjmp	.+34     	; 0x2680 <vfprintf+0xe6>
    265e:	ea e0       	ldi	r30, 0x0A	; 10
    2660:	2e 9e       	mul	r2, r30
    2662:	20 0d       	add	r18, r0
    2664:	11 24       	eor	r1, r1
    2666:	22 2e       	mov	r2, r18
    2668:	f3 2d       	mov	r31, r3
    266a:	f0 62       	ori	r31, 0x20	; 32
    266c:	3f 2e       	mov	r3, r31
    266e:	08 c0       	rjmp	.+16     	; 0x2680 <vfprintf+0xe6>
    2670:	8c 36       	cpi	r24, 0x6C	; 108
    2672:	21 f4       	brne	.+8      	; 0x267c <vfprintf+0xe2>
    2674:	83 2d       	mov	r24, r3
    2676:	80 68       	ori	r24, 0x80	; 128
    2678:	38 2e       	mov	r3, r24
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <vfprintf+0xe6>
    267c:	88 36       	cpi	r24, 0x68	; 104
    267e:	41 f4       	brne	.+16     	; 0x2690 <vfprintf+0xf6>
    2680:	f7 01       	movw	r30, r14
    2682:	93 fd       	sbrc	r25, 3
    2684:	85 91       	lpm	r24, Z+
    2686:	93 ff       	sbrs	r25, 3
    2688:	81 91       	ld	r24, Z+
    268a:	7f 01       	movw	r14, r30
    268c:	81 11       	cpse	r24, r1
    268e:	b3 cf       	rjmp	.-154    	; 0x25f6 <vfprintf+0x5c>
    2690:	98 2f       	mov	r25, r24
    2692:	9f 7d       	andi	r25, 0xDF	; 223
    2694:	95 54       	subi	r25, 0x45	; 69
    2696:	93 30       	cpi	r25, 0x03	; 3
    2698:	28 f4       	brcc	.+10     	; 0x26a4 <vfprintf+0x10a>
    269a:	0c 5f       	subi	r16, 0xFC	; 252
    269c:	1f 4f       	sbci	r17, 0xFF	; 255
    269e:	9f e3       	ldi	r25, 0x3F	; 63
    26a0:	99 83       	std	Y+1, r25	; 0x01
    26a2:	0d c0       	rjmp	.+26     	; 0x26be <vfprintf+0x124>
    26a4:	83 36       	cpi	r24, 0x63	; 99
    26a6:	31 f0       	breq	.+12     	; 0x26b4 <vfprintf+0x11a>
    26a8:	83 37       	cpi	r24, 0x73	; 115
    26aa:	71 f0       	breq	.+28     	; 0x26c8 <vfprintf+0x12e>
    26ac:	83 35       	cpi	r24, 0x53	; 83
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <vfprintf+0x118>
    26b0:	59 c0       	rjmp	.+178    	; 0x2764 <vfprintf+0x1ca>
    26b2:	21 c0       	rjmp	.+66     	; 0x26f6 <vfprintf+0x15c>
    26b4:	f8 01       	movw	r30, r16
    26b6:	80 81       	ld	r24, Z
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	0e 5f       	subi	r16, 0xFE	; 254
    26bc:	1f 4f       	sbci	r17, 0xFF	; 255
    26be:	88 24       	eor	r8, r8
    26c0:	83 94       	inc	r8
    26c2:	91 2c       	mov	r9, r1
    26c4:	53 01       	movw	r10, r6
    26c6:	13 c0       	rjmp	.+38     	; 0x26ee <vfprintf+0x154>
    26c8:	28 01       	movw	r4, r16
    26ca:	f2 e0       	ldi	r31, 0x02	; 2
    26cc:	4f 0e       	add	r4, r31
    26ce:	51 1c       	adc	r5, r1
    26d0:	f8 01       	movw	r30, r16
    26d2:	a0 80       	ld	r10, Z
    26d4:	b1 80       	ldd	r11, Z+1	; 0x01
    26d6:	36 fe       	sbrs	r3, 6
    26d8:	03 c0       	rjmp	.+6      	; 0x26e0 <vfprintf+0x146>
    26da:	69 2d       	mov	r22, r9
    26dc:	70 e0       	ldi	r23, 0x00	; 0
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <vfprintf+0x14a>
    26e0:	6f ef       	ldi	r22, 0xFF	; 255
    26e2:	7f ef       	ldi	r23, 0xFF	; 255
    26e4:	c5 01       	movw	r24, r10
    26e6:	0e 94 b9 14 	call	0x2972	; 0x2972 <strnlen>
    26ea:	4c 01       	movw	r8, r24
    26ec:	82 01       	movw	r16, r4
    26ee:	f3 2d       	mov	r31, r3
    26f0:	ff 77       	andi	r31, 0x7F	; 127
    26f2:	3f 2e       	mov	r3, r31
    26f4:	16 c0       	rjmp	.+44     	; 0x2722 <vfprintf+0x188>
    26f6:	28 01       	movw	r4, r16
    26f8:	22 e0       	ldi	r18, 0x02	; 2
    26fa:	42 0e       	add	r4, r18
    26fc:	51 1c       	adc	r5, r1
    26fe:	f8 01       	movw	r30, r16
    2700:	a0 80       	ld	r10, Z
    2702:	b1 80       	ldd	r11, Z+1	; 0x01
    2704:	36 fe       	sbrs	r3, 6
    2706:	03 c0       	rjmp	.+6      	; 0x270e <vfprintf+0x174>
    2708:	69 2d       	mov	r22, r9
    270a:	70 e0       	ldi	r23, 0x00	; 0
    270c:	02 c0       	rjmp	.+4      	; 0x2712 <vfprintf+0x178>
    270e:	6f ef       	ldi	r22, 0xFF	; 255
    2710:	7f ef       	ldi	r23, 0xFF	; 255
    2712:	c5 01       	movw	r24, r10
    2714:	0e 94 ae 14 	call	0x295c	; 0x295c <strnlen_P>
    2718:	4c 01       	movw	r8, r24
    271a:	f3 2d       	mov	r31, r3
    271c:	f0 68       	ori	r31, 0x80	; 128
    271e:	3f 2e       	mov	r3, r31
    2720:	82 01       	movw	r16, r4
    2722:	33 fc       	sbrc	r3, 3
    2724:	1b c0       	rjmp	.+54     	; 0x275c <vfprintf+0x1c2>
    2726:	82 2d       	mov	r24, r2
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	88 16       	cp	r8, r24
    272c:	99 06       	cpc	r9, r25
    272e:	b0 f4       	brcc	.+44     	; 0x275c <vfprintf+0x1c2>
    2730:	b6 01       	movw	r22, r12
    2732:	80 e2       	ldi	r24, 0x20	; 32
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 94 c4 14 	call	0x2988	; 0x2988 <fputc>
    273a:	2a 94       	dec	r2
    273c:	f4 cf       	rjmp	.-24     	; 0x2726 <vfprintf+0x18c>
    273e:	f5 01       	movw	r30, r10
    2740:	37 fc       	sbrc	r3, 7
    2742:	85 91       	lpm	r24, Z+
    2744:	37 fe       	sbrs	r3, 7
    2746:	81 91       	ld	r24, Z+
    2748:	5f 01       	movw	r10, r30
    274a:	b6 01       	movw	r22, r12
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 c4 14 	call	0x2988	; 0x2988 <fputc>
    2752:	21 10       	cpse	r2, r1
    2754:	2a 94       	dec	r2
    2756:	21 e0       	ldi	r18, 0x01	; 1
    2758:	82 1a       	sub	r8, r18
    275a:	91 08       	sbc	r9, r1
    275c:	81 14       	cp	r8, r1
    275e:	91 04       	cpc	r9, r1
    2760:	71 f7       	brne	.-36     	; 0x273e <vfprintf+0x1a4>
    2762:	e8 c0       	rjmp	.+464    	; 0x2934 <vfprintf+0x39a>
    2764:	84 36       	cpi	r24, 0x64	; 100
    2766:	11 f0       	breq	.+4      	; 0x276c <vfprintf+0x1d2>
    2768:	89 36       	cpi	r24, 0x69	; 105
    276a:	41 f5       	brne	.+80     	; 0x27bc <vfprintf+0x222>
    276c:	f8 01       	movw	r30, r16
    276e:	37 fe       	sbrs	r3, 7
    2770:	07 c0       	rjmp	.+14     	; 0x2780 <vfprintf+0x1e6>
    2772:	60 81       	ld	r22, Z
    2774:	71 81       	ldd	r23, Z+1	; 0x01
    2776:	82 81       	ldd	r24, Z+2	; 0x02
    2778:	93 81       	ldd	r25, Z+3	; 0x03
    277a:	0c 5f       	subi	r16, 0xFC	; 252
    277c:	1f 4f       	sbci	r17, 0xFF	; 255
    277e:	08 c0       	rjmp	.+16     	; 0x2790 <vfprintf+0x1f6>
    2780:	60 81       	ld	r22, Z
    2782:	71 81       	ldd	r23, Z+1	; 0x01
    2784:	07 2e       	mov	r0, r23
    2786:	00 0c       	add	r0, r0
    2788:	88 0b       	sbc	r24, r24
    278a:	99 0b       	sbc	r25, r25
    278c:	0e 5f       	subi	r16, 0xFE	; 254
    278e:	1f 4f       	sbci	r17, 0xFF	; 255
    2790:	f3 2d       	mov	r31, r3
    2792:	ff 76       	andi	r31, 0x6F	; 111
    2794:	3f 2e       	mov	r3, r31
    2796:	97 ff       	sbrs	r25, 7
    2798:	09 c0       	rjmp	.+18     	; 0x27ac <vfprintf+0x212>
    279a:	90 95       	com	r25
    279c:	80 95       	com	r24
    279e:	70 95       	com	r23
    27a0:	61 95       	neg	r22
    27a2:	7f 4f       	sbci	r23, 0xFF	; 255
    27a4:	8f 4f       	sbci	r24, 0xFF	; 255
    27a6:	9f 4f       	sbci	r25, 0xFF	; 255
    27a8:	f0 68       	ori	r31, 0x80	; 128
    27aa:	3f 2e       	mov	r3, r31
    27ac:	2a e0       	ldi	r18, 0x0A	; 10
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	a3 01       	movw	r20, r6
    27b2:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__ultoa_invert>
    27b6:	88 2e       	mov	r8, r24
    27b8:	86 18       	sub	r8, r6
    27ba:	45 c0       	rjmp	.+138    	; 0x2846 <vfprintf+0x2ac>
    27bc:	85 37       	cpi	r24, 0x75	; 117
    27be:	31 f4       	brne	.+12     	; 0x27cc <vfprintf+0x232>
    27c0:	23 2d       	mov	r18, r3
    27c2:	2f 7e       	andi	r18, 0xEF	; 239
    27c4:	b2 2e       	mov	r11, r18
    27c6:	2a e0       	ldi	r18, 0x0A	; 10
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	25 c0       	rjmp	.+74     	; 0x2816 <vfprintf+0x27c>
    27cc:	93 2d       	mov	r25, r3
    27ce:	99 7f       	andi	r25, 0xF9	; 249
    27d0:	b9 2e       	mov	r11, r25
    27d2:	8f 36       	cpi	r24, 0x6F	; 111
    27d4:	c1 f0       	breq	.+48     	; 0x2806 <vfprintf+0x26c>
    27d6:	18 f4       	brcc	.+6      	; 0x27de <vfprintf+0x244>
    27d8:	88 35       	cpi	r24, 0x58	; 88
    27da:	79 f0       	breq	.+30     	; 0x27fa <vfprintf+0x260>
    27dc:	b5 c0       	rjmp	.+362    	; 0x2948 <vfprintf+0x3ae>
    27de:	80 37       	cpi	r24, 0x70	; 112
    27e0:	19 f0       	breq	.+6      	; 0x27e8 <vfprintf+0x24e>
    27e2:	88 37       	cpi	r24, 0x78	; 120
    27e4:	21 f0       	breq	.+8      	; 0x27ee <vfprintf+0x254>
    27e6:	b0 c0       	rjmp	.+352    	; 0x2948 <vfprintf+0x3ae>
    27e8:	e9 2f       	mov	r30, r25
    27ea:	e0 61       	ori	r30, 0x10	; 16
    27ec:	be 2e       	mov	r11, r30
    27ee:	b4 fe       	sbrs	r11, 4
    27f0:	0d c0       	rjmp	.+26     	; 0x280c <vfprintf+0x272>
    27f2:	fb 2d       	mov	r31, r11
    27f4:	f4 60       	ori	r31, 0x04	; 4
    27f6:	bf 2e       	mov	r11, r31
    27f8:	09 c0       	rjmp	.+18     	; 0x280c <vfprintf+0x272>
    27fa:	34 fe       	sbrs	r3, 4
    27fc:	0a c0       	rjmp	.+20     	; 0x2812 <vfprintf+0x278>
    27fe:	29 2f       	mov	r18, r25
    2800:	26 60       	ori	r18, 0x06	; 6
    2802:	b2 2e       	mov	r11, r18
    2804:	06 c0       	rjmp	.+12     	; 0x2812 <vfprintf+0x278>
    2806:	28 e0       	ldi	r18, 0x08	; 8
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	05 c0       	rjmp	.+10     	; 0x2816 <vfprintf+0x27c>
    280c:	20 e1       	ldi	r18, 0x10	; 16
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <vfprintf+0x27c>
    2812:	20 e1       	ldi	r18, 0x10	; 16
    2814:	32 e0       	ldi	r19, 0x02	; 2
    2816:	f8 01       	movw	r30, r16
    2818:	b7 fe       	sbrs	r11, 7
    281a:	07 c0       	rjmp	.+14     	; 0x282a <vfprintf+0x290>
    281c:	60 81       	ld	r22, Z
    281e:	71 81       	ldd	r23, Z+1	; 0x01
    2820:	82 81       	ldd	r24, Z+2	; 0x02
    2822:	93 81       	ldd	r25, Z+3	; 0x03
    2824:	0c 5f       	subi	r16, 0xFC	; 252
    2826:	1f 4f       	sbci	r17, 0xFF	; 255
    2828:	06 c0       	rjmp	.+12     	; 0x2836 <vfprintf+0x29c>
    282a:	60 81       	ld	r22, Z
    282c:	71 81       	ldd	r23, Z+1	; 0x01
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 5f       	subi	r16, 0xFE	; 254
    2834:	1f 4f       	sbci	r17, 0xFF	; 255
    2836:	a3 01       	movw	r20, r6
    2838:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__ultoa_invert>
    283c:	88 2e       	mov	r8, r24
    283e:	86 18       	sub	r8, r6
    2840:	fb 2d       	mov	r31, r11
    2842:	ff 77       	andi	r31, 0x7F	; 127
    2844:	3f 2e       	mov	r3, r31
    2846:	36 fe       	sbrs	r3, 6
    2848:	0d c0       	rjmp	.+26     	; 0x2864 <vfprintf+0x2ca>
    284a:	23 2d       	mov	r18, r3
    284c:	2e 7f       	andi	r18, 0xFE	; 254
    284e:	a2 2e       	mov	r10, r18
    2850:	89 14       	cp	r8, r9
    2852:	58 f4       	brcc	.+22     	; 0x286a <vfprintf+0x2d0>
    2854:	34 fe       	sbrs	r3, 4
    2856:	0b c0       	rjmp	.+22     	; 0x286e <vfprintf+0x2d4>
    2858:	32 fc       	sbrc	r3, 2
    285a:	09 c0       	rjmp	.+18     	; 0x286e <vfprintf+0x2d4>
    285c:	83 2d       	mov	r24, r3
    285e:	8e 7e       	andi	r24, 0xEE	; 238
    2860:	a8 2e       	mov	r10, r24
    2862:	05 c0       	rjmp	.+10     	; 0x286e <vfprintf+0x2d4>
    2864:	b8 2c       	mov	r11, r8
    2866:	a3 2c       	mov	r10, r3
    2868:	03 c0       	rjmp	.+6      	; 0x2870 <vfprintf+0x2d6>
    286a:	b8 2c       	mov	r11, r8
    286c:	01 c0       	rjmp	.+2      	; 0x2870 <vfprintf+0x2d6>
    286e:	b9 2c       	mov	r11, r9
    2870:	a4 fe       	sbrs	r10, 4
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <vfprintf+0x2f8>
    2874:	fe 01       	movw	r30, r28
    2876:	e8 0d       	add	r30, r8
    2878:	f1 1d       	adc	r31, r1
    287a:	80 81       	ld	r24, Z
    287c:	80 33       	cpi	r24, 0x30	; 48
    287e:	21 f4       	brne	.+8      	; 0x2888 <vfprintf+0x2ee>
    2880:	9a 2d       	mov	r25, r10
    2882:	99 7e       	andi	r25, 0xE9	; 233
    2884:	a9 2e       	mov	r10, r25
    2886:	09 c0       	rjmp	.+18     	; 0x289a <vfprintf+0x300>
    2888:	a2 fe       	sbrs	r10, 2
    288a:	06 c0       	rjmp	.+12     	; 0x2898 <vfprintf+0x2fe>
    288c:	b3 94       	inc	r11
    288e:	b3 94       	inc	r11
    2890:	04 c0       	rjmp	.+8      	; 0x289a <vfprintf+0x300>
    2892:	8a 2d       	mov	r24, r10
    2894:	86 78       	andi	r24, 0x86	; 134
    2896:	09 f0       	breq	.+2      	; 0x289a <vfprintf+0x300>
    2898:	b3 94       	inc	r11
    289a:	a3 fc       	sbrc	r10, 3
    289c:	11 c0       	rjmp	.+34     	; 0x28c0 <vfprintf+0x326>
    289e:	a0 fe       	sbrs	r10, 0
    28a0:	06 c0       	rjmp	.+12     	; 0x28ae <vfprintf+0x314>
    28a2:	b2 14       	cp	r11, r2
    28a4:	88 f4       	brcc	.+34     	; 0x28c8 <vfprintf+0x32e>
    28a6:	28 0c       	add	r2, r8
    28a8:	92 2c       	mov	r9, r2
    28aa:	9b 18       	sub	r9, r11
    28ac:	0e c0       	rjmp	.+28     	; 0x28ca <vfprintf+0x330>
    28ae:	b2 14       	cp	r11, r2
    28b0:	60 f4       	brcc	.+24     	; 0x28ca <vfprintf+0x330>
    28b2:	b6 01       	movw	r22, r12
    28b4:	80 e2       	ldi	r24, 0x20	; 32
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	0e 94 c4 14 	call	0x2988	; 0x2988 <fputc>
    28bc:	b3 94       	inc	r11
    28be:	f7 cf       	rjmp	.-18     	; 0x28ae <vfprintf+0x314>
    28c0:	b2 14       	cp	r11, r2
    28c2:	18 f4       	brcc	.+6      	; 0x28ca <vfprintf+0x330>
    28c4:	2b 18       	sub	r2, r11
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <vfprintf+0x332>
    28c8:	98 2c       	mov	r9, r8
    28ca:	21 2c       	mov	r2, r1
    28cc:	a4 fe       	sbrs	r10, 4
    28ce:	10 c0       	rjmp	.+32     	; 0x28f0 <vfprintf+0x356>
    28d0:	b6 01       	movw	r22, r12
    28d2:	80 e3       	ldi	r24, 0x30	; 48
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	0e 94 c4 14 	call	0x2988	; 0x2988 <fputc>
    28da:	a2 fe       	sbrs	r10, 2
    28dc:	17 c0       	rjmp	.+46     	; 0x290c <vfprintf+0x372>
    28de:	a1 fc       	sbrc	r10, 1
    28e0:	03 c0       	rjmp	.+6      	; 0x28e8 <vfprintf+0x34e>
    28e2:	88 e7       	ldi	r24, 0x78	; 120
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	02 c0       	rjmp	.+4      	; 0x28ec <vfprintf+0x352>
    28e8:	88 e5       	ldi	r24, 0x58	; 88
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	b6 01       	movw	r22, r12
    28ee:	0c c0       	rjmp	.+24     	; 0x2908 <vfprintf+0x36e>
    28f0:	8a 2d       	mov	r24, r10
    28f2:	86 78       	andi	r24, 0x86	; 134
    28f4:	59 f0       	breq	.+22     	; 0x290c <vfprintf+0x372>
    28f6:	a1 fe       	sbrs	r10, 1
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <vfprintf+0x364>
    28fa:	8b e2       	ldi	r24, 0x2B	; 43
    28fc:	01 c0       	rjmp	.+2      	; 0x2900 <vfprintf+0x366>
    28fe:	80 e2       	ldi	r24, 0x20	; 32
    2900:	a7 fc       	sbrc	r10, 7
    2902:	8d e2       	ldi	r24, 0x2D	; 45
    2904:	b6 01       	movw	r22, r12
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	0e 94 c4 14 	call	0x2988	; 0x2988 <fputc>
    290c:	89 14       	cp	r8, r9
    290e:	38 f4       	brcc	.+14     	; 0x291e <vfprintf+0x384>
    2910:	b6 01       	movw	r22, r12
    2912:	80 e3       	ldi	r24, 0x30	; 48
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	0e 94 c4 14 	call	0x2988	; 0x2988 <fputc>
    291a:	9a 94       	dec	r9
    291c:	f7 cf       	rjmp	.-18     	; 0x290c <vfprintf+0x372>
    291e:	8a 94       	dec	r8
    2920:	f3 01       	movw	r30, r6
    2922:	e8 0d       	add	r30, r8
    2924:	f1 1d       	adc	r31, r1
    2926:	80 81       	ld	r24, Z
    2928:	b6 01       	movw	r22, r12
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	0e 94 c4 14 	call	0x2988	; 0x2988 <fputc>
    2930:	81 10       	cpse	r8, r1
    2932:	f5 cf       	rjmp	.-22     	; 0x291e <vfprintf+0x384>
    2934:	22 20       	and	r2, r2
    2936:	09 f4       	brne	.+2      	; 0x293a <vfprintf+0x3a0>
    2938:	42 ce       	rjmp	.-892    	; 0x25be <vfprintf+0x24>
    293a:	b6 01       	movw	r22, r12
    293c:	80 e2       	ldi	r24, 0x20	; 32
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 c4 14 	call	0x2988	; 0x2988 <fputc>
    2944:	2a 94       	dec	r2
    2946:	f6 cf       	rjmp	.-20     	; 0x2934 <vfprintf+0x39a>
    2948:	f6 01       	movw	r30, r12
    294a:	86 81       	ldd	r24, Z+6	; 0x06
    294c:	97 81       	ldd	r25, Z+7	; 0x07
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <vfprintf+0x3ba>
    2950:	8f ef       	ldi	r24, 0xFF	; 255
    2952:	9f ef       	ldi	r25, 0xFF	; 255
    2954:	2b 96       	adiw	r28, 0x0b	; 11
    2956:	e2 e1       	ldi	r30, 0x12	; 18
    2958:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__epilogue_restores__>

0000295c <strnlen_P>:
    295c:	fc 01       	movw	r30, r24
    295e:	05 90       	lpm	r0, Z+
    2960:	61 50       	subi	r22, 0x01	; 1
    2962:	70 40       	sbci	r23, 0x00	; 0
    2964:	01 10       	cpse	r0, r1
    2966:	d8 f7       	brcc	.-10     	; 0x295e <strnlen_P+0x2>
    2968:	80 95       	com	r24
    296a:	90 95       	com	r25
    296c:	8e 0f       	add	r24, r30
    296e:	9f 1f       	adc	r25, r31
    2970:	08 95       	ret

00002972 <strnlen>:
    2972:	fc 01       	movw	r30, r24
    2974:	61 50       	subi	r22, 0x01	; 1
    2976:	70 40       	sbci	r23, 0x00	; 0
    2978:	01 90       	ld	r0, Z+
    297a:	01 10       	cpse	r0, r1
    297c:	d8 f7       	brcc	.-10     	; 0x2974 <strnlen+0x2>
    297e:	80 95       	com	r24
    2980:	90 95       	com	r25
    2982:	8e 0f       	add	r24, r30
    2984:	9f 1f       	adc	r25, r31
    2986:	08 95       	ret

00002988 <fputc>:
    2988:	0f 93       	push	r16
    298a:	1f 93       	push	r17
    298c:	cf 93       	push	r28
    298e:	df 93       	push	r29
    2990:	fb 01       	movw	r30, r22
    2992:	23 81       	ldd	r18, Z+3	; 0x03
    2994:	21 fd       	sbrc	r18, 1
    2996:	03 c0       	rjmp	.+6      	; 0x299e <fputc+0x16>
    2998:	8f ef       	ldi	r24, 0xFF	; 255
    299a:	9f ef       	ldi	r25, 0xFF	; 255
    299c:	2c c0       	rjmp	.+88     	; 0x29f6 <fputc+0x6e>
    299e:	22 ff       	sbrs	r18, 2
    29a0:	16 c0       	rjmp	.+44     	; 0x29ce <fputc+0x46>
    29a2:	46 81       	ldd	r20, Z+6	; 0x06
    29a4:	57 81       	ldd	r21, Z+7	; 0x07
    29a6:	24 81       	ldd	r18, Z+4	; 0x04
    29a8:	35 81       	ldd	r19, Z+5	; 0x05
    29aa:	42 17       	cp	r20, r18
    29ac:	53 07       	cpc	r21, r19
    29ae:	44 f4       	brge	.+16     	; 0x29c0 <fputc+0x38>
    29b0:	a0 81       	ld	r26, Z
    29b2:	b1 81       	ldd	r27, Z+1	; 0x01
    29b4:	9d 01       	movw	r18, r26
    29b6:	2f 5f       	subi	r18, 0xFF	; 255
    29b8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ba:	31 83       	std	Z+1, r19	; 0x01
    29bc:	20 83       	st	Z, r18
    29be:	8c 93       	st	X, r24
    29c0:	26 81       	ldd	r18, Z+6	; 0x06
    29c2:	37 81       	ldd	r19, Z+7	; 0x07
    29c4:	2f 5f       	subi	r18, 0xFF	; 255
    29c6:	3f 4f       	sbci	r19, 0xFF	; 255
    29c8:	37 83       	std	Z+7, r19	; 0x07
    29ca:	26 83       	std	Z+6, r18	; 0x06
    29cc:	14 c0       	rjmp	.+40     	; 0x29f6 <fputc+0x6e>
    29ce:	8b 01       	movw	r16, r22
    29d0:	ec 01       	movw	r28, r24
    29d2:	fb 01       	movw	r30, r22
    29d4:	00 84       	ldd	r0, Z+8	; 0x08
    29d6:	f1 85       	ldd	r31, Z+9	; 0x09
    29d8:	e0 2d       	mov	r30, r0
    29da:	09 95       	icall
    29dc:	89 2b       	or	r24, r25
    29de:	e1 f6       	brne	.-72     	; 0x2998 <fputc+0x10>
    29e0:	d8 01       	movw	r26, r16
    29e2:	16 96       	adiw	r26, 0x06	; 6
    29e4:	8d 91       	ld	r24, X+
    29e6:	9c 91       	ld	r25, X
    29e8:	17 97       	sbiw	r26, 0x07	; 7
    29ea:	01 96       	adiw	r24, 0x01	; 1
    29ec:	17 96       	adiw	r26, 0x07	; 7
    29ee:	9c 93       	st	X, r25
    29f0:	8e 93       	st	-X, r24
    29f2:	16 97       	sbiw	r26, 0x06	; 6
    29f4:	ce 01       	movw	r24, r28
    29f6:	df 91       	pop	r29
    29f8:	cf 91       	pop	r28
    29fa:	1f 91       	pop	r17
    29fc:	0f 91       	pop	r16
    29fe:	08 95       	ret

00002a00 <__ultoa_invert>:
    2a00:	fa 01       	movw	r30, r20
    2a02:	aa 27       	eor	r26, r26
    2a04:	28 30       	cpi	r18, 0x08	; 8
    2a06:	51 f1       	breq	.+84     	; 0x2a5c <__ultoa_invert+0x5c>
    2a08:	20 31       	cpi	r18, 0x10	; 16
    2a0a:	81 f1       	breq	.+96     	; 0x2a6c <__ultoa_invert+0x6c>
    2a0c:	e8 94       	clt
    2a0e:	6f 93       	push	r22
    2a10:	6e 7f       	andi	r22, 0xFE	; 254
    2a12:	6e 5f       	subi	r22, 0xFE	; 254
    2a14:	7f 4f       	sbci	r23, 0xFF	; 255
    2a16:	8f 4f       	sbci	r24, 0xFF	; 255
    2a18:	9f 4f       	sbci	r25, 0xFF	; 255
    2a1a:	af 4f       	sbci	r26, 0xFF	; 255
    2a1c:	b1 e0       	ldi	r27, 0x01	; 1
    2a1e:	3e d0       	rcall	.+124    	; 0x2a9c <__ultoa_invert+0x9c>
    2a20:	b4 e0       	ldi	r27, 0x04	; 4
    2a22:	3c d0       	rcall	.+120    	; 0x2a9c <__ultoa_invert+0x9c>
    2a24:	67 0f       	add	r22, r23
    2a26:	78 1f       	adc	r23, r24
    2a28:	89 1f       	adc	r24, r25
    2a2a:	9a 1f       	adc	r25, r26
    2a2c:	a1 1d       	adc	r26, r1
    2a2e:	68 0f       	add	r22, r24
    2a30:	79 1f       	adc	r23, r25
    2a32:	8a 1f       	adc	r24, r26
    2a34:	91 1d       	adc	r25, r1
    2a36:	a1 1d       	adc	r26, r1
    2a38:	6a 0f       	add	r22, r26
    2a3a:	71 1d       	adc	r23, r1
    2a3c:	81 1d       	adc	r24, r1
    2a3e:	91 1d       	adc	r25, r1
    2a40:	a1 1d       	adc	r26, r1
    2a42:	20 d0       	rcall	.+64     	; 0x2a84 <__ultoa_invert+0x84>
    2a44:	09 f4       	brne	.+2      	; 0x2a48 <__ultoa_invert+0x48>
    2a46:	68 94       	set
    2a48:	3f 91       	pop	r19
    2a4a:	2a e0       	ldi	r18, 0x0A	; 10
    2a4c:	26 9f       	mul	r18, r22
    2a4e:	11 24       	eor	r1, r1
    2a50:	30 19       	sub	r19, r0
    2a52:	30 5d       	subi	r19, 0xD0	; 208
    2a54:	31 93       	st	Z+, r19
    2a56:	de f6       	brtc	.-74     	; 0x2a0e <__ultoa_invert+0xe>
    2a58:	cf 01       	movw	r24, r30
    2a5a:	08 95       	ret
    2a5c:	46 2f       	mov	r20, r22
    2a5e:	47 70       	andi	r20, 0x07	; 7
    2a60:	40 5d       	subi	r20, 0xD0	; 208
    2a62:	41 93       	st	Z+, r20
    2a64:	b3 e0       	ldi	r27, 0x03	; 3
    2a66:	0f d0       	rcall	.+30     	; 0x2a86 <__ultoa_invert+0x86>
    2a68:	c9 f7       	brne	.-14     	; 0x2a5c <__ultoa_invert+0x5c>
    2a6a:	f6 cf       	rjmp	.-20     	; 0x2a58 <__ultoa_invert+0x58>
    2a6c:	46 2f       	mov	r20, r22
    2a6e:	4f 70       	andi	r20, 0x0F	; 15
    2a70:	40 5d       	subi	r20, 0xD0	; 208
    2a72:	4a 33       	cpi	r20, 0x3A	; 58
    2a74:	18 f0       	brcs	.+6      	; 0x2a7c <__ultoa_invert+0x7c>
    2a76:	49 5d       	subi	r20, 0xD9	; 217
    2a78:	31 fd       	sbrc	r19, 1
    2a7a:	40 52       	subi	r20, 0x20	; 32
    2a7c:	41 93       	st	Z+, r20
    2a7e:	02 d0       	rcall	.+4      	; 0x2a84 <__ultoa_invert+0x84>
    2a80:	a9 f7       	brne	.-22     	; 0x2a6c <__ultoa_invert+0x6c>
    2a82:	ea cf       	rjmp	.-44     	; 0x2a58 <__ultoa_invert+0x58>
    2a84:	b4 e0       	ldi	r27, 0x04	; 4
    2a86:	a6 95       	lsr	r26
    2a88:	97 95       	ror	r25
    2a8a:	87 95       	ror	r24
    2a8c:	77 95       	ror	r23
    2a8e:	67 95       	ror	r22
    2a90:	ba 95       	dec	r27
    2a92:	c9 f7       	brne	.-14     	; 0x2a86 <__ultoa_invert+0x86>
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	61 05       	cpc	r22, r1
    2a98:	71 05       	cpc	r23, r1
    2a9a:	08 95       	ret
    2a9c:	9b 01       	movw	r18, r22
    2a9e:	ac 01       	movw	r20, r24
    2aa0:	0a 2e       	mov	r0, r26
    2aa2:	06 94       	lsr	r0
    2aa4:	57 95       	ror	r21
    2aa6:	47 95       	ror	r20
    2aa8:	37 95       	ror	r19
    2aaa:	27 95       	ror	r18
    2aac:	ba 95       	dec	r27
    2aae:	c9 f7       	brne	.-14     	; 0x2aa2 <__ultoa_invert+0xa2>
    2ab0:	62 0f       	add	r22, r18
    2ab2:	73 1f       	adc	r23, r19
    2ab4:	84 1f       	adc	r24, r20
    2ab6:	95 1f       	adc	r25, r21
    2ab8:	a0 1d       	adc	r26, r0
    2aba:	08 95       	ret

00002abc <__prologue_saves__>:
    2abc:	2f 92       	push	r2
    2abe:	3f 92       	push	r3
    2ac0:	4f 92       	push	r4
    2ac2:	5f 92       	push	r5
    2ac4:	6f 92       	push	r6
    2ac6:	7f 92       	push	r7
    2ac8:	8f 92       	push	r8
    2aca:	9f 92       	push	r9
    2acc:	af 92       	push	r10
    2ace:	bf 92       	push	r11
    2ad0:	cf 92       	push	r12
    2ad2:	df 92       	push	r13
    2ad4:	ef 92       	push	r14
    2ad6:	ff 92       	push	r15
    2ad8:	0f 93       	push	r16
    2ada:	1f 93       	push	r17
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	ca 1b       	sub	r28, r26
    2ae6:	db 0b       	sbc	r29, r27
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	de bf       	out	0x3e, r29	; 62
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	cd bf       	out	0x3d, r28	; 61
    2af2:	09 94       	ijmp

00002af4 <__epilogue_restores__>:
    2af4:	2a 88       	ldd	r2, Y+18	; 0x12
    2af6:	39 88       	ldd	r3, Y+17	; 0x11
    2af8:	48 88       	ldd	r4, Y+16	; 0x10
    2afa:	5f 84       	ldd	r5, Y+15	; 0x0f
    2afc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2afe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b00:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b02:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b04:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b06:	b9 84       	ldd	r11, Y+9	; 0x09
    2b08:	c8 84       	ldd	r12, Y+8	; 0x08
    2b0a:	df 80       	ldd	r13, Y+7	; 0x07
    2b0c:	ee 80       	ldd	r14, Y+6	; 0x06
    2b0e:	fd 80       	ldd	r15, Y+5	; 0x05
    2b10:	0c 81       	ldd	r16, Y+4	; 0x04
    2b12:	1b 81       	ldd	r17, Y+3	; 0x03
    2b14:	aa 81       	ldd	r26, Y+2	; 0x02
    2b16:	b9 81       	ldd	r27, Y+1	; 0x01
    2b18:	ce 0f       	add	r28, r30
    2b1a:	d1 1d       	adc	r29, r1
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	cd bf       	out	0x3d, r28	; 61
    2b26:	ed 01       	movw	r28, r26
    2b28:	08 95       	ret

00002b2a <_exit>:
    2b2a:	f8 94       	cli

00002b2c <__stop_program>:
    2b2c:	ff cf       	rjmp	.-2      	; 0x2b2c <__stop_program>
