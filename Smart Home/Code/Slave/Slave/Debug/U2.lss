
U2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011ee  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085c  00000000  00000000  0000198a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008fb  00000000  00000000  000021e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00002ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000065c  00000000  00000000  00002d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a93  00000000  00000000  000033a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00003e37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	d8 01       	movw	r26, r16
  56:	ee 01       	movw	r28, r28
  58:	04 02       	muls	r16, r20
  5a:	1a 02       	muls	r17, r26
  5c:	c8 01       	movw	r24, r16
  5e:	c8 01       	movw	r24, r16
  60:	c8 01       	movw	r24, r16
  62:	c8 01       	movw	r24, r16
  64:	c8 01       	movw	r24, r16
  66:	c8 01       	movw	r24, r16
  68:	c8 01       	movw	r24, r16
  6a:	c8 01       	movw	r24, r16
  6c:	c8 01       	movw	r24, r16
  6e:	c8 01       	movw	r24, r16
  70:	c8 01       	movw	r24, r16
  72:	c8 01       	movw	r24, r16
  74:	30 02       	muls	r19, r16
  76:	35 02       	muls	r19, r21
  78:	3a 02       	muls	r19, r26
  7a:	3f 02       	muls	r19, r31
  7c:	c8 01       	movw	r24, r16
  7e:	c8 01       	movw	r24, r16
  80:	c8 01       	movw	r24, r16
  82:	c8 01       	movw	r24, r16
  84:	c8 01       	movw	r24, r16
  86:	c8 01       	movw	r24, r16
  88:	c8 01       	movw	r24, r16
  8a:	c8 01       	movw	r24, r16
  8c:	c8 01       	movw	r24, r16
  8e:	c8 01       	movw	r24, r16
  90:	c8 01       	movw	r24, r16
  92:	c8 01       	movw	r24, r16
  94:	44 02       	muls	r20, r20
  96:	49 02       	muls	r20, r25
  98:	4e 02       	muls	r20, r30
  9a:	53 02       	muls	r21, r19

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf e5       	ldi	r28, 0x5F	; 95
  a2:	d8 e0       	ldi	r29, 0x08	; 8
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	10 e0       	ldi	r17, 0x00	; 0
  aa:	a0 e6       	ldi	r26, 0x60	; 96
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	e4 ea       	ldi	r30, 0xA4	; 164
  b0:	f5 e0       	ldi	r31, 0x05	; 5
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
  b4:	05 90       	lpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a0 36       	cpi	r26, 0x60	; 96
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_clear_bss>:
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	a0 e6       	ldi	r26, 0x60	; 96
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a0 36       	cpi	r26, 0x60	; 96
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	0e 94 b1 01 	call	0x362	; 0x362 <main>
  d2:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <DIO_vidSetPinMode>:
#include "DIO_config.h"


void DIO_vidSetPinMode(_enuGPIOx enuPortNum, _enuPINx enuPinNum, _enuIOx enuPinDirection)
{
    switch (enuPortNum)
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	01 f1       	breq	.+64     	; 0x11e <DIO_vidSetPinMode+0x44>
  de:	30 f0       	brcs	.+12     	; 0xec <DIO_vidSetPinMode+0x12>
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	b1 f1       	breq	.+108    	; 0x150 <DIO_vidSetPinMode+0x76>
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	09 f4       	brne	.+2      	; 0xea <DIO_vidSetPinMode+0x10>
  e8:	4c c0       	rjmp	.+152    	; 0x182 <DIO_vidSetPinMode+0xa8>
  ea:	08 95       	ret
    {
        case GPIOA:
        if(OUTPUT == enuPinDirection)
  ec:	41 30       	cpi	r20, 0x01	; 1
  ee:	59 f4       	brne	.+22     	; 0x106 <DIO_vidSetPinMode+0x2c>
        {   
            SET_BIT(DDRA,enuPinNum);
  f0:	2a b3       	in	r18, 0x1a	; 26
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vidSetPinMode+0x22>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vidSetPinMode+0x1e>
 100:	82 2b       	or	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26
 104:	08 95       	ret
        }
        else
        {
            CLR_BIT(DDRA,enuPinNum);
 106:	2a b3       	in	r18, 0x1a	; 26
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_vidSetPinMode+0x38>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_vidSetPinMode+0x34>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	8a bb       	out	0x1a, r24	; 26
 11c:	08 95       	ret
        }
        break;
        case GPIOB:
        if(OUTPUT == enuPinDirection)
 11e:	41 30       	cpi	r20, 0x01	; 1
 120:	59 f4       	brne	.+22     	; 0x138 <DIO_vidSetPinMode+0x5e>
        {   
            SET_BIT(DDRB,enuPinNum);
 122:	27 b3       	in	r18, 0x17	; 23
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_vidSetPinMode+0x54>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_vidSetPinMode+0x50>
 132:	82 2b       	or	r24, r18
 134:	87 bb       	out	0x17, r24	; 23
 136:	08 95       	ret
        }
        else
        {
            CLR_BIT(DDRB,enuPinNum);
 138:	27 b3       	in	r18, 0x17	; 23
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_vidSetPinMode+0x6a>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_vidSetPinMode+0x66>
 148:	80 95       	com	r24
 14a:	82 23       	and	r24, r18
 14c:	87 bb       	out	0x17, r24	; 23
 14e:	08 95       	ret
        }
        break;
        case GPIOC:
        if(OUTPUT == enuPinDirection)
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	59 f4       	brne	.+22     	; 0x16a <DIO_vidSetPinMode+0x90>
        {   
            SET_BIT(DDRC,enuPinNum);
 154:	24 b3       	in	r18, 0x14	; 20
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_vidSetPinMode+0x86>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_vidSetPinMode+0x82>
 164:	82 2b       	or	r24, r18
 166:	84 bb       	out	0x14, r24	; 20
 168:	08 95       	ret
        }
        else
        {
            CLR_BIT(DDRC,enuPinNum);
 16a:	24 b3       	in	r18, 0x14	; 20
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_vidSetPinMode+0x9c>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_vidSetPinMode+0x98>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	84 bb       	out	0x14, r24	; 20
 180:	08 95       	ret
        }
        break;
        case GPIOD:
        if(OUTPUT == enuPinDirection)
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	59 f4       	brne	.+22     	; 0x19c <DIO_vidSetPinMode+0xc2>
        {   
            SET_BIT(DDRD,enuPinNum);
 186:	21 b3       	in	r18, 0x11	; 17
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_vidSetPinMode+0xb8>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_vidSetPinMode+0xb4>
 196:	82 2b       	or	r24, r18
 198:	81 bb       	out	0x11, r24	; 17
 19a:	08 95       	ret
        }
        else
        {
            CLR_BIT(DDRD,enuPinNum);
 19c:	21 b3       	in	r18, 0x11	; 17
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_vidSetPinMode+0xce>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_vidSetPinMode+0xca>
 1ac:	80 95       	com	r24
 1ae:	82 23       	and	r24, r18
 1b0:	81 bb       	out	0x11, r24	; 17
 1b2:	08 95       	ret

000001b4 <DIO_vidWritePin>:
    }
}

void DIO_vidWritePin(_enuGPIOx enuPortNum, _enuPINx enuPinNum, _enuPINVALUE enuPinValue)
{
    switch(enuPortNum)
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	01 f1       	breq	.+64     	; 0x1f8 <DIO_vidWritePin+0x44>
 1b8:	30 f0       	brcs	.+12     	; 0x1c6 <DIO_vidWritePin+0x12>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	b1 f1       	breq	.+108    	; 0x22a <DIO_vidWritePin+0x76>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <DIO_vidWritePin+0x10>
 1c2:	4c c0       	rjmp	.+152    	; 0x25c <DIO_vidWritePin+0xa8>
 1c4:	08 95       	ret
    {
        case GPIOA:
        if(HIGH == enuPinValue)
 1c6:	41 30       	cpi	r20, 0x01	; 1
 1c8:	59 f4       	brne	.+22     	; 0x1e0 <DIO_vidWritePin+0x2c>
        {
            SET_BIT(PORTA,enuPinNum);
 1ca:	2b b3       	in	r18, 0x1b	; 27
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_vidWritePin+0x22>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_vidWritePin+0x1e>
 1da:	82 2b       	or	r24, r18
 1dc:	8b bb       	out	0x1b, r24	; 27
 1de:	08 95       	ret
        }
        else
        {
            CLR_BIT(PORTA,enuPinNum);
 1e0:	2b b3       	in	r18, 0x1b	; 27
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_vidWritePin+0x38>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_vidWritePin+0x34>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	8b bb       	out	0x1b, r24	; 27
 1f6:	08 95       	ret
        }
        break;
        case GPIOB:
        if(HIGH == enuPinValue)
 1f8:	41 30       	cpi	r20, 0x01	; 1
 1fa:	59 f4       	brne	.+22     	; 0x212 <DIO_vidWritePin+0x5e>
        {
            SET_BIT(PORTB,enuPinNum);
 1fc:	28 b3       	in	r18, 0x18	; 24
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_vidWritePin+0x54>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_vidWritePin+0x50>
 20c:	82 2b       	or	r24, r18
 20e:	88 bb       	out	0x18, r24	; 24
 210:	08 95       	ret
        }
        else
        {
            CLR_BIT(PORTB,enuPinNum);
 212:	28 b3       	in	r18, 0x18	; 24
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_vidWritePin+0x6a>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_vidWritePin+0x66>
 222:	80 95       	com	r24
 224:	82 23       	and	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
 228:	08 95       	ret
        }
        break;
        case GPIOC:
        if(HIGH == enuPinValue)
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	59 f4       	brne	.+22     	; 0x244 <DIO_vidWritePin+0x90>
        {
            SET_BIT(PORTC,enuPinNum);
 22e:	25 b3       	in	r18, 0x15	; 21
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vidWritePin+0x86>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vidWritePin+0x82>
 23e:	82 2b       	or	r24, r18
 240:	85 bb       	out	0x15, r24	; 21
 242:	08 95       	ret
        }
        else
        {
            CLR_BIT(PORTC,enuPinNum);
 244:	25 b3       	in	r18, 0x15	; 21
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_vidWritePin+0x9c>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_vidWritePin+0x98>
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	85 bb       	out	0x15, r24	; 21
 25a:	08 95       	ret
        }
        break;
        case GPIOD:
        if(HIGH == enuPinValue)
 25c:	41 30       	cpi	r20, 0x01	; 1
 25e:	59 f4       	brne	.+22     	; 0x276 <DIO_vidWritePin+0xc2>
        {
            SET_BIT(PORTD,enuPinNum);
 260:	22 b3       	in	r18, 0x12	; 18
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_vidWritePin+0xb8>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_vidWritePin+0xb4>
 270:	82 2b       	or	r24, r18
 272:	82 bb       	out	0x12, r24	; 18
 274:	08 95       	ret
        }
        else
        {
            CLR_BIT(PORTD,enuPinNum);
 276:	22 b3       	in	r18, 0x12	; 18
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_vidWritePin+0xce>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_vidWritePin+0xca>
 286:	80 95       	com	r24
 288:	82 23       	and	r24, r18
 28a:	82 bb       	out	0x12, r24	; 18
 28c:	08 95       	ret

0000028e <DIO_enuReadPin>:
}

_enuPINVALUE DIO_enuReadPin(_enuGPIOx enuPortNum, _enuPINx enuPinNum)
{
    _enuPINVALUE enuPinReturnedValue;
    switch(enuPortNum)
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	e1 f0       	breq	.+56     	; 0x2ca <DIO_enuReadPin+0x3c>
 292:	30 f0       	brcs	.+12     	; 0x2a0 <DIO_enuReadPin+0x12>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	71 f1       	breq	.+92     	; 0x2f4 <DIO_enuReadPin+0x66>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	09 f4       	brne	.+2      	; 0x29e <DIO_enuReadPin+0x10>
 29c:	40 c0       	rjmp	.+128    	; 0x31e <DIO_enuReadPin+0x90>
 29e:	53 c0       	rjmp	.+166    	; 0x346 <DIO_enuReadPin+0xb8>
    {
        case GPIOA:
            enuPinReturnedValue = GET_BIT(PINA,enuPinNum);
 2a0:	49 b3       	in	r20, 0x19	; 25
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	9c 01       	movw	r18, r24
 2a8:	06 2e       	mov	r0, r22
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_enuReadPin+0x22>
 2ac:	22 0f       	add	r18, r18
 2ae:	33 1f       	adc	r19, r19
 2b0:	0a 94       	dec	r0
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_enuReadPin+0x1e>
 2b4:	84 2f       	mov	r24, r20
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	82 23       	and	r24, r18
 2ba:	93 23       	and	r25, r19
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_enuReadPin+0x34>
 2be:	95 95       	asr	r25
 2c0:	87 95       	ror	r24
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_enuReadPin+0x30>
 2c6:	98 2f       	mov	r25, r24
            break;
 2c8:	3e c0       	rjmp	.+124    	; 0x346 <DIO_enuReadPin+0xb8>
        case GPIOB:
            enuPinReturnedValue = GET_BIT(PINB,enuPinNum);
 2ca:	46 b3       	in	r20, 0x16	; 22
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	9c 01       	movw	r18, r24
 2d2:	06 2e       	mov	r0, r22
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_enuReadPin+0x4c>
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_enuReadPin+0x48>
 2de:	84 2f       	mov	r24, r20
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	82 23       	and	r24, r18
 2e4:	93 23       	and	r25, r19
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_enuReadPin+0x5e>
 2e8:	95 95       	asr	r25
 2ea:	87 95       	ror	r24
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_enuReadPin+0x5a>
 2f0:	98 2f       	mov	r25, r24
            break;
 2f2:	29 c0       	rjmp	.+82     	; 0x346 <DIO_enuReadPin+0xb8>
        case GPIOC:
            enuPinReturnedValue = GET_BIT(PINC,enuPinNum);
 2f4:	43 b3       	in	r20, 0x13	; 19
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	9c 01       	movw	r18, r24
 2fc:	06 2e       	mov	r0, r22
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_enuReadPin+0x76>
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_enuReadPin+0x72>
 308:	84 2f       	mov	r24, r20
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	82 23       	and	r24, r18
 30e:	93 23       	and	r25, r19
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_enuReadPin+0x88>
 312:	95 95       	asr	r25
 314:	87 95       	ror	r24
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_enuReadPin+0x84>
 31a:	98 2f       	mov	r25, r24
            break;
 31c:	14 c0       	rjmp	.+40     	; 0x346 <DIO_enuReadPin+0xb8>
        case GPIOD:
            enuPinReturnedValue = GET_BIT(PIND,enuPinNum);
 31e:	40 b3       	in	r20, 0x10	; 16
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	9c 01       	movw	r18, r24
 326:	06 2e       	mov	r0, r22
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_enuReadPin+0xa0>
 32a:	22 0f       	add	r18, r18
 32c:	33 1f       	adc	r19, r19
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_enuReadPin+0x9c>
 332:	84 2f       	mov	r24, r20
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	82 23       	and	r24, r18
 338:	93 23       	and	r25, r19
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_enuReadPin+0xb2>
 33c:	95 95       	asr	r25
 33e:	87 95       	ror	r24
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_enuReadPin+0xae>
 344:	98 2f       	mov	r25, r24
            break;
        default:
            break;
    }
    return enuPinReturnedValue;
}
 346:	89 2f       	mov	r24, r25
 348:	08 95       	ret

0000034a <LED_vidInit>:
#include "LED_private.h"


void LED_vidInit(_enuGPIOx enuPortNum, _enuPINx enuPinNum)
{
    DIO_vidSetPinMode(enuPortNum, enuPinNum, OUTPUT);   
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	0e 94 6d 00 	call	0xda	; 0xda <DIO_vidSetPinMode>
 350:	08 95       	ret

00000352 <LED_vidTurnOn>:
}
void LED_vidTurnOn(_enuGPIOx enuPortNum, _enuPINx enuPinNum)
{
    DIO_vidWritePin(enuPortNum, enuPinNum, HIGH);
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vidWritePin>
 358:	08 95       	ret

0000035a <LED_vidTurnOff>:
}
void LED_vidTurnOff(_enuGPIOx enuPortNum, _enuPINx enuPinNum)
{
    DIO_vidWritePin(enuPortNum, enuPinNum, LOW);
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vidWritePin>
 360:	08 95       	ret

00000362 <main>:


int main(void)
{
	
	USART_vidInit(9600);
 362:	60 e8       	ldi	r22, 0x80	; 128
 364:	75 e2       	ldi	r23, 0x25	; 37
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_vidInit>
	
   LED_vidInit(GPIOC,0);
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	0e 94 a5 01 	call	0x34a	; 0x34a <LED_vidInit>
   LED_vidInit(GPIOC,1);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	0e 94 a5 01 	call	0x34a	; 0x34a <LED_vidInit>
   LED_vidInit(GPIOC,2);
 37e:	62 e0       	ldi	r22, 0x02	; 2
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 a5 01 	call	0x34a	; 0x34a <LED_vidInit>
   LED_vidInit(GPIOC,3);
 386:	63 e0       	ldi	r22, 0x03	; 3
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	0e 94 a5 01 	call	0x34a	; 0x34a <LED_vidInit>
	
	u8 request = DEFAULT_ACK;
	u8 response = DEFAULT_ACK;
 38e:	df ef       	ldi	r29, 0xFF	; 255
	
	while(1)
	{
		request = USART_u8RecieveByte();
 390:	0e 94 9c 02 	call	0x538	; 0x538 <USART_u8RecieveByte>
 394:	c8 2f       	mov	r28, r24
		USART_vidEnableRXInterrupt();
 396:	0e 94 a4 02 	call	0x548	; 0x548 <USART_vidEnableRXInterrupt>
		
		switch (request)
 39a:	8c 2f       	mov	r24, r28
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	fc 01       	movw	r30, r24
 3a0:	71 97       	sbiw	r30, 0x11	; 17
 3a2:	e4 32       	cpi	r30, 0x24	; 36
 3a4:	f1 05       	cpc	r31, r1
 3a6:	a0 f7       	brcc	.-24     	; 0x390 <main+0x2e>
 3a8:	e6 5d       	subi	r30, 0xD6	; 214
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	0c 94 ca 02 	jmp	0x594	; 0x594 <__tablejump2__>
		{
			case ROOM1_STATUS:
			if (DIO_enuReadPin(GPIOC,0)==0)
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	0e 94 47 01 	call	0x28e	; 0x28e <DIO_enuReadPin>
 3b8:	88 23       	and	r24, r24
 3ba:	39 f0       	breq	.+14     	; 0x3ca <main+0x68>
			{
				response = OFF_STATUS;
			}
			else if (DIO_enuReadPin(GPIOC,0)==1)
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 47 01 	call	0x28e	; 0x28e <DIO_enuReadPin>
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	21 f4       	brne	.+8      	; 0x3d0 <main+0x6e>
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <main+0x6c>
		switch (request)
		{
			case ROOM1_STATUS:
			if (DIO_enuReadPin(GPIOC,0)==0)
			{
				response = OFF_STATUS;
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <main+0x6e>
			}
			else if (DIO_enuReadPin(GPIOC,0)==1)
			{
				response = ON_STATUS;
 3ce:	d1 e0       	ldi	r29, 0x01	; 1
			}
			else
			{
			}
			USART_vidSendByte(response);
 3d0:	8d 2f       	mov	r24, r29
 3d2:	0e 94 98 02 	call	0x530	; 0x530 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();
 3d6:	0e 94 a0 02 	call	0x540	; 0x540 <USART_vidEnableTXInterrupt>
			break;
 3da:	da cf       	rjmp	.-76     	; 0x390 <main+0x2e>
			case ROOM2_STATUS:
			if (DIO_enuReadPin(GPIOC,1)==0)
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	0e 94 47 01 	call	0x28e	; 0x28e <DIO_enuReadPin>
 3e4:	88 23       	and	r24, r24
 3e6:	39 f0       	breq	.+14     	; 0x3f6 <main+0x94>
			{
				response = OFF_STATUS;
			}
			else if (DIO_enuReadPin(GPIOC,1)==1)
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	0e 94 47 01 	call	0x28e	; 0x28e <DIO_enuReadPin>
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	21 f4       	brne	.+8      	; 0x3fc <main+0x9a>
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <main+0x98>
			USART_vidEnableTXInterrupt();
			break;
			case ROOM2_STATUS:
			if (DIO_enuReadPin(GPIOC,1)==0)
			{
				response = OFF_STATUS;
 3f6:	d0 e0       	ldi	r29, 0x00	; 0
 3f8:	01 c0       	rjmp	.+2      	; 0x3fc <main+0x9a>
			}
			else if (DIO_enuReadPin(GPIOC,1)==1)
			{
				response = ON_STATUS;
 3fa:	d1 e0       	ldi	r29, 0x01	; 1
			}
			else
			{
			}
			USART_vidSendByte(response);
 3fc:	8d 2f       	mov	r24, r29
 3fe:	0e 94 98 02 	call	0x530	; 0x530 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();
 402:	0e 94 a0 02 	call	0x540	; 0x540 <USART_vidEnableTXInterrupt>
			break;
 406:	c4 cf       	rjmp	.-120    	; 0x390 <main+0x2e>
			case ROOM3_STATUS:
			if (DIO_enuReadPin(GPIOC,2)==0)
 408:	62 e0       	ldi	r22, 0x02	; 2
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	0e 94 47 01 	call	0x28e	; 0x28e <DIO_enuReadPin>
 410:	88 23       	and	r24, r24
 412:	39 f0       	breq	.+14     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			{
				response = OFF_STATUS;
			}
			else if (DIO_enuReadPin(GPIOC,2)==1)
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 47 01 	call	0x28e	; 0x28e <DIO_enuReadPin>
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	21 f4       	brne	.+8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
			USART_vidEnableTXInterrupt();
			break;
			case ROOM3_STATUS:
			if (DIO_enuReadPin(GPIOC,2)==0)
			{
				response = OFF_STATUS;
 422:	d0 e0       	ldi	r29, 0x00	; 0
 424:	01 c0       	rjmp	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			}
			else if (DIO_enuReadPin(GPIOC,2)==1)
			{
				response = ON_STATUS;
 426:	d1 e0       	ldi	r29, 0x01	; 1
			}
			else
			{
			}
			USART_vidSendByte(response);
 428:	8d 2f       	mov	r24, r29
 42a:	0e 94 98 02 	call	0x530	; 0x530 <USART_vidSendByte>
			USART_vidEnableTXInterrupt();
 42e:	0e 94 a0 02 	call	0x540	; 0x540 <USART_vidEnableTXInterrupt>
			break;
 432:	ae cf       	rjmp	.-164    	; 0x390 <main+0x2e>
			case ROOM4_STATUS:
			if (DIO_enuReadPin(GPIOC,3)==0)
 434:	63 e0       	ldi	r22, 0x03	; 3
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	0e 94 47 01 	call	0x28e	; 0x28e <DIO_enuReadPin>
 43c:	88 23       	and	r24, r24
 43e:	39 f0       	breq	.+14     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			{
				response = OFF_STATUS;
			}
			else if (DIO_enuReadPin(GPIOC,3)==1)
 440:	63 e0       	ldi	r22, 0x03	; 3
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	0e 94 47 01 	call	0x28e	; 0x28e <DIO_enuReadPin>
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	21 f4       	brne	.+8      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
			USART_vidEnableTXInterrupt();
			break;
			case ROOM4_STATUS:
			if (DIO_enuReadPin(GPIOC,3)==0)
			{
				response = OFF_STATUS;
 44e:	d0 e0       	ldi	r29, 0x00	; 0
 450:	01 c0       	rjmp	.+2      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
			}
			else if (DIO_enuReadPin(GPIOC,3)==1)
			{
				response = ON_STATUS;
 452:	d1 e0       	ldi	r29, 0x01	; 1
			}
			else
			{
			}
	USART_vidSendByte(response);
 454:	8d 2f       	mov	r24, r29
 456:	0e 94 98 02 	call	0x530	; 0x530 <USART_vidSendByte>
	USART_vidEnableTXInterrupt();
 45a:	0e 94 a0 02 	call	0x540	; 0x540 <USART_vidEnableTXInterrupt>
			break;
 45e:	98 cf       	rjmp	.-208    	; 0x390 <main+0x2e>
			
			case ROOM1_TURN_ON:
			LED_vidTurnOn(GPIOC,0);
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	0e 94 a9 01 	call	0x352	; 0x352 <LED_vidTurnOn>
			break;
 468:	93 cf       	rjmp	.-218    	; 0x390 <main+0x2e>
			case ROOM2_TURN_ON:
			LED_vidTurnOn(GPIOC,1);
 46a:	61 e0       	ldi	r22, 0x01	; 1
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	0e 94 a9 01 	call	0x352	; 0x352 <LED_vidTurnOn>
			break;
 472:	8e cf       	rjmp	.-228    	; 0x390 <main+0x2e>
			case ROOM3_TURN_ON:
			LED_vidTurnOn(GPIOC,2);
 474:	62 e0       	ldi	r22, 0x02	; 2
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	0e 94 a9 01 	call	0x352	; 0x352 <LED_vidTurnOn>
			break;
 47c:	89 cf       	rjmp	.-238    	; 0x390 <main+0x2e>
			case ROOM4_TURN_ON:
			LED_vidTurnOn(GPIOC,3);
 47e:	63 e0       	ldi	r22, 0x03	; 3
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	0e 94 a9 01 	call	0x352	; 0x352 <LED_vidTurnOn>
			break;
 486:	84 cf       	rjmp	.-248    	; 0x390 <main+0x2e>
			
			case ROOM1_TURN_OFF:
			LED_vidTurnOff(GPIOC,0);
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	0e 94 ad 01 	call	0x35a	; 0x35a <LED_vidTurnOff>
			break;
 490:	7f cf       	rjmp	.-258    	; 0x390 <main+0x2e>
			case ROOM2_TURN_OFF:
			LED_vidTurnOff(GPIOC,1);
 492:	61 e0       	ldi	r22, 0x01	; 1
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	0e 94 ad 01 	call	0x35a	; 0x35a <LED_vidTurnOff>
			break;
 49a:	7a cf       	rjmp	.-268    	; 0x390 <main+0x2e>
			case ROOM3_TURN_OFF:
			LED_vidTurnOff(GPIOC,2);
 49c:	62 e0       	ldi	r22, 0x02	; 2
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	0e 94 ad 01 	call	0x35a	; 0x35a <LED_vidTurnOff>
			break;
 4a4:	75 cf       	rjmp	.-278    	; 0x390 <main+0x2e>
			case ROOM4_TURN_OFF:
			LED_vidTurnOff(GPIOC,3);
 4a6:	63 e0       	ldi	r22, 0x03	; 3
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	0e 94 ad 01 	call	0x35a	; 0x35a <LED_vidTurnOff>
			break;
 4ae:	70 cf       	rjmp	.-288    	; 0x390 <main+0x2e>

000004b0 <USART_vidInit>:

void USART_vidInit(u32 copy_u8BaudRate)
{
    u16 Local_UBRR;
    /* Adjust Mode */
    CLR_BIT(USCRC,URSEL);
 4b0:	20 b5       	in	r18, 0x20	; 32
 4b2:	2f 77       	andi	r18, 0x7F	; 127
 4b4:	20 bd       	out	0x20, r18	; 32
    #if   USART_MODE == 0
        // SET_BIT(USCRC,UMSEL);
        CLR_BIT(USCRC,UMSEL);
 4b6:	20 b5       	in	r18, 0x20	; 32
 4b8:	2f 7b       	andi	r18, 0xBF	; 191
 4ba:	20 bd       	out	0x20, r18	; 32
        Local_UBRR = (8000000/(16*copy_u8BaudRate))-1;
 4bc:	dc 01       	movw	r26, r24
 4be:	cb 01       	movw	r24, r22
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	aa 1f       	adc	r26, r26
 4c6:	bb 1f       	adc	r27, r27
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	aa 1f       	adc	r26, r26
 4ce:	bb 1f       	adc	r27, r27
 4d0:	9c 01       	movw	r18, r24
 4d2:	ad 01       	movw	r20, r26
 4d4:	22 0f       	add	r18, r18
 4d6:	33 1f       	adc	r19, r19
 4d8:	44 1f       	adc	r20, r20
 4da:	55 1f       	adc	r21, r21
 4dc:	22 0f       	add	r18, r18
 4de:	33 1f       	adc	r19, r19
 4e0:	44 1f       	adc	r20, r20
 4e2:	55 1f       	adc	r21, r21
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	72 e1       	ldi	r23, 0x12	; 18
 4e8:	8a e7       	ldi	r24, 0x7A	; 122
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 a8 02 	call	0x550	; 0x550 <__udivmodsi4>
 4f0:	21 50       	subi	r18, 0x01	; 1
 4f2:	31 09       	sbc	r19, r1
    #elif USART_WORDSIZE == 2
        CLR_BIT(USCRC,UCSZ0);
        SET_BIT(USCRC,UCSZ1);
        CLR_BIT(USCRB,UCSZ2);
    #elif USART_WORDSIZE == 3
        SET_BIT(USCRC,UCSZ0);
 4f4:	80 b5       	in	r24, 0x20	; 32
 4f6:	82 60       	ori	r24, 0x02	; 2
 4f8:	80 bd       	out	0x20, r24	; 32
        SET_BIT(USCRC,UCSZ1);
 4fa:	80 b5       	in	r24, 0x20	; 32
 4fc:	84 60       	ori	r24, 0x04	; 4
 4fe:	80 bd       	out	0x20, r24	; 32
        CLR_BIT(USCRB,UCSZ2);
 500:	8a b1       	in	r24, 0x0a	; 10
 502:	8b 7f       	andi	r24, 0xFB	; 251
 504:	8a b9       	out	0x0a, r24	; 10
        SET_BIT(USCRB,UCSZ2);
    #endif

    /* Adjust Parity */
    #if   USART_PARITY == 0
        CLR_BIT(USCRC,UPM0);
 506:	80 b5       	in	r24, 0x20	; 32
 508:	8f 7e       	andi	r24, 0xEF	; 239
 50a:	80 bd       	out	0x20, r24	; 32
        CLR_BIT(USCRC,UPM1);
 50c:	80 b5       	in	r24, 0x20	; 32
 50e:	8f 7d       	andi	r24, 0xDF	; 223
 510:	80 bd       	out	0x20, r24	; 32

    /* Adjust Stop Bit */
    #if USART_STOPBIT == 0
        CLR_BIT(USCRC,USBS);
    #else
        SET_BIT(USCRC,USBS);
 512:	80 b5       	in	r24, 0x20	; 32
 514:	88 60       	ori	r24, 0x08	; 8
 516:	80 bd       	out	0x20, r24	; 32
    #endif

    /* Enable TX and RX */
    SET_BIT(USCRB,TXEN);
 518:	8a b1       	in	r24, 0x0a	; 10
 51a:	88 60       	ori	r24, 0x08	; 8
 51c:	8a b9       	out	0x0a, r24	; 10
    SET_BIT(USCRB,RXEN);
 51e:	8a b1       	in	r24, 0x0a	; 10
 520:	80 61       	ori	r24, 0x10	; 16
 522:	8a b9       	out	0x0a, r24	; 10

    /* Adjust UBRR */
    SET_BIT(USCRC,URSEL);
 524:	80 b5       	in	r24, 0x20	; 32
 526:	80 68       	ori	r24, 0x80	; 128
 528:	80 bd       	out	0x20, r24	; 32
    UBRRH = (u8)(Local_UBRR >> 8);
 52a:	30 bd       	out	0x20, r19	; 32
    UBRRL = (u8)(Local_UBRR);
 52c:	29 b9       	out	0x09, r18	; 9
 52e:	08 95       	ret

00000530 <USART_vidSendByte>:
}

void USART_vidSendByte(u8 copy_u8DataSend)
{
    while(GET_BIT(USCRA,UDRE)==0);
 530:	5d 9b       	sbis	0x0b, 5	; 11
 532:	fe cf       	rjmp	.-4      	; 0x530 <USART_vidSendByte>
    UDR = copy_u8DataSend;
 534:	8c b9       	out	0x0c, r24	; 12
 536:	08 95       	ret

00000538 <USART_u8RecieveByte>:
}

u8 USART_u8RecieveByte(void)
{
    while(GET_BIT(USCRA,RXC)==0);
 538:	5f 9b       	sbis	0x0b, 7	; 11
 53a:	fe cf       	rjmp	.-4      	; 0x538 <USART_u8RecieveByte>
    return UDR;   
 53c:	8c b1       	in	r24, 0x0c	; 12
}
 53e:	08 95       	ret

00000540 <USART_vidEnableTXInterrupt>:

void USART_vidEnableTXInterrupt(void)
{
    SET_BIT(USCRB,TXCIE);   
 540:	8a b1       	in	r24, 0x0a	; 10
 542:	80 64       	ori	r24, 0x40	; 64
 544:	8a b9       	out	0x0a, r24	; 10
 546:	08 95       	ret

00000548 <USART_vidEnableRXInterrupt>:
}

void USART_vidEnableRXInterrupt(void)
{
    SET_BIT(USCRB,RXCIE);
 548:	8a b1       	in	r24, 0x0a	; 10
 54a:	80 68       	ori	r24, 0x80	; 128
 54c:	8a b9       	out	0x0a, r24	; 10
 54e:	08 95       	ret

00000550 <__udivmodsi4>:
 550:	a1 e2       	ldi	r26, 0x21	; 33
 552:	1a 2e       	mov	r1, r26
 554:	aa 1b       	sub	r26, r26
 556:	bb 1b       	sub	r27, r27
 558:	fd 01       	movw	r30, r26
 55a:	0d c0       	rjmp	.+26     	; 0x576 <__udivmodsi4_ep>

0000055c <__udivmodsi4_loop>:
 55c:	aa 1f       	adc	r26, r26
 55e:	bb 1f       	adc	r27, r27
 560:	ee 1f       	adc	r30, r30
 562:	ff 1f       	adc	r31, r31
 564:	a2 17       	cp	r26, r18
 566:	b3 07       	cpc	r27, r19
 568:	e4 07       	cpc	r30, r20
 56a:	f5 07       	cpc	r31, r21
 56c:	20 f0       	brcs	.+8      	; 0x576 <__udivmodsi4_ep>
 56e:	a2 1b       	sub	r26, r18
 570:	b3 0b       	sbc	r27, r19
 572:	e4 0b       	sbc	r30, r20
 574:	f5 0b       	sbc	r31, r21

00000576 <__udivmodsi4_ep>:
 576:	66 1f       	adc	r22, r22
 578:	77 1f       	adc	r23, r23
 57a:	88 1f       	adc	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	1a 94       	dec	r1
 580:	69 f7       	brne	.-38     	; 0x55c <__udivmodsi4_loop>
 582:	60 95       	com	r22
 584:	70 95       	com	r23
 586:	80 95       	com	r24
 588:	90 95       	com	r25
 58a:	9b 01       	movw	r18, r22
 58c:	ac 01       	movw	r20, r24
 58e:	bd 01       	movw	r22, r26
 590:	cf 01       	movw	r24, r30
 592:	08 95       	ret

00000594 <__tablejump2__>:
 594:	ee 0f       	add	r30, r30
 596:	ff 1f       	adc	r31, r31
 598:	05 90       	lpm	r0, Z+
 59a:	f4 91       	lpm	r31, Z
 59c:	e0 2d       	mov	r30, r0
 59e:	09 94       	ijmp

000005a0 <_exit>:
 5a0:	f8 94       	cli

000005a2 <__stop_program>:
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <__stop_program>
